openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: 'https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg'
    altText: 'Checkout.com API logo'
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    ## Get started

    Checkout.com provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard <a href="https://www.checkout.com/docs/previous/resources/codes/http-response-codes">HTTP response codes</a>.

    You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href="https://www.checkout.com/docs/previous/integrate/sdks" target="_blank">SDKs</a>.

    We have a testing environment called sandbox, which you can <a href="https://www.checkout.com/get-test-account">sign up for</a> to test API calls without affecting live data.

    ### Base URLs

    Use the following base URLs when making requests to the APIs:

      | Environment   |      Base URL                                        |
      |---------------|------------------------------------------------------|
      | Sandbox       |  https://api.sandbox.checkout.com/                   |
      | Production    |  https://api.checkout.com/                           |

    ### Looking for more guidance?

    Depending on what integration you need, we've provided <a href="https://www.checkout.com/docs/previous/integrate/">guides to get you set up</a>.

    ###Â Not using APIs?

    We've partnered with many popular <a href="https://www.checkout.com/docs/previous/integrate/e-commerce-platforms">e-commerce platforms</a> so you can get up and running quickly, processing online payments with one of our e-commerce plugins.

    # Authentication

    When you sign up for an account, you are given a secret and public API key
    pair. You authenticate with our API by providing the appropriate key in
    the request Authorization header.

    Never share your secret keys. Keep them guarded and secure.

servers:
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
  - url: https://api.checkout.com
    description: Live API
tags:
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  - name: Payment Links
    description: Create a Payment Link to accept and process payment details.
  - name: Hosted Payments Page
    description: Create a Hosted Payments Page to accept and process payment details.
  - name: Sources
    description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details (or their tokenized form in a digital wallet) that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Create a payment instrument that you can later use as the source or destination for one or more payments.
  - name: Webhooks
    description: Create and manage the webhook notifications you receive to keep up to date with the status of your transactions.
  - name: Events
    description: Use events to monitor and get insights into your transactions.
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Reconciliation
    description: Quickly find all fees associated with each of your payments, so you can concentrate on the important stuff while streamlining your financial reporting.
  - name: Risk
    description: Evaluate the risk of a transaction at the pre-authentication and pre-capture stages of the payment process.
  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs
x-tagGroups:
  - name: Handle payments and payouts
    tags:
      - Payments
      - Payment Links
      - Hosted Payments Page
  - name: Stored payment details
    tags:
      - Tokens
      - Sources
      - Instruments
      - Customers
  - name: Notifications
    tags:
      - Events
      - Webhooks
  - name: Disputes
    tags:
      - Disputes
  - name: Risk management
    tags:
      - Risk
  - name: Statements and reporting
    tags:
      - Reconciliation
paths:
  /customers:
    post:
      security:
        - ApiSecretKey: []
      tags:
        - Customers
      summary: Create a customer
      operationId: createCustomer
      description: >
        <a href="https://www.checkout.com/docs/previous/payments/store-payment-details/customers" target="_blank">Store a customer's details in a customer object to reuse in future payments</a>. Link a payment instrument using the Update customer details endpoint, so the customer `id` returned can be passed as a source when making a payment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreateResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Previous.CustomerRequest;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone {CountryCode = \"1\", Number = \"4155552671\"},\n    Metadata = new Dictionary<string, object>() {{\"coupon_code\", \"NY2018\"}, {\"partner_id\", \"123989\"}}\n};\n\ntry\n{\n    IdResponse response = await api.CustomersClient().Create(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.IdResponse;\nimport com.checkout.common.Phone;\nimport com.checkout.customers.previous.CustomerRequest;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCustomerRequest request = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\ntry {\n    IdResponse response = api.customersClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const customerResponse = await cko.customers.create({\n		email: 'JohnTest@test.com',\n		name: 'John Test',\n		phone: {\n			country_code: '+1',\n			number: '4155552671',\n		},\n		metadata: {\n			coupon_code: 'NY2018',\n			partner_id: 123989,\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Customers\\CustomerRequest;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"1\";\n$phone->number = \"4155552671\";\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"name\";\n$customerRequest->phone = $phone;\n\ntry {\n    $response = $api->getCustomersClient()->create($customerRequest);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone\nfrom checkout_sdk.customers.customers import CustomerRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\ncustomer_request.phone = phone\n\ntry:\n    response = api.customers.create(customer_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /customers/{identifier}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Get customer details
      operationId: getCustomerDetails
      description: Returns details of a customer and their instruments
      parameters:
        - in: path
          name: identifier
          required: true
          description: The customer's ID or email
          schema:
            type: string
            properties:
              id:
                type: string
                pattern: "^(cus)_(\\w{26})$"
              email:
                type: string
                format: email
                maxLength: 255
            additionalProperties: false
            oneOf:
              - required: [ id ]
              - required: [ email ]
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGetResponse'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Customers.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    CustomerDetailsResponse response = await api.CustomersClient().Get(\"customer_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.customers.previous.CustomerDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    CustomerDetailsResponse response = api.customersClient().get(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const customerResponse = await cko.customers.get('cus_2tvaccfvs3lulevzg42vgyvtdq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getCustomersClient()->get(\"customer_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.customers.get('customer_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Update customer details
      operationId: updateCustomerDetails
      description: Update details of a customer
      parameters:
        - in: path
          name: identifier
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          required: true
          description: The customer id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '204':
          description: Customer updated successfully
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Previous.CustomerRequest;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone\n    {\n        CountryCode = \"1\",\n        Number = \"4155552671\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    EmptyResponse response = await api.CustomersClient().Update(\"customer_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.common.Phone;\nimport com.checkout.customers.previous.CustomerRequest;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCustomerRequest request = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\ntry {\n    EmptyResponse response = api.customersClient().update(\"customer_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const customerResponse = await cko.customers.update('cus_2tvaccfvs3lulevzg42vgyvtdq', {\n		name: 'James Bond',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Customers\\CustomerRequest;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"1\";\n$phone->number = \"4155552671\";\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"name\";\n$customerRequest->phone = $phone;\n\ntry {\n    $response = $api->getCustomersClient()->update(\"customer_id\", $customerRequest);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone\nfrom checkout_sdk.customers.customers import CustomerRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\ncustomer_request.phone = phone\n\ntry:\n    response = api.customers.update('customer_id', customer_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Delete a customer
      operationId: deleteCustomerDetails
      description: Delete a customer and all of their linked payment instruments
      parameters:
        - in: path
          name: identifier
          required: true
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          description: The customer id
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Customer not found or not associated with client
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.CustomersClient().Delete(\"customer_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n        .builder()\n        .previous()\n        .staticKeys()\n        .secretKey(\"secret_key\")\n        .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n        .build();\n\ntry {\n    EmptyResponse response = api.customersClient().delete(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const customerResponse = await cko.customers.delete('cus_zbgrqmm6s5ne7lszegj5iu4lci');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getCustomersClient()->delete(\"customer_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.customers.delete('customer_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /disputes:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get disputes
      operationId: getDisputes
      description:
        Returns a list of all disputes against your business. The results will be returned in reverse chronological order,
        showing the last modified dispute (for example, where you've recently added a piece of evidence) first.
        You can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: The date and time from which to filter disputes, based on the dispute's `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: The date and time until which to filter disputes, based on the dispute's `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: statuses
          schema:
            type: string
            example: evidence_required,evidence_under_review
          required: false
          description: One or more comma-separated statuses. This works like a logical *OR* operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: The acquirer reference number (ARN) that you can use to query the issuing bank
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description: If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nDisputesQueryFilter request = new DisputesQueryFilter\n{\n    Limit = 250,\n    To = DateTime.Now,\n};\n\ntry\n{\n    DisputesQueryResponse response = await api.DisputesClient().Query(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeStatus;\nimport com.checkout.disputes.DisputesQueryFilter;\nimport com.checkout.disputes.DisputesQueryResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nDisputesQueryFilter query = DisputesQueryFilter.builder()\n    .paymentId(\"payment_id\")\n    .from(Instant.parse(LocalDateTime.now().minusMonths(2).toInstant(ZoneOffset.UTC).toString()))\n    .to(Instant.parse(LocalDateTime.now().toString()))\n    .paymentArn(\"payment_arn\")\n    .paymentReference(\"payment_reference\")\n    .statuses(String.join(\",\", DisputeStatus.EVIDENCE_REQUIRED.getStatus(), DisputeStatus.ACCEPTED.getStatus()))\n    .limit(10)\n    .skip(5)\n    .build();\n\ntry {\n    DisputesQueryResponse response = api.disputesClient().query(query).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputes = await cko.disputes.get({\n	limit: 5,\n	id: 'dsp_bc94ebda8d275i461229',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Disputes\\DisputesQueryFilter;\nuse Checkout\\Environment;\n\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$query = new DisputesQueryFilter();\n$query->payment_id = \"payment_id\";\n$query->payment_arn = \"payment_arn\";\n$query->payment_reference = \"payment_reference\";\n$query->statuses = \"comma,separated,list,statuses\";\n$query->limit = 10;\n$query->skip = 5;\n$query->to = new DateTime(); // UTC, now\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"America/Mexico_City\"));\n$from->sub(new DateInterval(\"P1M\"));\n$query->from = $from;\n\ntry {\n    $response = $api->getDisputesClient()->query($query);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.disputes.disputes import DisputesQueryFilter\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom datetime import datetime, timezone\nfrom dateutil.relativedelta import relativedelta\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nquery = DisputesQueryFilter()\nnow = datetime.now(timezone.utc)\nquery.from_ = now - relativedelta(months=6)\nquery.to = now\nquery.payment_arn = 'payment_arn'\nquery.payment_reference = 'payment_reference'\nquery.limit = 10\nquery.skip = 5\n\ntry:\n    response = api.disputes.query(query)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /disputes/{dispute_id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get dispute details
      operationId: getDisputeDetails
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n            \ntry\n{\n    DisputeDetailsResponse response = await api.DisputesClient().GetDisputeDetails(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    DisputeDetailsResponse response = api.disputesClient().getDisputeDetails(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputeDetails = await cko.disputes.getDetails('dsp_bc94ebda8d275i461229');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getDisputesClient()->getDisputeDetails(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.disputes.get_dispute_details('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /disputes/{dispute_id}/accept:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Accept dispute
      operationId: acceptDispute
      description: If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.DisputesClient().Accept(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.disputesClient().accept(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst accept = await cko.disputes.accept('dsp_bc94ebda8d275i461229');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getDisputesClient()->accept(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.disputes.accept('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization\n"
  /disputes/{dispute_id}/evidence:
    put:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Provide dispute evidence
      operationId: provideDisputeEvidence
      description: |
        Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by `file_`) which you can then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it.
    
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n	.Previous()\n	.StaticKeys()\n	.PublicKey(\"public_key\")\n	.SecretKey(\"secret_key\")\n	.Environment(Environment.Sandbox)\n	.HttpClientFactory(new DefaultHttpClientFactory())\n	.Build();\n\nDisputeEvidenceRequest request = new DisputeEvidenceRequest()\n{\n	ProofOfDeliveryOrServiceFile = \"file_xxxxxx\",\n	ProofOfDeliveryOrServiceText = \"proof of delivery or service text\",\n	InvoiceOrReceiptFile = \"file_xxxxxx\",\n	InvoiceOrReceiptText = \"Copy of the invoice\",\n	CustomerCommunicationFile = \"file_xxxxxx\",\n	CustomerCommunicationText = \"Copy of an email exchange with the cardholder\",\n	AdditionalEvidenceFile = \"file_xxxxxx\",\n	AdditionalEvidenceText = \"Scanned document\"\n};\n\ntry\n{\n	EmptyResponse response = await api.DisputesClient().PutEvidence(\"disputes_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n	// API error\n	string requestId = e.RequestId;\n	var statusCode = e.HttpStatusCode;\n	IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n	// Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n	// Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeEvidenceRequest;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n        .builder()\n        .previous()\n        .staticKeys()\n        .secretKey(\"secret_key\")\n        .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n        .build();\n\nDisputeEvidenceRequest evidenceRequest = DisputeEvidenceRequest.builder()\n    .proofOfDeliveryOrServiceFile(\"file_id\")\n    .proofOfDeliveryOrServiceText(\"proof of delivery or service text\")\n    .invoiceOrReceiptFile(\"file_id\")\n    .invoiceOrReceiptText(\"Copy of the invoice\")\n    .invoiceShowingDistinctTransactionsFile(\"\")\n    .invoiceShowingDistinctTransactionsText(\"Copy of invoice #1244 showing two transactions\")\n    .customerCommunicationFile(\"file_id\")\n    .customerCommunicationText(\"Copy of an email exchange with the cardholder\")\n    .refundOrCancellationPolicyFile(\"file_id\")\n    .refundOrCancellationPolicyText(\"Copy of the refund policy\")\n    .recurringTransactionAgreementFile(\"file_id\")\n    .recurringTransactionAgreementText(\"Copy of the recurring transaction agreement\")\n    .additionalEvidenceFile(\"file_id\")\n    .additionalEvidenceText(\"Scanned document\")\n    .proofOfDeliveryOrServiceDateFile(\"file_id\")\n    .proofOfDeliveryOrServiceDateText(\"Copy of the customer receipt showing the merchandise was delivered on 2018-12-20\")\n    .build();\n\ntry {\n    EmptyResponse response = api.disputesClient().putEvidence(\"dispute_id\", evidenceRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst evidence = await cko.disputes.provideEvidence('dsp_bc94ebda8d275i461229', {\n	proof_of_delivery_or_service_text: 'http://checkout.com/document.pdf',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Disputes\\DisputeEvidenceRequest;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new DisputeEvidenceRequest();\n$request->proof_of_delivery_or_service_file = \"file_id\";\n$request->proof_of_delivery_or_service_text = \"proof of delivery or service text\";\n$request->invoice_or_receipt_file = \"file_id\";\n$request->invoice_or_receipt_text = \"Copy of the invoice\";\n$request->customer_communication_file = \"file_id\";\n$request->customer_communication_text = \"Copy of an email exchange with the cardholder\";\n$request->additional_evidence_file = \"file_id\";\n$request->additional_evidence_text = \"Scanned document\";\n\ntry {\n    $response = $api->getDisputesClient()->putEvidence(\"dispute_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.disputes.disputes import DisputeEvidenceRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nevidence_request = DisputeEvidenceRequest()\nevidence_request.proof_of_delivery_or_service_file = 'proof_of_delivery_or_service_file'\nevidence_request.proof_of_delivery_or_service_text = 'proof of delivery or service text'\nevidence_request.invoice_or_receipt_file = 'invoice_or_receipt_file'\nevidence_request.invoice_or_receipt_text = 'invoice_or_receipt_text'\nevidence_request.customer_communication_file = 'customer_communication_file'\nevidence_request.customer_communication_text = 'customer_communication_text'\nevidence_request.additional_evidence_file = 'additional_evidence_file'\nevidence_request.additional_evidence_text = 'additional_evidence_text'\n\ntry:\n    response = api.disputes.put_evidence('dispute_id', evidence_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get dispute evidence
      operationId: getDisputeEvidence
      description: |
        Retrieves a list of the evidence submitted in response to a specific dispute.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    DisputeEvidenceResponse response = await api.DisputesClient().GetEvidence(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeEvidenceResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    DisputeEvidenceResponse response = api.disputesClient().getEvidence(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getEvidence = await cko.disputes.getEvidence('dsp_bc94ebda8d275i461229');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getDisputesClient()->getEvidence(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.disputes.get_evidence('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Submit dispute evidence
      operationId: submitDisputeEvidence
      description:
        With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request.
        You will not be able to amend your evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.DisputesClient().SubmitEvidence(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.disputesClient().submitEvidence(\"evidence_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst submitEvidence = await cko.disputes.submit('dsp_bc94ebda8d275i461229');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getDisputesClient()->submitEvidence(\"evidence_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.disputes.submit_evidence('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization\n"
  /event-types:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event types
      operationId: retrieveEventTypes
      description: Retrieve a list of event types grouped by their respective version that you can configure on your webhooks.
      parameters:
        - in: query
          name: version
          schema:
            type: string
          description: The API version for which you want to retrieve the event types. Set this to `1.0` for the legacy API or `2.0` for the Unified Payments API. If no version is specified, event types for both versions will be returned.
          required: false
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTypesObject'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Events.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    /*\n     Specify API version:\n     \"1.0\" => Legacy API\n     \"2.0\" => Unified Payments API\n     null  => all versions\n     */\n                \n    ItemsResponse<EventTypesResponse> response = await api.EventsClient().RetrieveAllEventTypes();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.ItemsResponse;\nimport com.checkout.events.previous.EventTypes;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    /*\n       Specify API version:\n        \"1.0\" => Legacy API\n        \"2.0\" => Unified Payments API\n        null  => all versions\n    */\n    ItemsResponse<EventTypes> response = api.eventsClient().retrieveAllEventTypes(null).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst events = await cko.events.retrieveEventTypes();"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    /*\n       Specify API version:\n        \"1.0\" => Legacy API\n        \"2.0\" => Unified Payments API\n        null  => all versions\n    */\n    $response = $api->getEventsClient()->retrieveAllEventTypes();\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    # Specify API version:\n    # \"1.0\" = > Legacy API\n    # \"2.0\" = > Unified Payments API\n    # null = > all versions\n\n    response = api.events.retrieve_all_event_types(\"version\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /events:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve events
      operationId: retrieveEvents
      description: |
        Retrieves events based on your query parameters.
      parameters:
        - in: query
          name: payment_id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
            description: The identifier of a payment
            example: pay_ok2ynq6ubn3ufmo6jsdfmdvy5q
        - in: query
          name: charge_id
          schema:
            type: string
            pattern: "^(charge|charge_test)_(\\w{20})$"
            description: The identifier of a charge
            example: charge_FC1919EE547L23CC6BE1
        - in: query
          name: track_id
          schema:
            type: string
            description: The tracking ID of a payment
            example: TRK12345
        - in: query
          name: reference
          schema:
            type: string
            description: The reference of a payment
            example: ORD-5023-4E89
        - in: query
          name: skip
          schema:
            type: integer
            description: Set how many events you want to skip
            example: 0
        - in: query
          name: limit
          schema:
            type: integer
            description: Limit how many events your request returns
            example: 5
        - in: query
          name: from
          schema:
            type: string
            format: date-time
            description: Set the date and time from which you want to retrieve events
            example: "2020-11-07T04:00:00Z"
        - in: query
          name: to
          schema:
            type: string
            format: date-time
            description: Set the date and time to which you want to retrieve events
            example: "2020-11-07T08:15:00Z"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Payment_Id'
                  - $ref: '#/components/schemas/Charge_Id'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entry
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentIdInvalidResponse'
                  - $ref: '#/components/schemas/ChargeIdInvalidResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Events.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n	.Previous()\n	.StaticKeys()\n	.PublicKey(\"public_key\")\n	.SecretKey(\"secret_key\")\n	.Environment(Environment.Sandbox)\n	.HttpClientFactory(new DefaultHttpClientFactory())\n	.Build();\n\nRetrieveEventsRequest request = new RetrieveEventsRequest() {PaymentId = \"payment_id\"};\n\ntry\n{\n	EventsPageResponse response = await api.EventsClient().RetrieveEvents(request);\n}\ncatch (CheckoutApiException e)\n{\n	// API error\n	string requestId = e.RequestId;\n	var statusCode = e.HttpStatusCode;\n	IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n	// Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n	// Invalid authorization\n}"
        - lang: cURL
          source: "curl --location --request GET 'https://api.checkout.com/broadcast/events?payment_id=pay_ok2ynq6ubn3ufmo6jsdfmdvy5q'\n  --header 'Authorization: secret_key_broadcast'"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.events.previous.EventsPageResponse;\nimport com.checkout.events.previous.RetrieveEventsRequest;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nRetrieveEventsRequest retrieveEventsRequest = RetrieveEventsRequest.builder()\n    .from(LocalDateTime.now().minusMonths(2).toInstant(ZoneOffset.UTC))\n    .to(LocalDateTime.now().toInstant(ZoneOffset.UTC))\n    .limit(15)\n    .skip(0)\n    //.paymentId(\"payment_id\")\n    .build();\n\ntry {\n    EventsPageResponse response = api.eventsClient().retrieveEvents(retrieveEventsRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const events = await cko.events.retrieveEvents({\n		from: '2019-03-01T00:00:00Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Events\\Previous\\RetrieveEventsRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new RetrieveEventsRequest();\n$request->payment_id = \"payment_id\";\n$request->charge_id = \"payment_arn\";\n$request->reference = \"reference\";\n$request->limit = 10;\n$request->skip = 5;\n$request->from = new DateTime();\n$request->to = new DateTime();\n\ntry {\n    $response = $api->getEventsClient()->retrieveEvents($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.events.events import RetrieveEventsRequest\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nrequest = RetrieveEventsRequest()\nrequest.payment_id = \"pay_ok2ynq6ubn3ufmo6jsdfmdvy5q\"\nrequest.charge_id = \"charge_FC1919EE547L23CC6BE1\"\nrequest.track_id = \"TRK12345\"\nrequest.reference = \"ORD-5023-4E89\"\nrequest.skip = \"0\"\nrequest.limit = \"5\"\nrequest.from_ = \"2020-11-07T04:00:00Z\"\nrequest.to = \"2020-11-07T08:15:00Z\"\n\ntry:\n    response = api.events.retrieve_events(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /events/{eventId}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event
      operationId: retrieveEvent
      description: |
        Retrieves the event with the specified identifier string. The event `data` includes the full event details, the schema of which will vary based on the `type`.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventObject'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Events.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EventResponse response = await api.EventsClient().RetrieveEvent(\"event_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.events.previous.EventResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EventResponse response = api.eventsClient().retrieveEvent(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst event = await cko.events.retrieveEvent('evt_c2qelfixai2u3es3ksovngkx3e');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getEventsClient()->retrieveEvent(\"event_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.events.retrieve_event(\"event_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /events/{eventId}/notifications/{notificationId}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event notification
      operationId: retrieveEventNotification
      description: Retrieves the attempts for a specific event notification
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
        - in: path
          name: notificationId
          schema:
            type: string
            pattern: "^(ntf)_(\\w{26})$"
          required: true
          description: The notification identifier
      responses:
        '200':
          description: Notification retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or notification not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Events.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EventNotificationResponse response =\n        await api.EventsClient().RetrieveEventNotification(\"event_id\", \"notification_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.events.previous.EventNotificationResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EventNotificationResponse response = api.eventsClient().retrieveEventNotification(\"event_id\", \"notification_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst notification = await cko.events.retrieveEventNotification({\n	eventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n	notificationId: 'ntf_wqjkqpgjy33uxoywcej4fnw6qm',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getEventsClient()->retrieveEventNotification(\"event_id\", \"notification_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.events.retrieve_event_notification(\"event_id\", \"notification_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /events/{eventId}/webhooks/{webhookId}/retry:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retry webhook
      operationId: retryWebhook
      description: Retries a specific webhook notification for the given event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
        - in: path
          name: webhookId
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          required: true
          description: The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '202':
          description: Retry accepted
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or webhook not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.EventsClient().RetryWebhook(\"event_id\", \"webhook_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.eventsClient().retryWebhook(\"event_id\", \"webhook_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retry = await cko.events.retry({\n	eventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n	webhookId: 'wh_mpkyioafmajulnhjvwmrklenb4',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getEventsClient()->retryWebhook(\"event_id\", \"webhook_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.events.retry_webhook(\"event_id\", \"webhook_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /events/{eventId}/webhooks/retry:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retry all webhooks
      operationId: retryAllWebhooks
      description: Retries all webhook notifications configured for the specified event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
      responses:
        '202':
          description: Retry accepted
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or webhook not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.EventsClient().RetryAllWebhooks(\"event_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.eventsClient().retryAllWebhooks(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retryAll = await cko.events.retryAll('evt_c2qelfixai2u3es3ksovngkx3e');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getEventsClient()->retryAllWebhooks(\"event_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.events.retry_all_webhooks(\"event_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /files:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Upload file
      operationId: uploadFile
      description: Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    IdResponse response = await api.DisputesClient().SubmitFile(\"file_path\", \"dispute_evidence\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FilePurpose;\nimport com.checkout.common.FileRequest;\nimport com.checkout.common.IdResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nFile file = new File(\"evidence.pdf\");\nFileRequest fileRequest = FileRequest.builder()\n    .file(file)\n    .contentType(ContentType.create(\"application/pdf\"))\n    .purpose(FilePurpose.DISPUTE_EVIDENCE)\n    .build();\n\ntry {\n    IdResponse response = api.disputesClient().uploadFile(fileRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst file = await cko.files.upload({\n	path: fs.createReadStream('./test/files/evidence.jpg'),\n	purpose: 'dispute_evidence',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Files\\FileRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$fileRequest = new FileRequest();\n$fileRequest->file = \"path/to/file\";\n$fileRequest->purpose = \"dispute_evidence\";\n\ntry {\n    $response = $api->getDisputesClient()->uploadFile($fileRequest);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.files.files import FileRequest\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nrequest = FileRequest()\nrequest.file = 'path/to/file'\nrequest.purpose = 'dispute_evidence'\n\ntry:\n    response = api.disputes.upload_file(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /files/{file_id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get file information
      operationId: getFileInformation
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Files;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    FileDetailsResponse response = await api.DisputesClient().GetFileDetails(\"file_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FileDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    FileDetailsResponse response = api.disputesClient().getFileDetails(\"file_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getFile = await cko.files.getFile('file_zna32sccqbwevd3ldmejtplbhu');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getDisputesClient()->getFileDetails(\"file_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.disputes.get_file_details('file_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /hosted-payments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Hosted Payments Page
      summary: Create a Hosted Payments Page session
      operationId: createAHostedPaymentsSession
      description: |
        Create a Hosted Payments Page session and pass through all the payment information, like the amount, currency, country and reference.
    
        To get started with our Hosted Payments Page, contact your Solutions Engineer or integration@checkout.com.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedPaymentsRequest'
      responses:
        '201':
          description: Created Hosted Payments Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPaymentsResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Hosted;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nHostedPaymentRequest request = new HostedPaymentRequest()\n{\n    Amount = 10,\n    Currency = Currency.GBP,\n    PaymentType = PaymentType.Regular,\n    PaymentIp = \"192.168.0.1\",\n    BillingDescriptor = new BillingDescriptor() {Name = \"Name\", City = \"City\"},\n    Reference = \"reference\",\n    Description = \"Payment for Gold Necklace\",\n    Customer = new CustomerRequest() {Email = \"email@docs.checkout.com\", Name = \"FirstName LastName\"},\n    Shipping =\n        new ShippingDetails()\n        {\n            Address = new Address()\n            {\n                AddressLine1 = \"Checkout.com\",\n                AddressLine2 = \"90 Tottenham Court Road\",\n                City = \"London\",\n                State = \"London\",\n                Zip = \"W1T 4TJ\",\n                Country = CountryCode.GB\n            },\n            Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n        },\n    Billing =\n        new BillingInformation()\n        {\n            Address = new Address()\n            {\n                AddressLine1 = \"Checkout.com\",\n                AddressLine2 = \"90 Tottenham Court Road\",\n                City = \"London\",\n                State = \"London\",\n                Zip = \"W1T 4TJ\",\n                Country = CountryCode.GB\n            },\n            Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n        },\n    Recipient =\n        new PaymentRecipient()\n        {\n            DateOfBirth = \"1985-05-15\", AccountNumber = \"5555554444\", Zip = \"WIT\", LastName = \"LastName\",\n        },\n    Processing = new ProcessingSettings() {Aft = true},\n    Products = new List<Product>() {new Product() {Name = \"Gold Necklace\", Quantity = 1, Price = 1000}},\n    Risk = new RiskRequest() {Enabled = false},\n    SuccessUrl = \"https://example.com/payments/success\",\n    CancelUrl = \"https://example.com/payments/cancel\",\n    FailureUrl = \"https://example.com/payments/failure\",\n    Metadata = new Dictionary<string, object>(),\n    Locale = \"en-GB\",\n    ThreeDs = new ThreeDsRequest() {Enabled = false, AttemptN3D = false},\n    Capture = true,\n    CaptureOn = new DateTime()\n};\n\ntry\n{\n    HostedPaymentResponse response =\n        await api.HostedPaymentsClient().CreateHostedPaymentsPageSession(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.common.Phone;\nimport com.checkout.common.Product;\nimport com.checkout.payments.BillingDescriptor;\nimport com.checkout.payments.BillingInformation;\nimport com.checkout.payments.PaymentRecipient;\nimport com.checkout.payments.PaymentType;\nimport com.checkout.payments.ProcessingSettings;\nimport com.checkout.payments.RiskRequest;\nimport com.checkout.payments.ShippingDetails;\nimport com.checkout.payments.ThreeDSRequest;\nimport com.checkout.payments.hosted.HostedPaymentRequest;\nimport com.checkout.payments.hosted.HostedPaymentResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nHostedPaymentRequest request = HostedPaymentRequest.builder()\n    .amount(10L)\n    .reference(\"reference\")\n    .currency(Currency.GBP)\n    .description(\"Payment\")\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\", null))\n    .shippingDetails(ShippingDetails.builder()\n        .address(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .billing(BillingInformation.builder()\n        .address(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .recipient(PaymentRecipient.builder()\n        .accountNumber(\"999999999\")\n        .dateOfBirth(\"1985-05-15\")\n        .lastName(\"LastName\")\n        .zip(\"12345\")\n        .build())\n    .processing(ProcessingSettings.builder()\n        .aft(true)\n        .build())\n    .products(Collections.singletonList(Product.builder()\n        .name(\"name\")\n        .quantity(1L)\n        .price(200L)\n        .build()))\n    .risk(new RiskRequest(Boolean.FALSE))\n    .locale(\"en-GB\")\n    .threeDS(ThreeDSRequest.builder()\n        .enabled(Boolean.FALSE)\n        .attemptN3D(Boolean.FALSE)\n        .challengeIndicator(ChallengeIndicator.NO_CHALLENGE_REQUESTED)\n        .build())\n    .capture(true)\n    .captureOn(Instant.now().plus(30, ChronoUnit.DAYS))\n    .paymentType(PaymentType.REGULAR)\n    .billingDescriptor(BillingDescriptor.builder()\n        .city(\"London\")\n        .name(\"name\")\n        .build())\n    .successUrl(\"https://docs.checkout.com/payments/success\")\n    .failureUrl(\"https://docs.checkout.com/payments/success\")\n    .cancelUrl(\"https://docs.checkout.com/payments/success\")\n    .build();\n\ntry {\n    HostedPaymentResponse response = api.hostedPaymentsClient().createHostedPaymentsPageSession(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const hosted = await cko.hostedPayments.create({\n		amount: 10,\n		currency: 'USD',\n		billing: {\n			address: {\n				address_line1: 'Checkout.com',\n				address_line2: '90 Tottenham Court Road',\n				city: 'London',\n				state: 'London',\n				zip: 'W1T 4TJ',\n				country: 'GB',\n			},\n		},\n		success_url: 'https://example.com/success',\n		cancel_url: 'https://example.com/cancel',\n		failure_url: 'https://example.com/failure',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\CustomerRequest;\nuse Checkout\\Common\\PaymentSourceType;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Common\\Product;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\BillingDescriptor;\nuse Checkout\\Payments\\BillingInformation;\nuse Checkout\\Payments\\Hosted\\HostedPaymentsSessionRequest;\nuse Checkout\\Payments\\PaymentRecipient;\nuse Checkout\\Payments\\PaymentType;\nuse Checkout\\Payments\\ProcessingSettings;\nuse Checkout\\Payments\\RiskRequest;\nuse Checkout\\Payments\\ShippingDetails;\nuse Checkout\\Payments\\ThreeDsRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"Name\";\n\n$billingInformation = new BillingInformation();\n$billingInformation->address = $address;\n$billingInformation->phone = $phone;\n\n$shippingDetails = new ShippingDetails();\n$shippingDetails->address = $address;\n$shippingDetails->phone = $phone;\n\n$recipient = new PaymentRecipient();\n$recipient->account_number = \"1234567\";\n$recipient->dob = \"1985-05-15\";\n$recipient->last_name = \"LastName\";\n$recipient->zip = \"12345\";\n\n$product = new Product();\n$product->name = \"Product\";\n$product->quantity = 1;\n$product->price = 10;\n\n$products = array($product);\n\n$theeDsRequest = new ThreeDsRequest();\n$theeDsRequest->enabled = false;\n$theeDsRequest->attempt_n3d = false;\n\n$processing = new ProcessingSettings();\n$processing->aft = true;\n\n$risk = new RiskRequest();\n$risk->enabled = false;\n\n$billingDescriptor = new BillingDescriptor();\n$billingDescriptor->city = \"London\";\n$billingDescriptor->name = \"Awesome name\";\n\n$request = new HostedPaymentsSessionRequest();\n$request->amount = 100;\n$request->reference = \"reference\";\n$request->currency = Currency::$GBP;\n$request->description = \"Payment for Gold Necklace\";\n$request->customer = $customerRequest;\n$request->shipping = $shippingDetails;\n$request->billing = $billingInformation;\n$request->recipient = $recipient;\n$request->processing = $processing;\n$request->products = $products;\n$request->risk = $risk;\n$request->success_url = \"https://example.com/payments/success\";\n$request->cancel_url = \"https://example.com/payments/cancel\";\n$request->failure_url = \"https://example.com/payments/failure\";\n$request->locale = \"en-GB\";\n$request->three_ds = $theeDsRequest;\n$request->capture = true;\n$request->payment_type = PaymentType::$regular;\n$request->billing_descriptor = $billingDescriptor;\n$request->allow_payment_methods = array(PaymentSourceType::$card, PaymentSourceType::$ideal);\n\ntry {\n    $response = $api->getHostedPaymentsClient()->createHostedPaymentsPageSession($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest, Product\nfrom checkout_sdk.common.enums import Country, Currency, PaymentSourceType\nfrom checkout_sdk.payments.hosted.hosted_payments import HostedPaymentsSessionRequest\nfrom checkout_sdk.payments.payments import ThreeDsRequest, ProcessingSettings, RiskRequest, ShippingDetails, PaymentRecipient\nfrom checkout_sdk.payments.payments_previous import BillingInformation\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nbilling_information = BillingInformation()\nbilling_information.address = address\nbilling_information.phone = phone\n\nshipping_details = ShippingDetails()\nshipping_details.address = address\nshipping_details.phone = phone\n\nrecipient = PaymentRecipient()\nrecipient.account_number = '123456789'\nrecipient.country = Country.ES\nrecipient.dob = '1985-05-18'\nrecipient.first_name = 'First'\nrecipient.last_name = 'Last'\nrecipient.zip = '12345'\n\nproduct = Product()\nproduct.name = 'Name'\nproduct.quantity = 1\nproduct.price = 10\n\nthree_ds_request = ThreeDsRequest()\nthree_ds_request.enabled = True\nthree_ds_request.attempt_n3d = False\n\nprocessing_settings = ProcessingSettings()\nprocessing_settings.aft = True\n\nrisk_request = RiskRequest()\nrisk_request.enabled = True\n\nrequest = HostedPaymentsSessionRequest()\nrequest.amount = 10\nrequest.reference = 'reference'\nrequest.currency = Currency.GBP\nrequest.description = 'Payment for Gold Necklace'\nrequest.customer = customer_request\nrequest.shipping = shipping_details\nrequest.billing = billing_information\nrequest.recipient = recipient\nrequest.processing = processing_settings\nrequest.products = [product]\nrequest.risk = risk_request\nrequest.success_url = 'https://docs.checkout.com/payments/success'\nrequest.failure_url = 'https://docs.checkout.com/payments/failure'\nrequest.cancel_url = 'https://docs.checkout.com/payments/cancel'\nrequest.locale = 'en-GB'\nrequest.three_ds = three_ds_request\nrequest.capture = True\nrequest.allow_payment_methods = [PaymentSourceType.CARD, PaymentSourceType.KLARNA]\n\ntry:\n    response = api.hosted_payments.create_hosted_payments_page_session(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /hosted-payments/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Hosted Payments Page
      summary: Get Hosted Payments Page details
      operationId: getHostedPaymentsPageDetails
      description: |
        Retrieve details about a specific Hosted Payments Page using the ID returned when it was created. In the response, you will see the status of the Hosted Payments Page.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/hosted-payments-page">Hosted Payments Page documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/HostedPaymentId'
      responses:
        '200':
          description: Hosted Payments Page details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHostedPaymentsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Hosted Payments Page not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Hosted;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    HostedPaymentDetailsResponse response = await api.HostedPaymentsClient().GetHostedPaymentsPageDetails(\"hosted_payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.hosted.HostedPaymentDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    HostedPaymentDetailsResponse response = api.hostedPaymentsClient().getHostedPaymentsPageDetails(\"hosted_payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const hosted = await cko.hostedPayments.get('hpp_kQhs_fI9b8oQ');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getHostedPaymentsClient()->getHostedPaymentsPageDetails(\"hosted_payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.hosted_payments.get_hosted_payments_page_details('hosted_payment_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /instruments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Create an instrument
      operationId: createAnInstrument
      description: |
        Exchange a single use Checkout.com token for a payment instrument reference, that can be used at any time to request one or more payments.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Instruments.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCreateInstrumentRequest request = new CreateInstrumentRequest\n{\n    Token = \"tok_asoto22g2fsu7prwomy12sgfsa\",\n    AccountHolder = new InstrumentAccountHolder()\n    {\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Customer = new InstrumentCustomerRequest()\n    {\n        Email = \"email@docs.checkout.com\",\n        Name = \"FirstName LastName\",\n        Phone = new Phone()\n        {\n            CountryCode = \"1\",\n            Number = \"4155552671\"\n        },\n        Default = true\n    }\n};\n\ntry\n{\n    CreateInstrumentResponse response = await api.InstrumentsClient().Create(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.InstrumentType;\nimport com.checkout.common.Phone;\nimport com.checkout.instruments.previous.CreateInstrumentRequest;\nimport com.checkout.instruments.previous.CreateInstrumentResponse;\nimport com.checkout.instruments.previous.InstrumentAccountHolder;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCreateInstrumentRequest request = CreateInstrumentRequest.builder()\n    .type(InstrumentType.TOKEN)\n    .token(\"token\")\n    .accountHolder(InstrumentAccountHolder.builder()\n        .billingAddress(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .build();\n\ntry {\n    CreateInstrumentResponse response = api.instrumentsClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrument = await cko.instruments.create({\n		// infered type \"token\",\n		token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\InstrumentType;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Instruments\\Previous\\CreateInstrumentRequest;\nuse Checkout\\Instruments\\Previous\\InstrumentAccountHolder;\nuse Checkout\\Instruments\\Previous\\InstrumentCustomerRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$instrumentAccountHolder = new InstrumentAccountHolder();\n$instrumentAccountHolder->billing_address = $address;\n$instrumentAccountHolder->phone = $phone;\n\n$customer = new InstrumentCustomerRequest();\n$customer->email = \"email@docs.checkout.com\";\n$customer->name = \"Name\";\n$customer->phone = $phone;\n$customer->default = true;\n\n$request = new CreateInstrumentRequest();\n$request->type = InstrumentType::$token;\n$request->token = \"token\";\n$request->account_holder = $instrumentAccountHolder;\n$request->customer = $customer;\n\ntry {\n    $response = $api->getInstrumentsClient()->create($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.instruments.instruments_previous import InstrumentCustomerRequest, CreateInstrumentRequest\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\ncustomer = InstrumentCustomerRequest()\ncustomer.email = 'email@docs.checkout.com'\ncustomer.name = 'Name'\ncustomer.default = True\ncustomer.phone = phone\n\ncreate_instrument_request = CreateInstrumentRequest()\ncreate_instrument_request.token = 'token'\ncreate_instrument_request.customer = customer\n\ntry:\n    response = api.instruments.create(create_instrument_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /instruments/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Get instrument details
      operationId: getInstrumentDetails
      description: Returns details of an instrument
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
          required: true
          description: The instrument id
      responses:
        '200':
          description: Instrument retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Instruments.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    RetrieveInstrumentResponse response = await api.InstrumentsClient().Get(\"instrument_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.instruments.previous.InstrumentDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    InstrumentDetailsResponse response = api.instrumentsClient().get(\"instrument_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrument = await cko.instruments.get('src_udfsqsgpjykutgs26fiejgizau');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getInstrumentsClient()->get(\"instrument_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.instruments.get('instrument_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Update instrument details
      operationId: updateInstrumentDetails
      description: Update details of an instrument
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
            example: src_ubfj2q76miwundwlk72vxt2i7q
          required: true
          description: The instrument ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: Instrument updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Instruments.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nUpdateInstrumentRequest request = new UpdateInstrumentRequest\n{\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    AccountHolder = new InstrumentAccountHolder()\n    {\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        },\n    },\n    Customer = new UpdateInstrumentRequest.UpdateInstrumentCustomer()\n    {\n        Id = \"cus_gajmdgunwwlehbctuj6a3sifpm\",\n        Default = true\n    }\n};\n\ntry\n{\n    UpdateInstrumentResponse response = await api.InstrumentsClient().Update(\"instrument_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.instruments.previous.InstrumentAccountHolder;\nimport com.checkout.instruments.previous.UpdateInstrumentRequest;\nimport com.checkout.instruments.previous.UpdateInstrumentResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nUpdateInstrumentRequest updateRequest = UpdateInstrumentRequest.builder()\n    .name(\"New name\")\n    .expiryMonth(10)\n    .expiryYear(2025)\n    .accountHolder(InstrumentAccountHolder.builder()\n        .billingAddress(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .customer(UpdateInstrumentRequest.Customer.builder()\n        .id(\"customer_id\")\n        .isDefault(true)\n        .build())\n    .build();\n\ntry {\n    UpdateInstrumentResponse response = api.instrumentsClient().update(\"instrument_id\", updateRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrumentResponse = await cko.instruments.update('src_udfsqsgpjykutgs26fiejgizau', {\n		expiry_year: 2030,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Instruments\\Previous\\InstrumentAccountHolder;\nuse Checkout\\Instruments\\Previous\\UpdateInstrumentRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$instrumentAccountHolder = new InstrumentAccountHolder();\n$instrumentAccountHolder->billing_address = $address;\n$instrumentAccountHolder->phone = $phone;\n\n$request = new UpdateInstrumentRequest();\n$request->expiry_month = 10;\n$request->expiry_year = 2027;\n$request->name = \"FirstName LastName\";\n$request->account_holder = $instrumentAccountHolder;\n\ntry {\n    $response = $api->getInstrumentsClient()->update(\"instrument_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.instruments.instruments_previous import UpdateInstrumentCustomer, InstrumentAccountHolder, UpdateInstrumentRequest\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\nupdate_instrument_customer = UpdateInstrumentCustomer()\nupdate_instrument_customer.id = 'id'\nupdate_instrument_customer.default = True\n\naccount_holder = InstrumentAccountHolder()\naccount_holder.billing_address = address\naccount_holder.phone = phone\n\nupdate_instrument_request = UpdateInstrumentRequest()\nupdate_instrument_request.name = 'New Name'\nupdate_instrument_request.expiry_year = 2027\nupdate_instrument_request.expiry_month = 12\nupdate_instrument_request.customer = update_instrument_customer\nupdate_instrument_request.account_holder = account_holder\n\ntry:\n    response = api.instruments.update('instrument_id', update_instrument_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Delete an instrument
      operationId: removeInstrument
      description: Delete a payment instrument.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
            example: src_ubfj2q76miwundwlk72vxt2i7q
          required: true
          description: The payment instrument to be deleted
      responses:
        '204':
          description: Instrument deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.InstrumentsClient().Delete(\"instrument_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.instrumentsClient().delete(\"instrument_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const deleteOutcome = await cko.instruments.delete(instrument.id);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n\ntry {\n    $response = $api->getInstrumentsClient()->delete(\"instrument_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.instruments.delete('instrument_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payment-links:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payment Links
      summary: Create a Payment Link
      operationId: createAPaymentLinkSession
      description: |
        Create a Payment Link and pass through all the payment information, like the amount, currency, country and reference.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLinksRequest'
      responses:
        '201':
          description: Create Payment Link Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Links;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPaymentLinkRequest request = new PaymentLinkRequest\n{\n    Amount = 10,\n    Currency = Currency.GBP,\n    PaymentType = PaymentType.Regular,\n    PaymentIp = \"192.168.0.1\",\n    BillingDescriptor = new BillingDescriptor() {Name = \"string\", City = \"string\"},\n    Reference = \"reference\",\n    Description = \"Payment for Gold Necklace\",\n    ExpiresIn = 604800,\n    Customer = new CustomerRequest() {Email = \"email@docs.checkout.com\", Name = \"FirstName LastName\"},\n    Shipping =\n        new ShippingDetails()\n        {\n            Address = new Address()\n            {\n                AddressLine1 = \"Checkout.com\",\n                AddressLine2 = \"90 Tottenham Court Road\",\n                City = \"London\",\n                State = \"London\",\n                Zip = \"W1T 4TJ\",\n                Country = CountryCode.GB\n            },\n            Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n        },\n    Billing =\n        new BillingInformation()\n        {\n            Address = new Address()\n            {\n                AddressLine1 = \"Checkout.com\",\n                AddressLine2 = \"90 Tottenham Court Road\",\n                City = \"London\",\n                State = \"London\",\n                Zip = \"W1T 4TJ\",\n                Country = CountryCode.GB\n            },\n            Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n        },\n    Recipient =\n        new PaymentRecipient()\n        {\n            DateOfBirth = \"1985-05-15\",\n            AccountNumber = \"5555554444\",\n            Zip = \"WIT\",\n            LastName = \"LastName\",\n        },\n    Processing = new ProcessingSettings() {Aft = true},\n    Products = new List<Product>() {new Product() {Name = \"Gold Necklace\", Quantity = 1, Price = 1000}},\n    Metadata = new Dictionary<string, object>(),\n    ThreeDs = new ThreeDsRequest() {Enabled = false, AttemptN3D = false},\n    Risk = new RiskRequest() {Enabled = false},\n    ReturnUrl = \"https://example.com/payments/success\",\n    Locale = \"en-GB\",\n    Capture = true,\n    CaptureOn = new DateTime()\n};\n\ntry\n{\n    PaymentLinkResponse response = await api.PaymentLinksClient().Create(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.common.Phone;\nimport com.checkout.common.Product;\nimport com.checkout.payments.BillingDescriptor;\nimport com.checkout.payments.BillingInformation;\nimport com.checkout.payments.PaymentRecipient;\nimport com.checkout.payments.PaymentType;\nimport com.checkout.payments.ProcessingSettings;\nimport com.checkout.payments.RiskRequest;\nimport com.checkout.payments.ShippingDetails;\nimport com.checkout.payments.ThreeDSRequest;\nimport com.checkout.payments.links.PaymentLinkRequest;\nimport com.checkout.payments.links.PaymentLinkResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nPaymentLinkRequest paymentLinksRequest = PaymentLinkRequest.builder()\n    .amount(10L)\n    .currency(Currency.GBP)\n    .reference(\"reference\")\n    .description(\"description\")\n    .expiresIn(604800)\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\", null))\n    .shipping(ShippingDetails.builder()\n        .address(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .billing(BillingInformation.builder()\n        .address(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .build())\n    .recipient(PaymentRecipient.builder()\n        .accountNumber(\"999999999\")\n        .dateOfBirth(\"1985-05-15\")\n        .lastName(\"LastName\")\n        .zip(\"12345\")\n        .build())\n    .processing(ProcessingSettings.builder()\n        .aft(true)\n        .build())\n    .capture(true)\n    .captureOn(Instant.now().plus(30, ChronoUnit.DAYS))\n    .products(Collections.singletonList(Product.builder()\n        .name(\"name\")\n        .quantity(1L)\n        .price(200L)\n        .build()))\n    .threeDS(ThreeDSRequest.builder()\n        .enabled(Boolean.FALSE)\n        .attemptN3D(Boolean.FALSE)\n        .challengeIndicator(ChallengeIndicator.NO_CHALLENGE_REQUESTED)\n        .build())\n    .risk(new RiskRequest(Boolean.FALSE))\n    .returnUrl(\"https://docs.checkout.com/success\")\n    .locale(\"en-GB\")\n    .paymentType(PaymentType.REGULAR)\n    .billingDescriptor(BillingDescriptor.builder()\n        .city(\"London\")\n        .name(\"name\")\n        .build())\n    .build();\n\ntry {\n    PaymentLinkResponse response = api.paymentLinksClient().createPaymentLink(paymentLinksRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const linksResponse = await cko.paymentLinks.create({\n		amount: 10359,\n		currency: 'EUR',\n		billing: {\n			address: {\n				country: 'DE',\n			},\n		},\n		products: [\n			{\n				name: 'Moonlight blue lightsaber',\n				quantity: 2,\n				price: 3999,\n			},\n			{\n				name: 'Stainless steel watch strap',\n				quantity: 1,\n				price: 2361,\n			},\n		],\n		return_url: 'https://pay.sandbox.checkout.com/link/examples/docs',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\CustomerRequest;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Common\\Product;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\BillingInformation;\nuse Checkout\\Payments\\Links\\PaymentLinkRequest;\nuse Checkout\\Payments\\PaymentRecipient;\nuse Checkout\\Payments\\ProcessingSettings;\nuse Checkout\\Payments\\RiskRequest;\nuse Checkout\\Payments\\ShippingDetails;\nuse Checkout\\Payments\\ThreeDsRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"\";\n$customerRequest->name = \"Name\";\n\n$billingInformation = new BillingInformation();\n$billingInformation->address = $address;\n$billingInformation->phone = $phone;\n\n$shippingDetails = new ShippingDetails();\n$shippingDetails->address = $address;\n$shippingDetails->phone = $phone;\n\n$recipient = new PaymentRecipient();\n$recipient->account_number = \"1234567\";\n$recipient->dob = \"1985-05-15\";\n$recipient->last_name = \"Last\";\n$recipient->zip = \"12345\";\n\n$product = new Product();\n$product->name = \"Product\";\n$product->quantity = 1;\n$product->price = 10;\n\n$products = array($product);\n\n$theeDsRequest = new ThreeDsRequest();\n$theeDsRequest->enabled = false;\n$theeDsRequest->attempt_n3d = false;\n\n$processing = new ProcessingSettings();\n$processing->aft = true;\n\n$risk = new RiskRequest();\n$risk->enabled = false;\n\n$request = new PaymentLinkRequest();\n$request->amount = 1000;\n$request->reference = \"reference\";\n$request->currency = Currency::$GBP;\n$request->description = \"Description\";\n$request->customer = $customerRequest;\n$request->shipping = $shippingDetails;\n$request->billing = $billingInformation;\n$request->recipient = $recipient;\n$request->processing = $processing;\n$request->products = $products;\n$request->risk = $risk;\n$request->locale = \"en-GB\";\n$request->three_ds = $theeDsRequest;\n$request->capture = true;\n\ntry {\n    $response = $api->getPaymentLinksClient()->createPaymentLink($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest, Product\nfrom checkout_sdk.common.enums import Country, Currency, PaymentSourceType\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.payments.links.payments_links import PaymentLinkRequest\nfrom checkout_sdk.payments.payments import ThreeDsRequest, ProcessingSettings, RiskRequest, ShippingDetails, PaymentRecipient\nfrom checkout_sdk.payments.payments_previous import BillingInformation\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nbilling_information = BillingInformation()\nbilling_information.address = address\nbilling_information.phone = phone\n\nshipping_details = ShippingDetails()\nshipping_details.address = address\nshipping_details.phone = phone\n\nrecipient = PaymentRecipient()\nrecipient.account_number = '123456789'\nrecipient.country = Country.ES\nrecipient.dob = '1985-05-18'\nrecipient.first_name = 'First'\nrecipient.last_name = 'Last'\nrecipient.zip = '12345'\n\nproduct = Product()\nproduct.name = 'Product Name'\nproduct.quantity = 1\nproduct.price = 10\n\nthree_ds_request = ThreeDsRequest()\nthree_ds_request.enabled = True\nthree_ds_request.attempt_n3d = False\n\nprocessing_settings = ProcessingSettings()\nprocessing_settings.aft = True\n\nrisk_request = RiskRequest()\nrisk_request.enabled = True\n\nrequest = PaymentLinkRequest()\nrequest.amount = 10\nrequest.reference = 'reference'\nrequest.currency = Currency.GBP\nrequest.description = 'Payment for Gold Necklace'\nrequest.customer = customer_request\nrequest.shipping = shipping_details\nrequest.billing = billing_information\nrequest.recipient = recipient\nrequest.processing = processing_settings\nrequest.products = [product]\nrequest.risk = risk_request\nrequest.return_url = 'https://docs.checkout.com/payments/return'\nrequest.locale = 'en-GB'\nrequest.three_ds = three_ds_request\nrequest.expires_in = 6400\nrequest.capture = True\nrequest.allow_payment_methods = [PaymentSourceType.CARD, PaymentSourceType.IDEAL]\n\ntry:\n    response = api.payments_links.create_payment_link(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payment-links/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Payment Links
      summary: Get Payment Link details
      operationId: getPaymentLinkDetails
      description: |
        Retrieve details about a specific Payment Link using its ID returned when the link was created. In the response, you will see the status of the Payment Link.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/payment-links">Payment Links documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/PaymentLinkId'
      responses:
        '200':
          description: Payment Link details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentLinkResponse'
        '401':
          description: Unauthorized
        '404':
          description: Payment Link session not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Links;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    PaymentLinkDetailsResponse response = await api.PaymentLinksClient().Get(\"payment_link_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.links.PaymentLinkDetailsResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    PaymentLinkDetailsResponse response = api.paymentLinksClient().getPaymentLink(\"payment_link_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.paymentLinks.get('pl_XXXX');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getPaymentLinksClient()->getPaymentLink(\"payment_link_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.payments_links.get_payment_link('payment_link_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments:
    post:
      security:
        - ApiSecretKey: []
      tags:
        - Payments
      summary: Request a payment or payout
      operationId: requestAPaymentOrPayout
      description: |
        To accept payments from <a href="https://www.checkout.com/docs/previous/payments/payment-methods/cards" target="blank">cards</a>, <a href="https://www.checkout.com/docs/previous/payments/payment-methods/wallets" target="blank">digital wallets</a> and many <a href="https://www.checkout.com/docs/previous/payments/payment-methods" target="blank">alternative payment methods</a>, specify the `source.type` field, along with the source-specific data.
    
        To <a href="https://docs.checkout.com/payment-actions/card-payouts" target="blank">pay out to a card</a>, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.
    
        To verify the success of the payment, check the `approved` field in the response.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PaymentRequest'
                - $ref: '#/components/schemas/Payout'
            example:
              source:
                type: token
                token: tok_4gzeau5o2uqubbk6fufs3m7p54
              amount: 6540
              currency: USD
              payment_type: Recurring
              reference: 'ORD-5023-4E89'
              description: 'Set of 3 masks'
              capture: true
              capture_on: '2019-09-10T10:11:12Z'
              customer:
                id: 'cus_udst2tfldj6upmye2reztkmm4i'
                email: 'brucewayne@gmail.com'
                name: 'Bruce Wayne'
              billing_descriptor:
                name: SUPERHEROES.COM
                city: GOTHAM
              shipping:
                address:
                  address_line1: Checkout.com
                  address_line2: 90 Tottenham Court Road
                  city: London
                  state: London
                  zip: W1T 4TJ
                  country: GB
                phone:
                  country_code: '+1'
                  number: 415 555 2671
              3ds:
                enabled: true
                attempt_n3d: true
                eci: '05'
                cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                version: '2.0.1'
              previous_payment_id: 'pay_fun26akvvjjerahhctaq2uzhu4'
              risk:
                enabled: false
              success_url: 'http://example.com/payments/success'
              failure_url: 'http://example.com/payments/fail'
              payment_ip: '90.197.169.245'
              recipient:
                dob: '1985-05-15'
                account_number: '5555554444'
                zip: W1T
                last_name: Jones
              metadata:
                udf1: 'value1'
                new_customer: false
                registration_date: '2019-09-10T10:11:12Z'
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: 'pay_mbabizu24mvu3mela5njyhpit4'
                action_id: 'act_mbabizu24mvu3mela5njyhpit4'
                amount: 6540
                currency: 'USD'
                approved: true
                status: 'Authorized'
                auth_code: '770687'
                response_code: '10000'
                response_summary: 'Approved'
                3ds:
                  downgraded: true
                  enrolled: 'N'
                risk:
                  flagged: true
                source:
                  type: 'card'
                  id: 'src_nwd3m4in3hkuddfpjsaevunhdy'
                  billing_address:
                    address_line1: 'Checkout.com'
                    address_line2: '90 Tottenham Court Road'
                    city: 'London'
                    state: 'London'
                    zip: 'W1T 4TJ'
                    country: 'GB'
                  phone:
                    country_code: '+1'
                    number: '415 555 2671'
                  last4: '4242'
                  fingerprint: 'F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832'
                  bin: '424242'
                customer:
                  id: 'cus_udst2tfldj6upmye2reztkmm4i'
                  email: 'brucewayne@gmail.com'
                  name: 'Bruce Wayne'
                processed_on: '2019-09-10T10:11:12Z'
                reference: 'ORD-5023-4E89'
                processing:
                  retrieval_reference_number: '909913440644'
                  acquirer_transaction_id: '440644309099499894406'
                  recommendation_code: '02'
                eci: '06'
                scheme_id: '489341065491658'
                _links:
                  self:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4'
                  action:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions'
                  void:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids'
                  capture:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Previous.Request;\nusing Checkout.Payments.Previous.Request.Source;\nusing Checkout.Payments.Previous.Response;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n\nPaymentRequest request = new PaymentRequest\n{\n    Source = new RequestTokenSource() {Token = \"tok_4gzeau5o2uqubbk6fufs3m7p54\"},\n    Amount = 10,\n    Currency = Currency.USD,\n    PaymentType = PaymentType.Recurring,\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Capture = true,\n    CaptureOn = new DateTime(),\n    Customer =\n        new CustomerRequest()\n        {\n            Id = \"cus_udst2tfldj6upmye2reztkmm4i\",\n            Email = \"email@docs.checkout.com\",\n            Name = \"FirstName LastName\"\n        },\n    BillingDescriptor = new BillingDescriptor() {Name = \"SUPERHEROES.COM\", City = \"GOTHAM\"},\n    Shipping =\n        new ShippingDetails()\n        {\n            Address = new Address()\n            {\n                AddressLine1 = \"Checkout.com\",\n                AddressLine2 = \"90 Tottenham Court Road\",\n                City = \"London\",\n                State = \"London\",\n                Zip = \"W1T 4TJ\",\n                Country = CountryCode.GB\n            },\n            Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n        },\n    ThreeDs =\n        new ThreeDsRequest()\n        {\n            Enabled = true,\n            AttemptN3D = true,\n            Eci = \"05\",\n            Cryptogram = \"AgAAAAAAAIR8CQrXcIhbQAAAAAA=\",\n            Xid = \"MDAwMDAwMDAwMDAwMDAwMzIyNzY=\",\n            Version = \"2.0.1\"\n        },\n    PreviousPaymentId = \"pay_fun26akvvjjerahhctaq2uzhu4\",\n    Risk = new RiskRequest() {Enabled = false},\n    SuccessUrl = \"https://example.com/payments/success\",\n    FailureUrl = \"https://example.com/payments/failure\",\n    PaymentIp = \"192.168.0.1\",\n    Recipient = new PaymentRecipient()\n    {\n        DateOfBirth = \"1985-05-15\",\n        AccountNumber = \"5555554444\",\n        Zip = \"WIT\",\n        LastName = \"LastName\",\n    },\n    Metadata = new Dictionary<string, object>() {{\"coupon_code\", \"NY2018\"}, {\"partner_id\", 123989}}\n};\n\ntry\n{\n    PaymentResponse response = await api.PaymentsClient().RequestPayment(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.Phone;\nimport com.checkout.payments.previous.request.PaymentRequest;\nimport com.checkout.payments.previous.request.source.RequestCardSource;\nimport com.checkout.payments.previous.response.PaymentResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nRequestCardSource source = RequestCardSource.builder()\n    .name(\"name\")\n    .number(\"number\")\n    .expiryMonth(12)\n    .expiryYear(2025)\n    .cvv(\"123\")\n    .stored(false)\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\nPaymentRequest paymentRequest = PaymentRequest.builder()\n    .source(source)\n    .capture(true)\n    .reference(\"reference\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .build();\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestPayment(paymentRequest).get(); // or \"requestPayout\"\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const payment = await cko.payments.request({\n		source: {\n			// infered type: \"token\"\n			token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n			billing_address: {\n				address_line1: 'Wall Street',\n				address_line2: 'Dollar Avenue',\n				city: 'London',\n				state: 'London',\n				zip: 'W1W W1W',\n				country: 'GB',\n			},\n			phone: {\n				country_code: '44',\n				number: '7123456789',\n			},\n		},\n		currency: 'USD',\n		amount: 1000,\n		payment_type: 'Regular',\n		reference: 'ORDER 1234',\n		description: 'Mint Tea',\n		customer: {\n			email: 'new_user@email.com',\n			name: 'John Smith',\n		},\n		metadata: {\n			myCustomProp: {\n				value: 1,\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\Previous\\PaymentRequest;\nuse Checkout\\Payments\\Previous\\Source\\RequestCardSource;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$billingAddress = new Address();\n$billingAddress->address_line1 = \"CheckoutSdk.com\";\n$billingAddress->address_line2 = \"90 Tottenham Court Road\";\n$billingAddress->city = \"London\";\n$billingAddress->state = \"London\";\n$billingAddress->zip = \"W1T 4TJ\";\n$billingAddress->country = Country::$GB;\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$requestCardSource = new RequestCardSource();\n$requestCardSource->name = \"Name\";\n$requestCardSource->number = \"Number\";\n$requestCardSource->expiry_year = 2026;\n$requestCardSource->expiry_month = 10;\n$requestCardSource->cvv = \"123\";\n$requestCardSource->billing_address = $billingAddress;\n$requestCardSource->phone = $phone;\n\n$request = new PaymentRequest();\n$request->source = $requestCardSource;\n$request->capture = true;\n$request->reference = \"reference\";\n$request->amount = 10;\n$request->currency = Currency::$GBP;\n\ntry {\n    $response = $api->getPaymentsClient()->requestPayment($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Address, Phone\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.payments.payments_previous import RequestCardSource, PaymentRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\nrequest_card_source = RequestCardSource()\nrequest_card_source.number = 'number'\nrequest_card_source.expiry_month = 10\nrequest_card_source.expiry_year = 2027\nrequest_card_source.cvv = 123\nrequest_card_source.name = 'Name'\nrequest_card_source.billing_address = address\nrequest_card_source.phone = phone\n\npayment_request = PaymentRequest()\npayment_request.source = request_card_source\n\npayment_request.reference = 'reference'\npayment_request.amount = 10\npayment_request.currency = Currency.GBP\npayment_request.capture = False\n\ntry:\n    response = api.payments.request_payment(payment_request) # or 'request_payout'\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Get payment details
      operationId: getPaymentDetails
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Previous.Response;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    GetPaymentResponse response = await api.PaymentsClient().GetPaymentDetails(\"payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.previous.response.GetPaymentResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    GetPaymentResponse response = api.paymentsClient().getPayment(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.get('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getPaymentsClient()->getPaymentDetails(\"payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.payments.get_payment_details('payment_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/actions:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Get payment actions
      operationId: getPaymentActions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    ItemsResponse<PaymentAction> response = await api.PaymentsClient().GetPaymentActions(\"payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.ItemsResponse;\nimport com.checkout.payments.previous.PaymentAction;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    ItemsResponse<PaymentAction> response = api.paymentsClient().getPaymentActions(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.getActions('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getPaymentsClient()->getPaymentActions(\"payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.payments.get_payment_actions('payment_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/captures:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Capture a payment
      operationId: captureAPayment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCaptureRequest request = new CaptureRequest\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>() {{\"coupon_code\", \"NY2018\"}, {\"partner_id\", \"123989\"}}\n};\n\ntry\n{\n    CaptureResponse response = await api.PaymentsClient().CapturePayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.CaptureRequest;\nimport com.checkout.payments.CaptureResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"partial capture\")\n    .amount(10L)\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, capturePayment(\"payment_id\") for a full capture\n    CaptureResponse response = api.paymentsClient().capturePayment(\"payment_id\", captureRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'CAPTURE ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\Previous\\CaptureRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new CaptureRequest();\n$request->reference = \"reference\";\n$request->amount = 5;\n\ntry {\n    // or, capturePayment(\"payment_id\") for a full capture\n    $response = $api->getPaymentsClient()->capturePayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.payments.payments_previous import CaptureRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ncapture_request = CaptureRequest()\ncapture_request.reference = 'reference'\ncapture_request.amount = 10\n\ntry:\n    # or, capture_payment('payment_id') for a full capture\n    response = api.payments.capture_payment('payment_id', capture_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/refunds:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Refund a payment
      operationId: refundAPayment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nRefundRequest request = new RefundRequest()\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>() {{\"coupon_code\", \"NY2018\"}, {\"partner_id\", \"123989\"}}\n};\n\ntry\n{\n    RefundResponse response = await api.PaymentsClient().RefundPayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.RefundRequest;\nimport com.checkout.payments.RefundResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"partial refund\")\n    .amount(10L)\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, refundPayment(\"payment_id\") for a full refund\n    RefundResponse response = api.paymentsClient().refundPayment(\"payment_id\", refundRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.refund('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'REFUND ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\RefundRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new RefundRequest();\n$request->reference = \"reference\";\n$request->amount = 10;\n\ntry {\n    // or, refundPayment(\"payment_id\") for a full refund\n    $response = $api->getPaymentsClient()->refundPayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.payments.payments import RefundRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nrefund_request = RefundRequest()\nrefund_request.reference = 'reference'\nrefund_request.amount = 2\n\ntry:\n    # or, refund_payment('payment_id') for a full refund\n    response = api.payments.refund_payment('payment_id', refund_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/voids:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Void a payment
      operationId: voidAPayment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nVoidRequest request = new VoidRequest()\n{\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>() {{\"coupon_code\", \"NY2018\"}, {\"partner_id\", \"123989\"}}\n};\n\ntry\n{\n    VoidResponse response = await api.PaymentsClient().VoidPayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.payments.VoidRequest;\nimport com.checkout.payments.VoidResponse;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nVoidRequest voidRequest = VoidRequest.builder()\n    .reference(\"reference\")\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, voidPayment(\"payment_id\")\n    VoidResponse response = api.paymentsClient().voidPayment(\"payment_id\", voidRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.void('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'VOID ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Payments\\VoidRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new VoidRequest();\n$request->reference = \"reference\";\n\ntry {\n    // or, voidPayment(\"payment_id\")\n    $response = $api->getPaymentsClient()->voidPayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.payments.payments import VoidRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nvoid_request = VoidRequest()\nvoid_request.reference = 'reference'\n\ntry:\n    # or, void_payment('payment_id')\n    response = api.payments.void_payment('payment_id', void_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /reporting/payments:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON payments report
      operationId: getJsonPaymentsReport
      description: Returns a JSON report containing all payments within your specified parameters.
        You can reconcile the data from this report against your statements (which can be found in the <a href="https://hub.checkout.com/login" target="_blank">Hub</a>), the list of payments in the Hub (using the `Reference` field) or your own systems.
        *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.
    
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for payments
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for payments
        - in: query
          name: reference
          schema:
            type: string
          required: false
          description: Reference of a specific payment to search for
        - in: query
          name: limit
          schema:
            type: integer
            maximum: 500
            default: 200
          required: false
          description: Sets a limit on the number of results
    
      responses:
        '200':
          description: Payments report retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Reconciliation.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nReconciliationQueryPaymentsFilter request = new ReconciliationQueryPaymentsFilter() {Limit = 50};\n\ntry\n{\n    ReconciliationPaymentReportResponse response = await api.ReconciliationClient().QueryPaymentsReport(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.reconciliation.previous.ReconciliationPaymentReportResponse;\nimport com.checkout.reconciliation.previous.ReconciliationQueryPaymentsFilter;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nReconciliationQueryPaymentsFilter filter = ReconciliationQueryPaymentsFilter\n    .builder()\n    .from(Instant.parse(LocalDateTime.now().minusMonths(2).toInstant(ZoneOffset.UTC).toString()))\n    .to(Instant.parse(LocalDateTime.now().toInstant(ZoneOffset.UTC).toString()))\n    .reference(\"reference\")\n    .limit(1)\n    .build();\n\ntry {\n    ReconciliationPaymentReportResponse response = api.reconciliationClient().queryPaymentsReport(filter).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPayments({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Reconciliation\\Previous\\ReconciliationQueryPaymentsFilter;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"America/Mexico_City\"));\n$from->sub(new DateInterval(\"P1M\"));\n\n$filter = new ReconciliationQueryPaymentsFilter();\n$filter->from = $from;\n$filter->to = new DateTime();\n\ntry {\n    $response = $api->getReconciliationClient()->queryPaymentsReport($filter);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /reporting/payments/{paymentId}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON single payment report
      operationId: getJsonSinglePaymentReport
      description:
        Returns a JSON payment report containing all of the data related to a specific payment, based on the payment's identifier.
        *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.
    
      parameters:
        - in: path
          name: paymentId
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The unique payment identifier
    
      responses:
        '200':
          description: Payment report returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Reconciliation.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    ReconciliationPaymentReportResponse response = await api.ReconciliationClient().SinglePaymentReport(\"payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.reconciliation.previous.ReconciliationPaymentReportResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    ReconciliationPaymentReportResponse response = api.reconciliationClient().singlePaymentReportAsync(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPayment('pay_nezg6bx2k22utmk4xm5s2ughxi');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getReconciliationClient()->singlePaymentReport(\"payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /reporting/payments/download:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get CSV payments report
      responses:
        '200':
          description: CSV downloaded successfully
      operationId: getCsvPaymentsReport
      description:
        In addition to the JSON format returned by the `reporting/payments` endpoint, you can also download a CSV report containing the same data.
        Learn more about <a href="https://docs.checkout.com/reporting-and-insights/reconciliation-api/payments-endpoint#Paymentsendpoint-HowtoreadtheCSVfile" target="_blank">how to read your CSV report</a>.
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for payments
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for payments
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Reconciliation;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nQueryFilterDateRange queryFilterDateRange = new QueryFilterDateRange\n{\n    From = DateTime.Now.Subtract(TimeSpan.FromDays(30)), To = DateTime.Now\n};\n\ntry\n{\n    ContentsResponse retrieveCsvPaymentReport = await api.ReconciliationClient().RetrieveCsvPaymentReport(queryFilterDateRange);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.ContentResponse;\nimport com.checkout.Environment;\nimport com.checkout.common.QueryFilterDateRange;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nQueryFilterDateRange queryFilterDateRange = QueryFilterDateRange.builder()\n    .from(LocalDateTime.now().minus(1, ChronoUnit.MONTHS).toInstant(ZoneOffset.UTC))\n    .to(Instant.now())\n    .build();\n\ntry {\n    // The second parameter is optional. Specifies the path where a file with the content returned is saved. If the file\n    // does not exist, the client will attempt to create a new one, otherwise the existing file will be rewritten.\n    ContentResponse response = api.reconciliationClient().retrieveCSVPaymentReport(queryFilterDateRange, \"/path/to/file.csv\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPaymentsCsv({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Reconciliation\\Previous\\ReconciliationQueryPaymentsFilter;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"America/Mexico_City\"));\n$from->sub(new DateInterval(\"P1M\"));\n\n$filter = new ReconciliationQueryPaymentsFilter();\n$filter->from = $from;\n$filter->to = new DateTime();\n\ntry {\n    $response = $api->getReconciliationClient()->retrieveCsvPaymentReport($filter);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /reporting/statements:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON statements report
      operationId: getJsonStatementsReport
      description: Returns a JSON report containing all statements within your specified parameters. Please note that the timezone for the request will be UTC.
    
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for statements
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for statements
    
      responses:
        '200':
          description: Statements report successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Reconciliation.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nQueryFilterDateRange request = new QueryFilterDateRange() {To = DateTime.Now};\n\ntry\n{\n    StatementReportResponse response = await api.ReconciliationClient().QueryStatementsReport(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.QueryFilterDateRange;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.reconciliation.previous.StatementReportResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nQueryFilterDateRange filter = QueryFilterDateRange\n    .builder()\n    .from(Instant.parse(LocalDateTime.now().minusMonths(2).toInstant(ZoneOffset.UTC).toString()))\n    .to(Instant.parse(LocalDateTime.now().toInstant(ZoneOffset.UTC).toString()))\n    .build();\n\ntry {\n    StatementReportResponse response = api.reconciliationClient().queryStatementsReport(filter).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const statements = await cko.reconciliation.getStatements({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\QueryFilterDateRange;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"America/Mexico_City\"));\n$from->sub(new DateInterval(\"P1M\"));\n\n$filter = new QueryFilterDateRange();\n$filter->from = $from;\n$filter->to = new DateTime();\n\n\ntry {\n    $response = $api->getReconciliationClient()->queryStatementsReport($filter);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /reporting/statements/{StatementId}/payments/download:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get CSV single statement report
      operationId: GetCsvSingleStatementReport
      description: Downloads a CSV statement report containing all of the data related to a specific statement, based on the statement's identifier.
      responses:
        '200':
          description: CSV downloaded successfully
      parameters:
        - in: path
          name: StatementId
          example: '190110B107654'
          schema:
            type: string
          required: true
          description: The unique statement identifier
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    ContentsResponse response = await api.ReconciliationClient().RetrieveCsvSingleStatementReport(\"id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.ContentResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    // The second parameter is optional. Specifies the path where a file with the content returned is saved. If the file\n    // does not exist, the client will attempt to create a new one, otherwise the existing file will be rewritten.\n    ContentResponse response = api.reconciliationClient().retrieveCSVSingleStatementReport(\"id\", \"/path/to/file.csv\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getReconciliationClient()->retrieveCsvSingleStatementReport(\"statement_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /reporting/statements/download:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      responses:
        '200':
          description: CSV downloaded successfully
      summary: Get CSV statements report
      operationId: getCsvStatementsReport
      description: In addition to the JSON format returned by the `reporting/statements` endpoint, you can also download a CSV report containing the same data.
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nQueryFilterDateRange queryFilterDateRange = new QueryFilterDateRange\n{\n    From = DateTime.Now.Subtract(TimeSpan.FromDays(30)), To = DateTime.Now\n};\n\ntry\n{\n    ContentsResponse response = await api.ReconciliationClient().RetrieveCsvStatementsReport(queryFilterDateRange);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.ContentResponse;\nimport com.checkout.Environment;\nimport com.checkout.common.QueryFilterDateRange;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nQueryFilterDateRange filter = QueryFilterDateRange\n    .builder()\n    .from(Instant.parse(LocalDateTime.now().minusMonths(2).toInstant(ZoneOffset.UTC).toString()))\n    .to(Instant.parse(LocalDateTime.now().toInstant(ZoneOffset.UTC).toString()))\n    .build();\n\ntry {\n    // The second parameter is optional. Specifies the path where a file with the content returned is saved. If the file\n    // does not exist, the client will attempt to create a new one, otherwise the existing file will be rewritten.\n    ContentResponse response = api.reconciliationClient().retrieveCSVStatementsReport(filter, \"path/to/download\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const statement = await cko.reconciliation.getStatementCsv('155613B100981');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\QueryFilterDateRange;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"America/Mexico_City\"));\n$from->sub(new DateInterval(\"P1M\"));\n\n$filter = new QueryFilterDateRange();\n$filter->from = $from;\n$filter->to = new DateTime();\n\n\ntry {\n    $response = $api->getReconciliationClient()->retrieveCsvStatementsReport($filter);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
  /risk/assessments/pre-authentication:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-authentication risk scan
      operationId: preAuthenticationRiskAssessment
      description: |
        Perform a pre-authentication fraud assessment using your defined risk settings.
        #parameters:
      # - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreAuthenticationAssessmentRequest'
      responses:
        #   '200':
        #     description: Transaction already assessed
        #     content:
        #       application/json:
        #         schema:
        #           $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
        #       Cko-Request-Id:
        #         $ref: "#/components/headers/Cko-Request-Id"
        #       Cko-Version:
        #         $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreAuthentication;\nusing Checkout.Risk.source;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreAuthenticationAssessmentRequest request = new PreAuthenticationAssessmentRequest()\n{\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest() {Name = \"FirstName LastName\", Email = \"email@docs.checkout.com\",},\n    Payment = new RiskPayment() {Psp = \"Checkout.com\", Id = \"78453878\"},\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Amount = 10,\n    Currency = Currency.GBP,\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location() {Latitude = \"51.5107\", Longitude = \"0.01313\"},\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"}, {\"discountApplied\", \"10\"}, {\"customer_id\", \"2190EF321\"}\n    }\n};\n\ntry\n{\n    PreAuthenticationAssessmentResponse response =\n        await api.RiskClient().RequestPreAuthenticationRiskScan(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.common.Phone;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.Location;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentRequest;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentResponse;\nimport com.checkout.risk.source.CardSourcePrism;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardSourcePrism cardSourcePrism = CardSourcePrism.builder()\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .expiryMonth(10)\n    .expiryYear(2025)\n    .number(\"123456789\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\nPreAuthenticationAssessmentRequest request = PreAuthenticationAssessmentRequest.builder()\n    .date(Instant.now())\n    .source(cardSourcePrism)\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\", null))\n    .payment(RiskPayment.builder().psp(\"checkout\").id(\"123456789\").build())\n    .shipping(RiskShippingDetails.builder()\n        .address(Address.builder()\n            .addressLine1(\"Checkout\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .build())\n    .reference(\"reference\")\n    .description(\"description\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder()\n        .ip(\"90.197.169.245\")\n        .location(Location.builder().longitude(\"0.1313\").latitude(\"51.5107\").build())\n        .type(\"Phone\")\n        .os(\"iOS\")\n        .model(\"iPhone X\")\n        .date(Instant.now())\n        .userAgent(\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\")\n        .fingerprint(\"34304a9e3fg09302\")\n        .build())\n    .metadata(Stream.of(\n            new AbstractMap.SimpleImmutableEntry<>(\"VoucherCode\", \"loyalty_10\"),\n            new AbstractMap.SimpleImmutableEntry<>(\"discountApplied\", \"10\"),\n            new AbstractMap.SimpleImmutableEntry<>(\"customer_id\", \"2190EF321\"))\n        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)))\n    .build();\n\ntry {\n    PreAuthenticationAssessmentResponse response = api.riskClient().requestPreAuthenticationRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const risk = await cko.risk.requestPreAuthentication({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\CustomerRequest;\nuse Checkout\\Environment;\nuse Checkout\\Risk\\Device;\nuse Checkout\\Risk\\Location;\nuse Checkout\\Risk\\PreAuthentication\\PreAuthenticationAssessmentRequest;\nuse Checkout\\Risk\\RiskPayment;\nuse Checkout\\Risk\\RiskShippingDetails;\nuse Checkout\\Risk\\Source\\CardSourcePrism;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$cardSourcePrism = new CardSourcePrism();\n$cardSourcePrism->billing_address = $address;\n$cardSourcePrism->expiry_month = 10;\n$cardSourcePrism->expiry_year = 2027;\n$cardSourcePrism->number = \"number\";\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"Name\";\n\n$riskPayment = new RiskPayment();\n$riskPayment->psp = \"psp\";\n$riskPayment->id = \"78453878\";\n\n$riskShippingDetails = new RiskShippingDetails();\n$riskShippingDetails->address = $address;\n\n$location = new Location();\n$location->latitude = \"51.5107\";\n$location->longitude = \"0.1313\";\n\n$device = new Device();\n$device->location = $location;\n$device->type = \"Phone\";\n$device->os = \"ISO\";\n$device->model = \"iPhone X\";\n$device->date = new DateTime();\n$device->user_agent = \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\";\n$device->fingerprint = \"34304a9e3fg09302\";\n\n$request = new PreAuthenticationAssessmentRequest();\n$request->date = new DateTime();\n$request->source = $cardSourcePrism;\n$request->customer = $customerRequest;\n$request->payment = $riskPayment;\n$request->shipping = $riskShippingDetails;\n$request->reference = \"ORD-1011-87AH\";\n$request->description = \"Set of 3 masks\";\n$request->amount = 10;\n$request->currency = Currency::$GBP;\n$request->device = $device;\n$request->metadata = array(\"VoucherCode\" => \"loyalty_10\", \"discountApplied\" => \"10\", \"customer_id\" => \"2190EF321\");\n\ntry {\n    $response = $api->getRiskClient()->requestPreAuthenticationRiskScan($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.risk.risk import RiskRequestTokenSource, RiskPayment, RiskShippingDetails, Location, Device, \\\n                                    PreAuthenticationAssessmentRequest\nfrom datetime import datetime, timezone\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ntoken_source = RiskRequestTokenSource()\ntoken_source.token = 'token'\ntoken_source.phone = phone\ntoken_source.billing_address = address\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nrisk_payment = RiskPayment()\nrisk_payment.psp = 'CheckoutSdk.com'\nrisk_payment.id = '78453878'\n\nshipping_details = RiskShippingDetails()\nshipping_details.address = address\n\nlocation = Location()\nlocation.longitude = '0.1313'\nlocation.latitude = '51.5107'\n\ndevice = Device()\ndevice.location = location\ndevice.type = 'Phone'\ndevice.os = 'ISO'\ndevice.model = 'iPhone X'\ndevice.date = datetime.now(timezone.utc)\ndevice.user_agent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, ' \\\\\n                    'like Gecko) Version/11.0 Mobile/15A372 Safari/604.1 '\ndevice.fingerprint = '34304a9e3fg09302'\n\nrequest = PreAuthenticationAssessmentRequest()\nrequest.date = datetime.now(timezone.utc)\nrequest.source = token_source\nrequest.customer = customer_request\nrequest.payment = risk_payment\nrequest.shipping = shipping_details\nrequest.reference = 'reference'\nrequest.description = 'description'\nrequest.amount = 10\nrequest.currency = Currency.GBP\nrequest.device = device\nrequest.metadata = {\n    'VoucherCode': 'loyalty_10',\n    'discountApplied': '10',\n    'customer_id': '2190EF321'}\n\ntry:\n    response = api.risk.request_pre_authentication_risk_scan(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /risk/assessments/pre-capture:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-capture risk scan
      operationId: preCaptureRiskAssessment
      description: |
        Perform a pre-capture fraud assessment using your defined risk settings.<br><br> **Note**: If youâve already requested a pre-authentication fraud assessment for the transaction, provide the `assessment_id` returned in that response in your request to carry over the data. If you do include the `assessment_id`, the other fields you provide in this request will only fill in any gaps in the data; they will not overwrite any data.
      # parameters:
      #   - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreCaptureAssessmentRequest'
      responses:
        '200':
          description: Transaction already assessed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreCapture;\nusing Checkout.Risk.source;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreCaptureAssessmentRequest request = new PreCaptureAssessmentRequest()\n{\n    AssessmentId = \"string\",\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest()\n    {\n        Name = \"FirstName LastName\",\n        Email = \"email@docs.checkout.com\",\n    },\n    Amount = 10,\n    Currency = Currency.GBP,\n    Payment = new RiskPayment()\n    {\n        Psp = \"Checkout.com\",\n        Id = \"78453878\"\n    },\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location()\n        {\n            Latitude = \"51.5107\",\n            Longitude = \"0.01313\"\n        },\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"},\n        {\"discountApplied\", \"10\"},\n        {\"customer_id\", \"2190EF321\"}\n    },\n    AuthenticationResult = new AuthenticationResult()\n    {\n        Attempted = true,\n        Challenged = true,\n        Succeeded = true,\n        LiabilityShifted = true,\n        Method = \"3ds\",\n        Version = \"2.0\"\n    },\n    AuthorizationResult = new AuthorizationResult()\n    {\n        AvsCode = \"V\",\n        CvvResult = \"N\"\n    }\n};\n\ntry\n{\n    PreCaptureAssessmentResponse response = await api.RiskClient().RequestPreCaptureRiskScan(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.precapture.AuthenticationResult;\nimport com.checkout.risk.precapture.AuthorizationResult;\nimport com.checkout.risk.precapture.PreCaptureAssessmentRequest;\nimport com.checkout.risk.precapture.PreCaptureAssessmentResponse;\nimport com.checkout.risk.source.CustomerSourcePrism;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nPreCaptureAssessmentRequest request = PreCaptureAssessmentRequest.builder()\n    .date(Instant.MAX)\n    .source(CustomerSourcePrism.builder().build())\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\", null))\n    .payment(RiskPayment.builder().build())\n    .shipping(RiskShippingDetails.builder().build())\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder().build())\n    .metadata(new HashMap<>())\n    .authenticationResult(AuthenticationResult.builder()\n        .attempted(true)\n        .challenged(true)\n        .liabilityShifted(true)\n        .method(\"3ds\")\n        .succeeded(true)\n        .version(\"2.0\")\n        .build())\n    .authorizationResult(AuthorizationResult.builder()\n        .avsCode(\"V\")\n        .cvvResult(\"N\")\n        .build())\n    .build();\n\ntry {\n    PreCaptureAssessmentResponse response = api.riskClient().requestPreCaptureRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const risk = await cko.risk.requestPreCapture({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\CustomerRequest;\nuse Checkout\\Environment;\nuse Checkout\\Risk\\Device;\nuse Checkout\\Risk\\Location;\nuse Checkout\\Risk\\PreCapture\\AuthenticationResult;\nuse Checkout\\Risk\\PreCapture\\AuthorizationResult;\nuse Checkout\\Risk\\PreCapture\\PreCaptureAssessmentRequest;\nuse Checkout\\Risk\\RiskPayment;\nuse Checkout\\Risk\\RiskShippingDetails;\nuse Checkout\\Risk\\Source\\CardSourcePrism;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"name\";\n\n$riskPayment = new RiskPayment();\n$riskPayment->psp = \"psp\";\n$riskPayment->id = \"78453878\";\n\n$riskShippingDetails = new RiskShippingDetails();\n$riskShippingDetails->address = $address;\n\n$authenticationResult = new AuthenticationResult();\n$authenticationResult->attempted = true;\n$authenticationResult->challenged = true;\n$authenticationResult->liability_shifted = true;\n$authenticationResult->method = \"3ds\";\n$authenticationResult->succeeded = true;\n$authenticationResult->version = \"2.0\";\n\n$authorizationResult = new AuthorizationResult();\n$authorizationResult->avs_code = \"V\";\n$authorizationResult->cvv_result = \"N\";\n\n$location = new Location();\n$location->latitude = \"51.5107\";\n$location->longitude = \"0.1313\";\n\n$device = new Device();\n$device->location = $location;\n$device->type = \"Phone\";\n$device->os = \"ISO\";\n$device->model = \"iPhone X\";\n$device->date = new DateTime();\n$device->user_agent = \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\";\n$device->fingerprint = \"34304a9e3fg09302\";\n\n$request = new PreCaptureAssessmentRequest();\n$request->date = new DateTime();\n$request->source = new CardSourcePrism();\n$request->customer = $customerRequest;\n$request->payment = $riskPayment;\n$request->shipping = $riskShippingDetails;\n$request->amount = 6540;\n$request->currency = Currency::$GBP;\n$request->device = $device;\n$request->metadata = array(\"VoucherCode\" => \"loyalty_10\", \"discountApplied\" => \"10\", \"customer_id\" => \"2190EF321\");\n$request->authentication_result = $authenticationResult;\n$request->authorization_result = $authorizationResult;\n\ntry {\n    $response = $api->getRiskClient()->requestPreCaptureRiskScan($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.risk.risk import RiskRequestTokenSource, RiskPayment, RiskShippingDetails, Location, Device, \\\n                                    AuthenticationResult, AuthorizationResult, PreCaptureAssessmentRequest\nfrom datetime import datetime, timezone\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ntoken_source = RiskRequestTokenSource()\ntoken_source.token = 'token'\ntoken_source.phone = phone\ntoken_source.billing_address = address\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nrisk_payment = RiskPayment()\nrisk_payment.psp = 'CheckoutSdk.com'\nrisk_payment.id = '78453878'\n\nshipping_details = RiskShippingDetails()\nshipping_details.address = address\n\nlocation = Location()\nlocation.longitude = '0.1313'\nlocation.latitude = '51.5107'\n\ndevice = Device()\ndevice.location = location\ndevice.type = 'Phone'\ndevice.os = 'ISO'\ndevice.model = 'iPhone X'\ndevice.date = datetime.now(timezone.utc)\ndevice.user_agent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, ' \\\\\n                    'like Gecko) Version/11.0 Mobile/15A372 Safari/604.1 '\ndevice.fingerprint = '34304a9e3fg09302'\n\nauthentication_result = AuthenticationResult()\nauthentication_result.attempted = True\nauthentication_result.challenged = True\nauthentication_result.liability_shifted = True\nauthentication_result.method = '3ds'\nauthentication_result.succeeded = True\nauthentication_result.version = '2.0'\n\nauthorization_result = AuthorizationResult()\nauthorization_result.avs_code = 'Y'\nauthorization_result.cvv_result = 'N'\n\nrequest = PreCaptureAssessmentRequest()\nrequest.date = datetime.now(timezone.utc)\nrequest.source = token_source\nrequest.customer = customer_request\nrequest.payment = risk_payment\nrequest.shipping = shipping_details\nrequest.amount = 10\nrequest.currency = Currency.GBP\nrequest.device = device\nrequest.authentication_result = authentication_result\nrequest.authorization_result = authorization_result\nrequest.metadata = {\n    'VoucherCode': 'loyalty_10',\n    'discountApplied': '10',\n    'customer_id': '2190EF321'}\n\ntry:\n    response = api.risk.request_pre_capture_risk_scan(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /sources:
    post:
      security:
        - ApiSecretKey: []
      tags:
        - Sources
      summary: Add a payment source
      operationId: addAPaymentSource
      description: |
        Add a reusable payment source, like a <a href="https://www.checkout.com/docs/previous/payments/payment-methods/direct-debit/sepa-direct-debit" target="blank">SEPA Direct Debit</a>, that you can later use to make one or more payments.
        Payment sources are linked to a specific customer and cannot be shared between customers.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceRequest'
      responses:
        '201':
          description: Payment source added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddSourceResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Sources.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nSepaSourceRequest request = new SepaSourceRequest()\n{\n    Reference = \"reference\",\n    Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"},\n    Customer =\n        new CustomerRequest()\n        {\n            Id = \"cus_y3oqhf46pyzuxjbcn2giaqnb44\",\n            Email = \"email@docs.checkout.com\",\n            Name = \"FirstName LastName\"\n        },\n    BillingAddress =\n        new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n    SourceData = new SourceData()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        AccountIban = \"DE25100100101234567893\",\n        Bic = \"PBNKDEFFXXX\",\n        BillingDescriptor = \"ExampleCompany.com\",\n        MandateType = MandateType.Recurring\n    }\n};\n\ntry\n{\n    SepaSourceResponse response = await api.SourcesClient().CreateSepaSource(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.sources.previous.SepaSourceRequest;\nimport com.checkout.sources.previous.SourceData;\nimport com.checkout.sources.previous.SourceResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nAddress billingAddress = Address.builder()\n    .addressLine1(\"Checkout\")\n    .addressLine2(\"90 Tottenham Court Road\")\n    .city(\"London\")\n    .state(\"London\")\n    .zip(\"W1T 4TJ\")\n    .country(CountryCode.GB)\n    .build();\n\nSourceData sourceData = new SourceData();\n    sourceData.put(\"first_name\", \"firstName\");\n    sourceData.put(\"last_name\", \"lastName\");\n    sourceData.put(\"account_iban\", \"iban\");\n    sourceData.put(\"bic\", \"bic\");\n    sourceData.put(\"billing_descriptor\", \"billingDescriptor\");\n    sourceData.put(\"mandate_type\", \"single\");\n\nSepaSourceRequest request = SepaSourceRequest.builder()\n    .billingAddress(billingAddress)\n    .phone(Phone.builder().countryCode(\"1\").number(\"4155552671\").build())\n    .reference(\"reference\")\n    .sourceData(sourceData)\n    .build();\n\ntry {\n    SourceResponse response = api.sourcesClient().createSepaSource(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const payment = await cko.sources.add({\n		// infered type: \"sepa\"\n		reference: 'X-080957-N34',\n		source_data: {\n			first_name: 'Sophie',\n			last_name: 'Bonneville',\n			account_iban: 'DE25100100101234567893',\n			bic: 'PBNKDEFFXXX',\n			billing_descriptor: 'Thanks for shopping',\n			mandate_type: 'recurring',\n		},\n		billing_address: {\n			address_line1: '101 Avenue de Gaulle',\n			city: 'Paris',\n			zip: '75013',\n			country: 'FR',\n		},\n		phone: {\n			country_code: '+33',\n			number: '6 78 91 01 11',\n		},\n		customer: {\n			email: 'sophie.bonneville@ckomail.com',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Sources\\Previous\\SepaSourceRequest;\nuse Checkout\\Sources\\Previous\\SourceData;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"44\";\n$phone->number = \"020 222333\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$sourceData = new SourceData();\n$sourceData->first_name = \"FirstName\";\n$sourceData->last_name = \"LastName\";\n$sourceData->account_iban = \"IBAN\";\n$sourceData->bic = \"BIC\";\n$sourceData->billing_descriptor = \"descriptor\";\n$sourceData->mandate_type = \"single\";\n\n$request = new SepaSourceRequest();\n$request->billing_address = $address;\n$request->phone = $phone;\n$request->reference = \"reference\";\n$request->source_data = $sourceData;\n\ntry {\n    $response = $api->getSourcesClient()->createSepaSource($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.sources.sources import SourceData, SepaSourceRequest, MandateType\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\nsource_data = SourceData()\nsource_data.first_name = 'First'\nsource_data.last_name = 'Last'\nsource_data.account_iban = 'iban'\nsource_data.bic = 'PBNKDEFFXXX'\nsource_data.billing_descriptor = 'descriptor'\nsource_data.mandate_type = MandateType.SINGLE\n\nsepa_source_request = SepaSourceRequest()\nsepa_source_request.billing_address = address\nsepa_source_request.reference = 'reference'\nsepa_source_request.phone = phone\nsepa_source_request.source_data = source_data\n\ntry:\n    response = api.sources.create_sepa_source(sepa_source_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /tokens:
    post:
      security:
        - ApiPublicKey: [ ]
      tags:
        - Tokens
      summary: Request a token
      operationId: requestAToken
      description: |
        Exchange a digital wallet payment token or card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes.
        To create a token, please authenticate using your public key.
    
        **Please note:** You should only use the `card` type for testing purposes.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Tokens;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .PublicKey(\"public_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCardTokenRequest request = new CardTokenRequest\n{\n    Number = \"4543474002249996\",\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    Cvv = \"123\",\n    BillingAddress = new Address()\n    {\n        AddressLine1 = \"Checkout.com\",\n        AddressLine2 = \"90 Tottenham Court Road\",\n        City = \"London\",\n        State = \"London\",\n        Zip = \"W1T 4TJ\",\n        Country = CountryCode.GB\n    },\n    Phone = new Phone() {Number = \"4155552671\", CountryCode = \"1\"}\n};\n\ntry\n{\n    CardTokenResponse response = await api.TokensClient().Request(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.tokens.CardTokenRequest;\nimport com.checkout.tokens.CardTokenResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardTokenRequest request = CardTokenRequest.builder()\n    .number(\"123456789\")\n    .expiryMonth(10)\n    .expiryYear(2025)\n    .cvv(\"123\")\n    .name(\"name\")\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .build();\n\ntry {\n    CardTokenResponse response = api.tokensClient().requestCardToken(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX', { pk: 'pk_YYYY' });\n\ntry {\n	const token = await cko.tokens.request({\n		// infered type: \"applepay\"\n		token_data: {\n			version: 'EC_v1',\n			data: 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...',\n			signature: 'MIAGCSqGbGUg...',\n			header: {\n				ephemeralPublicKey: 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...',\n				publicKeyHash: 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6...',\n				transactionId: '3cee89679130a4b...',\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Tokens\\CardTokenRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->publicKey(\"public_ey\")\n    ->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$request = new CardTokenRequest();\n$request->name = \"Name\";\n$request->number = \"123456789\";\n$request->expiry_year = 2027;\n$request->expiry_month = 10;\n$request->cvv = \"123\";\n$request->billing_address = $address;\n$request->phone = $phone;\n\ntry {\n    $response = $api->getTokensClient()->requestCardToken($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.common.common import Phone, Address\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.tokens.tokens import CardTokenRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ncard_token_request = CardTokenRequest()\ncard_token_request.number = 'number'\ncard_token_request.expiry_month = 10\ncard_token_request.expiry_year = 2027\ncard_token_request.cvv = 123\ncard_token_request.name = 'Name'\ncard_token_request.billing_address = address\ncard_token_request.phone = phone\n\ntry:\n    response = api.tokens.request_card_token(card_token_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /webhooks:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Retrieve webhooks
      operationId: retrieveWebhooks
      description: |
        Retrieves the webhooks configured for the channel identified by your API key
      parameters: [ ]
      responses:
        '200':
          description: Configured webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '204':
          description: No webhooks configured
        '401':
          description: Unauthorized
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Webhooks.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    ItemsResponse<WebhookResponse> response = await api.WebhooksClient().RetrieveWebhooks();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.ItemsResponse;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.webhooks.previous.WebhookResponse;\n\nCheckoutApi api = CheckoutSdk\n     .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    ItemsResponse<WebhookResponse> response = api.webhooksClient().retrieveWebhooks().get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhooks = await cko.webhooks.retrieveWebhooks();"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getWebhooksClient()->retrieveWebhooks();\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.webhooks.retrieve_webhooks(\"webhook_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Register webhook
      operationId: registerWebhook
      description: |
        Register a new webhook endpoint that Checkout.com will post all or selected events to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '201':
          description: Webhook registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: URL already registered for another webhook
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Webhooks.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nWebhookRequest request = new WebhookRequest()\n{\n    Url = \"https://example.com/webhooks\",\n    Active = true,\n    Headers = new Dictionary<string, string>()\n    {\n        {\"authorization\", \"1234\"}\n    },\n    ContentType = WebhookContentType.Json,\n    EventTypes = new List<string>()\n    {\n        \"payment_approved\",\n        \"payment_pending\",\n        \"payment_declined\",\n        \"payment_expired\",\n        \"payment_canceled\",\n        \"payment_voided\",\n        \"payment_void_declined\",\n        \"payment_captured\",\n        \"payment_capture_declined\",\n        \"payment_capture_pending\",\n        \"payment_refunded\",\n        \"payment_refund_declined\",\n        \"payment_refund_pending\"\n    }\n};\n\ntry\n{\n    WebhookResponse response = await api.WebhooksClient().RegisterWebhook(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.webhooks.previous.WebhookRequest;\nimport com.checkout.webhooks.previous.WebhookResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n    .url(\"https://docs.checkout.com/webhook\")\n    .eventTypes(Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\"))\n    .build();\n\ntry {\n    WebhookResponse response = api.webhooksClient().registerWebhook(webhookRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.registerWebhook({\n	url: 'https://example.com/webhook',\n	active: true,\n	headers: {\n		authorization: '1234',\n	},\n	content_type: 'json',\n	event_types: ['payment_approved', 'payment_captured'],\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Webhooks\\Previous\\WebhookRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new WebhookRequest();\n$request->url = \"https://test.checkout.com/webhooks\";\n$request->content_type = \"json\";\n$request->event_types = array(\"invoice.cancelled\", \"card.updated\");\n$request->active = true;\n\ntry {\n    $response = $api->getWebhooksClient()->registerWebhook($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.webhooks.webhooks import WebhookRequest, WebhookContentType\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\nrequest = WebhookRequest()\nrequest.url = \"https://example.com/webhooks\"\nrequest.active = True\nrequest.content_type = WebhookContentType.JSON\nrequest.event_types = [\"payment_approved\", \"payment_pending\", \"payment_declined\", \"payment_expired\", \"payment_canceled\", \\\n    \"payment_voided\", \"payment_void_declined\", \"payment_captured\", \"payment_capture_declined\", \"payment_capture_pending\", \\\n    \"payment_refunded\", \"payment_refund_declined\", \"payment_refund_pending\"]\nrequest.headers = {\n    \"authorization\": \"1234\"\n}\n\ntry:\n    response = api.webhooks.register_webhook(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /webhooks/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Retrieve webhook
      operationId: retrieveWebhook
      description: |
        Retrieves the webhook with the specified identifier string
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '200':
          description: Webhook was retrieved successfully
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/WebhookRequest'
                required:
                  - url
        '401':
          description: Unauthorized
        '404':
          description: Webhook not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Webhooks.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    WebhookResponse response = await api.WebhooksClient().RetrieveWebhook(\"webhook_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.webhooks.previous.WebhookResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    WebhookResponse response = api.webhooksClient().retrieveWebhook(\"webhook_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.retrieveWebhook('wh_tdt72zlbe7cudogxdgit6nwk6i');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getWebhooksClient()->retrieveWebhook(\"webhook_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.webhooks.retrieve_webhook(\"webhook_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    put:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Update webhook
      operationId: updateWebhook
      description: |
        Updates an existing webhook
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Webhook not found
        '409':
          description: URL already registered for another webhook
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Webhooks.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nWebhookRequest request = new WebhookRequest()\n{\n    Url = \"https://example.com/webhooks\",\n    Active = true,\n    Headers = new Dictionary<string, string>() {{\"authorization\", \"1234\"}},\n    ContentType = WebhookContentType.Json,\n    EventTypes = new List<string>()\n    {\n        \"payment_approved\",\n        \"payment_pending\",\n        \"payment_declined\",\n        \"payment_expired\",\n        \"payment_canceled\",\n        \"payment_voided\",\n        \"payment_void_declined\",\n        \"payment_captured\",\n        \"payment_capture_declined\",\n        \"payment_capture_pending\",\n        \"payment_refunded\",\n        \"payment_refund_declined\",\n        \"payment_refund_pending\"\n    }\n};\n\ntry\n{\n    WebhookResponse response = await api.WebhooksClient().UpdateWebhook(\"webhook_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.webhooks.previous.WebhookRequest;\nimport com.checkout.webhooks.previous.WebhookResponse;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nWebhookRequest webhookRequest = WebhookRequest.builder().build();\nwebhookRequest.setUrl(\"https://docs.checkout.com/webhooks/updated\");\n\ntry {\n    WebhookResponse response = api.webhooksClient().updateWebhook(\"webhook_id\", webhookRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.updateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n	url: 'https://example.com/webhooks/updated',\n	active: true,\n	headers: {\n		authorization: '1234',\n	},\n	content_type: 'json',\n	event_types: ['payment_approved', 'payment_captured'],\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Webhooks\\Previous\\WebhookRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new WebhookRequest();\n$request->url = \"https://test.checkout.com/webhooks/changed\";\n$request->headers = [];\n$request->content_type = \"json\";\n$request->event_types = array(\"source_updated\");\n$request->active = true;\n\ntry {\n    $response = $api->getWebhooksClient()->updateWebhook(\"webhook_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.webhooks.webhooks import WebhookRequest, WebhookContentType\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\nrequest = WebhookRequest()\nrequest.url = \"https://example.com/webhooks\"\nrequest.active = True\nrequest.content_type = WebhookContentType.JSON\nrequest.event_types = [\"payment_approved\", \"payment_pending\", \"payment_declined\", \"payment_expired\", \"payment_canceled\", \\\n   \"payment_voided\", \"payment_void_declined\", \"payment_captured\", \"payment_capture_declined\", \"payment_capture_pending\", \\\n   \"payment_refunded\", \"payment_refund_declined\", \"payment_refund_pending\"]\nrequest.headers = {\n    \"authorization\": \"1234\"\n}\n\ntry:\n    response = api.webhooks.update_webhook(\"webhook_id\", request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Partially update webhook
      operationId: partiallyUpdateWebhook
      description: Updates all or some of the registered webhook details
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Webhook not found
        '409':
          description: URL already exists in another webhook configuration
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Webhooks.Previous;\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nWebhookRequest request = new WebhookRequest()\n{\n    Url = \"https://example.com/webhooks\",\n    Active = true,\n    Headers = new Dictionary<string, string>() {{\"authorization\", \"1234\"}},\n    ContentType = WebhookContentType.Json,\n    EventTypes = new List<string>()\n    {\n        \"payment_approved\",\n        \"payment_pending\",\n        \"payment_declined\",\n        \"payment_expired\",\n        \"payment_canceled\",\n        \"payment_voided\",\n        \"payment_void_declined\",\n        \"payment_captured\",\n        \"payment_capture_declined\",\n        \"payment_capture_pending\",\n        \"payment_refunded\",\n        \"payment_refund_declined\",\n        \"payment_refund_pending\"\n    }\n};\n\ntry\n{\n    WebhookResponse response = await api.WebhooksClient().PatchWebhook(\"webhook_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\nimport com.checkout.webhooks.previous.WebhookRequest;\nimport com.checkout.webhooks.previous.WebhookResponse;\n\nCheckoutApi api = CheckoutSdk\n     .builder()\n     .previous()\n     .staticKeys()\n     .secretKey(\"secret_key\")\n     .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n     .build();\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n    .url(\"https://docs.checkout.com/webhooks/updated\")\n    .eventTypes(Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\"))\n    .build();\n\ntry {\n    WebhookResponse response = api.webhooksClient().updateWebhook(\"webhookId\", webhookRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.partiallyUpdateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n	url: 'https://example.com/webhooks/updated',\n});"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\nuse Checkout\\Webhooks\\Previous\\WebhookRequest;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\n$request = new WebhookRequest();\n$request->url = \"https://test.checkout.com/webhooks/changed\";\n$request->headers = [];\n$request->content_type = \"json\";\n$request->event_types = array(\"source_updated\");\n$request->active = true;\n\ntry {\n    $response = $api->getWebhooksClient()->patchWebhook(\"webhookId\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.webhooks.webhooks import WebhookRequest, WebhookContentType\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\nrequest = WebhookRequest()\nrequest.url = \"https://example.com/webhooks\"\nrequest.active = True\nrequest.content_type = WebhookContentType.JSON\nrequest.event_types = [\"payment_approved\", \"payment_pending\", \"payment_declined\", \"payment_expired\", \"payment_canceled\", \\\n   \"payment_voided\", \"payment_void_declined\", \"payment_captured\", \"payment_capture_declined\", \"payment_capture_pending\", \\\n   \"payment_refunded\", \"payment_refund_declined\", \"payment_refund_pending\"]\nrequest.headers = {\n    \"authorization\": \"1234\"\n}\n\ntry:\n    response = api.webhooks.patch_webhook(\"webhook_id\", request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Remove webhook
      operationId: removeWebhook
      description: Removes an existing webhook
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '200':
          description: Webhook removed successfully
        '401':
          description: Unauthorized
        '404':
          description: Webhook not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\nPrevious.ICheckoutApi api = CheckoutSdk.Builder()\n    .Previous()\n    .StaticKeys()\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\ntry\n{\n    EmptyResponse response = await api.WebhooksClient().RemoveWebhook(\"webhook_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.EmptyResponse;\nimport com.checkout.Environment;\nimport com.checkout.previous.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk\n    .builder()\n    .previous()\n    .staticKeys()\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\ntry {\n    EmptyResponse response = api.webhooksClient().removeWebhook(\"webhook_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.removeWebhook('wh_ahun3lg7bf4e3lohbhni65335u');"
        - lang: PHP
          source: "<?php\n//For more information please refer to https://github.com/checkout/checkout-sdk-php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutSdk;\nuse Checkout\\Environment;\n\n$api = CheckoutSdk::builder()\n    ->previous()\n    ->staticKeys()\n    ->environment(Environment::sandbox())\n    ->secretKey(\"secret_key\")\n    ->build();\n\ntry {\n    $response = $api->getWebhooksClient()->removeWebhook(\"webhook_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $error_details = $e->error_details;\n    $http_status_code = isset($e->http_metadata) ? $e->http_metadata->getStatusCode() : null;\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "import checkout_sdk\nfrom checkout_sdk.checkout_sdk import CheckoutSdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\napi = CheckoutSdk.builder() \\\n    .previous() \\\n    .secret_key('secret_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n    # or Environment.production()\n\ntry:\n    response = api.webhooks.remove_webhook(\"webhook_id\")\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
components:
