openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: 'https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg'
    altText: 'Checkout.com API logo'
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    ## Get started

    Checkout.com provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard <a href="https://docs.checkout.com/resources/codes/http-response-codes">HTTP response codes</a>.

    You can consume the APIs directly using your favorite HTTP/REST library or make use of one of our <a href="https://docs.checkout.com/integrate/sdks" target="_blank">SDKs</a>.

    We have a testing environment called sandbox, which you can <a href="https://www.checkout.com/get-test-account">sign up for</a> to test API calls without affecting live data.

    ### Base URLs

    Use the following base URLs when making requests to the APIs:

      | Environment   |      Base URL                                        |
      |---------------|------------------------------------------------------|
      | Sandbox       |  https://api.sandbox.checkout.com/                   |
      | Production    |  https://api.checkout.com/                           |

    ### Looking for more guidance?

    Depending on what integration you need, we've provided <a href="https://docs.checkout.com/integrate/">guides to get you set up</a>.

    ### Not using APIs?

    We've partnered with many popular <a href="https://docs.checkout.com/integrate/e-commerce-platforms">e-commerce platforms</a> so you can get up and running quickly, processing online payments with one of our e-commerce plugins.

    # Authentication

    When you sign up for an account, you are given a secret and public API key
    pair. You authenticate with our API by providing the appropriate key in
    the request Authorization header.

    Never share your secret keys. Keep them guarded and secure.

    # Changelog

      | Date       | Description of change                                                |
      | ---------- | -------------------------------------------------------------------- |
      | 2021/11/?? | Added specification for "Get Hosted Payments Page details" endpoint. |
      | 2021/11/11 | Added `3ds.challenge_indicator` to card payment requests.            |
      | 2021/10/18 | Added `processing.purpose` to card payouts.                          |
      | 2021/10/18 | Added `recommendation_code` to payment response.                     |

servers:
  - url: https://api.checkout.com
    description: Live API
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
tags:
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  - name: Payment Links
    description: Create a Payment Link to accept and process payment details.
  - name: Hosted Payments Page
    description: Create a Hosted Payments Page to accept and process payment details.
  - name: Sources
    description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details (or their tokenized form in a digital wallet) that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Create a payment instrument that you can later use as the source or destination for one or more payments.
  - name: Webhooks
    description: Create and manage the webhook notifications you receive to keep up to date with the status of your transactions.
  - name: Events
    description: Use events to monitor and get insights into your transactions.
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Reconciliation
    description: Quickly find all fees associated with each of your payments, so you can concentrate on the important stuff while streamlining your financial reporting.
  - name: Risk
    description: Evaluate the risk of a transaction at the pre-authentication and pre-capture stages of the payment process.
  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs
x-tagGroups:
  - name: Handle payments and payouts
    tags:
      - Payments
      - Payment Links
      - Hosted Payments Page
  - name: Stored payment details
    tags:
      - Tokens
      - Sources
      - Instruments
      - Customers
  - name: Notifications
    tags:
      - Events
      - Webhooks
  - name: Disputes
    tags:
      - Disputes
  - name: Risk management
    tags:
      - Risk
  - name: Statements and reporting
    tags:
      - Reconciliation
paths:
  /customers:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Create a customer
      operationId: createCustomer
      description: Create a customer which can be linked to one or more payment instruments, and can be passed as a source when making a payment, using the customer’s default instrument.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerCreateRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerCreateResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const customerResponse = await cko.customers.create({\n		email: 'JohnTest@test.com',\n		name: 'John Test',\n		phone: {\n			country_code: '+1',\n			number: '4155552671',\n		},\n		metadata: {\n			coupon_code: 'NY2018',\n			partner_id: 123989,\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /customers/{identifier}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Get customer details
      operationId: getCustomerDetails
      description: Returns details of a customer and their instruments
      parameters:
        - in: path
          name: identifier
          required: true
          description: The customer's ID or email
          schema:
            type: string
            properties:
              id:
                type: string
                pattern: "^(cus)_(\\w{26})$"
              email:
                type: string
                format: email
                maxLength: 255
            additionalProperties: false
            oneOf:
              - required: [ id ]
              - required: [ email ]
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGetResponse'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Update customer details
      operationId: updateCustomerDetails
      description: Update details of a customer
      parameters:
        - in: path
          name: identifier
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          required: true
          description: The customer id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerRequest'
      responses:
        '204':
          description: Customer updated successfully
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Customer not found
    
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Delete a customer
      operationId: deleteCustomerDetails
      description: Delete a customer and all of their linked payment instruments
      parameters:
        - in: path
          name: identifier
          required: true
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          description: The customer id
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Customer not found or not associated with client
  /disputes:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get disputes
      operationId: getDisputes
      description:
        Returns a list of all disputes against your business. The results will be returned in reverse chronological order,
        showing the last modified dispute (for example, where you've recently added a piece of evidence) first.
        You can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time from which to filter disputes, based on the dispute's `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: ISO-8601
          required: false
          description: The date and time until which to filter disputes, based on the dispute's `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: statuses
          schema:
            type: string
            example: evidence_required,evidence_under_review
          required: false
          description: One or more comma-separated statuses. This works like a logical *OR* operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: The acquirer reference number (ARN) that you can use to query the issuing bank
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description: If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputesRequest = new GetDisputesRequest(limit: 5);\nvar getDisputesResponse = await api.Disputes.GetDisputesAsync(getDisputesRequest: getDisputesRequest);"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputes = await cko.disputes.get({\n	limit: 5,\n	id: 'dsp_bc94ebda8d275i461229',\n});"
  /disputes/{dispute_id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get dispute details
      operationId: getDisputeDetails
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputeResponse = await api.Disputes.GetDisputeAsync(id: \"dsp_bc94ebda8d275i461229\");"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst disputeDetails = await cko.disputes.getDetails('dsp_bc94ebda8d275i461229');"
  /disputes/{dispute_id}/accept:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Accept dispute
      operationId: acceptDispute
      description: If a dispute is legitimate, you can choose to accept it. This will close it for you and remove it from your list of open disputes. There are no further financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Disputes.AcceptDisputeAsync(id: \"dsp_bc94ebda8d275i461229\");"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst accept = await cko.disputes.accept('dsp_bc94ebda8d275i461229');"
  /disputes/{dispute_id}/evidence:
    put:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Provide dispute evidence
      operationId: provideDisputeEvidence
      description: |
        Adds supporting evidence to a dispute. Before using this endpoint, you first need to [upload your files](#tag/Disputes/paths/~1files/post) using the file uploader. You will receive a file id (prefixed by `file_`) which you can then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send it to us. Once ready, you will need to submit it.
    
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar disputeEvidence = new DisputeEvidence()\n{\n    {\"additional_evidence_file\", \"file_jmbfgkjromvcrn9t4qu4\" },\n    {\"additional_evidence_text\", \"provide dispute evidence test\" }\n};\n\nawait api.Disputes.ProvideDisputeEvidenceAsync(\n                    id: \"dsp_bc94ebda8d275i461229\",\n                    disputeEvidence: disputeEvidence\n                );"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst evidence = await cko.disputes.provideEvidence('dsp_bc94ebda8d275i461229', {\n	proof_of_delivery_or_service_text: 'http://checkout.com/document.pdf',\n});"
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get dispute evidence
      operationId: getDisputeEvidence
      description: |
        Retrieves a list of the evidence submitted in response to a specific dispute.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getDisputeEvidenceResponse = await api.Disputes.GetDisputeEvidenceAsync(id: \"dsp_bc94ebda8d275i461229\");"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getEvidence = await cko.disputes.getEvidence('dsp_bc94ebda8d275i461229');"
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Submit dispute evidence
      operationId: submitDisputeEvidence
      description:
        With this final request, you can submit the evidence that you have previously provided. Make sure you have provided all the relevant information before using this request.
        You will not be able to amend your evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: "^(dsp)_(\\w{26})$"
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Disputes.SubmitDisputeEvidenceAsync(id: \"dsp_bc94ebda8d275i461229\");"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst submitEvidence = await cko.disputes.submit('dsp_bc94ebda8d275i461229');"
  /event-types:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event types
      operationId: retrieveEventTypes
      description: Retrieve a list of event types grouped by their respective version that you can configure on your webhooks.
      parameters:
        - in: query
          name: version
          schema:
            type: string
          description: The API version for which you want to retrieve the event types. Set this to `1.0` for the legacy API or `2.0` for the Unified Payments API. If no version is specified, event types for both versions will be returned.
          required: false
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTypesObject'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
      x-code-samples:
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList<EventTypesResponse> allEventTypesResponses = api.eventsClient().retrieveAllEventTypes(null).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst events = await cko.events.retrieveEventTypes();"
  /events:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve events
      operationId: retrieveEvents
      description: |
        Retrieves events based on your query parameters.
      parameters:
        - in: query
          name: payment_id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
            description: The identifier of a payment
            example: pay_ok2ynq6ubn3ufmo6jsdfmdvy5q
        - in: query
          name: charge_id
          schema:
            type: string
            pattern: "^(charge|charge_test)_(\\w{20})$"
            description: The identifier of a charge
            example: charge_FC1919EE547L23CC6BE1
        - in: query
          name: track_id
          schema:
            type: string
            description: The tracking ID of a payment
            example: TRK12345
        - in: query
          name: reference
          schema:
            type: string
            description: The reference of a payment
            example: ORD-5023-4E89
        - in: query
          name: skip
          schema:
            type: integer
            description: Set how many events you want to skip
            example: 0
        - in: query
          name: limit
          schema:
            type: integer
            description: Limit how many events your request returns
            example: 5
        - in: query
          name: from
          schema:
            type: string
            format: date-time
            description: Set the date and time from which you want to retrieve events
            example: "2020-11-07T04:00:00Z"
        - in: query
          name: to
          schema:
            type: string
            format: date-time
            description: Set the date and time to which you want to retrieve events
            example: "2020-11-07T08:15:00Z"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Payment_Id'
                  - $ref: '#/components/schemas/Charge_Id'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable Entry
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentIdInvalidResponse'
                  - $ref: '#/components/schemas/ChargeIdInvalidResponse'
      x-code-samples:
        - lang: cURL
          source: "curl --location --request GET 'https://api.checkout.com/broadcast/events?payment_id=pay_ok2ynq6ubn3ufmo6jsdfmdvy5q'\n  --header 'Authorization: secret_key_broadcast'"
  /events/{eventId}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event
      operationId: retrieveEvent
      description: |
        Retrieves the event with the specified identifier string. The event `data` includes the full event details, the schema of which will vary based on the `type`.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventObject'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
      x-code-samples:
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nEventResponse event = api.eventsClient().retrieveEvent(\"evt_c2qelfixai2u3es3ksovngkx3e\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst event = await cko.events.retrieveEvent('evt_c2qelfixai2u3es3ksovngkx3e');"
  /events/{eventId}/notifications/{notificationId}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retrieve event notification
      operationId: retrieveEventNotification
      description: Retrieves the attempts for a specific event notification
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
        - in: path
          name: notificationId
          schema:
            type: string
            pattern: "^(ntf)_(\\w{26})$"
          required: true
          description: The notification identifier
      responses:
        '200':
          description: Notification retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or notification not found
      x-code-samples:
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nEventNotificationResponse notification = api.eventsClient().retrieveEventNotification(\"evt_c2qelfixai2u3es3ksovngkx3e\", \"ntf_wqjkqpgjy33uxoywcej4fnw6qm\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst notification = await cko.events.retrieveEventNotification({\n	eventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n	notificationId: 'ntf_wqjkqpgjy33uxoywcej4fnw6qm',\n});"
  /events/{eventId}/webhooks/{webhookId}/retry:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retry webhook
      operationId: retryWebhook
      description: Retries a specific webhook notification for the given event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
        - in: path
          name: webhookId
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          required: true
          description: The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '202':
          description: Retry accepted
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or webhook not found
      x-code-samples:
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.eventsClient().retryWebhook(\"evt_c2qelfixai2u3es3ksovngkx3e\", \"wh_mpkyioafmajulnhjvwmrklenb4\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retry = await cko.events.retry({\n	eventId: 'evt_c2qelfixai2u3es3ksovngkx3e',\n	webhookId: 'wh_mpkyioafmajulnhjvwmrklenb4',\n});"
  /events/{eventId}/webhooks/retry:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Events
      summary: Retry all webhooks
      operationId: retryAllWebhooks
      description: Retries all webhook notifications configured for the specified event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: "^(evt)_(\\w{26})$"
          required: true
          description: The event identifier
      responses:
        '202':
          description: Retry accepted
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event or webhook not found
      x-code-samples:
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.eventsClient().retryAllWebhooks(\"evt_c2qelfixai2u3es3ksovngkx3e\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst retryAll = await cko.events.retryAll('evt_c2qelfixai2u3es3ksovngkx3e');"
  /files:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Upload file
      operationId: uploadFile
      description: Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar pathToFile = @\"test_file.png\";\n\nvar uploadFileResponse = await api.Files.UploadFileAsync(\n                                          pathToFile: pathToFile,\n                                          purpose: \"dispute_evidence\"\n                                        );"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst file = await cko.files.upload({\n	path: fs.createReadStream('./test/files/evidence.jpg'),\n	purpose: 'dispute_evidence',\n});"
  /files/{file_id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Disputes
      summary: Get file information
      operationId: getFileInformation
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar getFileResponse = await api.Files.GetFileAsync(id: \"file_zna32sccqbwevd3ldmejtplbhu\");"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst getFile = await cko.files.getFile('file_zna32sccqbwevd3ldmejtplbhu');"
  /hosted-payments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Hosted Payments Page
      summary: Create a Hosted Payments Page session
      operationId: createAHostedPaymentsSession
      description: |
        Create a Hosted Payments Page session and pass through all the payment information, like the amount, currency, country and reference.
    
        To get started with our Hosted Payments Page, contact your Solutions Engineer or integration@checkout.com.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedPaymentsRequest'
      responses:
        '201':
          description: Created Hosted Payments Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPaymentsResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const hosted = await cko.hostedPayments.create({\n		amount: 10,\n		currency: 'USD',\n		billing: {\n			address: {\n				address_line1: 'Checkout.com',\n				address_line2: '90 Tottenham Court Road',\n				city: 'London',\n				state: 'London',\n				zip: 'W1T 4TJ',\n				country: 'GB',\n			},\n		},\n		success_url: 'https://example.com/success',\n		cancel_url: 'https://example.com/cancel',\n		failure_url: 'https://example.com/failure',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /hosted-payments/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Hosted Payments Page
      summary: Get Hosted Payments Page details
      operationId: getHostedPaymentsPageDetails
      description: |
        Retrieve details about a specific Hosted Payments Page using the ID returned when it was created. In the response, you will see the status of the Hosted Payments Page.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/hosted-payments-page">Hosted Payments Page documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/HostedPaymentId'
      responses:
        '200':
          description: Hosted Payments Page details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHostedPaymentsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Hosted Payments Page not found
  /instruments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Create an instrument
      operationId: createAnInstrument
      description: |
        Exchange a single use Checkout.com token for a payment instrument reference, that can be used at any time to request one or more payments.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstrumentResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrument = await cko.instruments.create({\n		// infered type \"token\",\n		token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /instruments/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Get instrument details
      operationId: getInstrumentDetails
      description: Returns details of an instrument
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
          required: true
          description: The instrument id
      responses:
        '200':
          description: Instrument retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrument = await cko.instruments.get('src_udfsqsgpjykutgs26fiejgizau');\n} catch (err) {\n	console.log(err.name);\n}"
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Update instrument details
      operationId: updateInstrumentDetails
      description: Update details of an instrument
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
            example: src_ubfj2q76miwundwlk72vxt2i7q
          required: true
          description: The instrument ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: Instrument updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const instrumentResponse = await cko.instruments.update('src_udfsqsgpjykutgs26fiejgizau', {\n		expiry_year: 2030,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Delete an instrument
      operationId: removeInstrument
      description: Delete a payment instrument.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
            example: src_ubfj2q76miwundwlk72vxt2i7q
          required: true
          description: The payment instrument to be deleted
      responses:
        '204':
          description: Instrument deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const deleteOutcome = await cko.instruments.delete(instrument.id);\n} catch (err) {\n	console.log(err.name);\n}"
  /payment-links:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payment Links
      summary: Create a Payment Link
      operationId: createAPaymentLinkSession
      description: |
        Create a Payment Link and pass through all the payment information, like the amount, currency, country and reference.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLinksRequest'
      responses:
        '201':
          description: Create Payment Link Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const linksResponse = await cko.paymentLinks.create({\n		amount: 10359,\n		currency: 'EUR',\n		billing: {\n			address: {\n				country: 'DE',\n			},\n		},\n		products: [\n			{\n				name: 'Moonlight blue lightsaber',\n				quantity: 2,\n				price: 3999,\n			},\n			{\n				name: 'Stainless steel watch strap',\n				quantity: 1,\n				price: 2361,\n			},\n		],\n		return_url: 'https://pay.sandbox.checkout.com/link/examples/docs',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /payment-links/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Payment Links
      summary: Get Payment Link details
      operationId: getPaymentLinkDetails
      description: |
        Retrieve details about a specific Payment Link using its ID returned when the link was created. In the response, you will see the status of the Payment Link.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/payment-links">Payment Links documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/PaymentLinkId'
      responses:
        '200':
          description: Payment Link details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentLinkResponse'
        '401':
          description: Unauthorized
        '404':
          description: Payment Link session not found
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.paymentLinks.get('pl_XXXX');"
  /payments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Request a payment or payout
      operationId: requestAPaymentOrPayout
      description: |
        To accept payments from <a href="https://docs.checkout.com/payment-methods/cards" target="blank">cards</a>, <a href="https://docs.checkout.com/payment-methods/wallets" target="blank">digital wallets</a> and many <a href="https://docs.checkout.com/payment-methods/" target="blank">alternative payment methods</a>, specify the `source.type` field, along with the source-specific data.
    
        To <a href="https://docs.checkout.com/payment-actions/card-payouts" target="blank">pay out to a card</a>, specify the destination of your payout using the `destination.type` field, along with the destination-specific data.
    
        To verify the success of the payment, check the `approved` field in the response.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PaymentRequest'
                - $ref: '#/components/schemas/Payout'
            example:
              source:
                type: token
                token: tok_4gzeau5o2uqubbk6fufs3m7p54
              amount: 6540
              currency: USD
              payment_type: Recurring
              reference: 'ORD-5023-4E89'
              description: 'Set of 3 masks'
              capture: true
              capture_on: '2019-09-10T10:11:12Z'
              customer:
                id: 'cus_udst2tfldj6upmye2reztkmm4i'
                email: 'brucewayne@gmail.com'
                name: 'Bruce Wayne'
              billing_descriptor:
                name: SUPERHEROES.COM
                city: GOTHAM
              shipping:
                address:
                  address_line1: Checkout.com
                  address_line2: 90 Tottenham Court Road
                  city: London
                  state: London
                  zip: W1T 4TJ
                  country: GB
                phone:
                  country_code: '+1'
                  number: 415 555 2671
              3ds:
                enabled: true
                attempt_n3d: true
                eci: '05'
                cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                version: '2.0.1'
              previous_payment_id: 'pay_fun26akvvjjerahhctaq2uzhu4'
              risk:
                enabled: false
              success_url: 'http://example.com/payments/success'
              failure_url: 'http://example.com/payments/fail'
              payment_ip: '90.197.169.245'
              recipient:
                dob: '1985-05-15'
                account_number: '5555554444'
                zip: W1T
                last_name: Jones
              metadata:
                coupon_code: 'NY2018'
                partner_id: 123989
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: 'pay_mbabizu24mvu3mela5njyhpit4'
                action_id: 'act_mbabizu24mvu3mela5njyhpit4'
                amount: 6540
                currency: 'USD'
                approved: true
                status: 'Authorized'
                auth_code: '770687'
                response_code: '10000'
                response_summary: 'Approved'
                3ds:
                  downgraded: true
                  enrolled: 'N'
                risk:
                  flagged: true
                source:
                  type: 'card'
                  id: 'src_nwd3m4in3hkuddfpjsaevunhdy'
                  billing_address:
                    address_line1: 'Checkout.com'
                    address_line2: '90 Tottenham Court Road'
                    city: 'London'
                    state: 'London'
                    zip: 'W1T 4TJ'
                    country: 'GB'
                  phone:
                    country_code: '+1'
                    number: '415 555 2671'
                  last4: '4242'
                  fingerprint: 'F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832'
                  bin: '424242'
                customer:
                  id: 'cus_udst2tfldj6upmye2reztkmm4i'
                  email: 'brucewayne@gmail.com'
                  name: 'Bruce Wayne'
                processed_on: '2019-09-10T10:11:12Z'
                reference: 'ORD-5023-4E89'
                processing:
                  retrieval_reference_number: '909913440644'
                  acquirer_transaction_id: '440644309099499894406'
                  recommendation_code: "02"
                eci: '06'
                scheme_id: '489341065491658'
                _links:
                  self:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4'
                  action:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions'
                  void:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids'
                  capture:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nvar paymentRequest = new PaymentRequest<TokenSource>(tokenSource, Currency.USD, 5600)\n{\n  Reference = \"ORD-090857\",\n  Capture = false,\n  ThreeDs = true\n};\n\ntry\n{\n  var response = await api.Payments.RequestAsync(paymentRequest);\n\n  if (response.IsPending && response.Pending.RequiresRedirect())\n  {\n    return Redirect(response.Pending.GetRedirectLink().Href);\n  }\n\n  if (response.Payment.Approved)\n    return PaymentSuccessful(response.Payment);\n\n  return PaymentDeclined(response.Payment);\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Payment request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nTokenSource tokenSource = new TokenSource(\"tok_ubfj2q76miwundwlk72vxt2i7q\");\nPaymentRequest<TokenSource> paymentRequest = PaymentRequest.fromSource(tokenSource, Currency.USD, 5600);\npaymentRequest.setReference(\"ORD-090857\");\npaymentRequest.setCapture(false);\npaymentRequest.setThreeDS(ThreeDSRequest.from(true));\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestAsync(paymentRequest).get();\n\n    if (response.isPending() && response.getPending().requiresRedirect()) {\n        return redirect(response.getPending().getRedirectLink().getHref());\n    }\n\n    if (response.getPayment().isApproved())\n        return paymentSucessful(response.getPayment());\n\n    return paymentDeclined(response.getPayment());\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const payment = await cko.payments.request({\n		source: {\n			// infered type: \"token\"\n			token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n			billing_address: {\n				address_line1: 'Wall Street',\n				address_line2: 'Dollar Avenue',\n				city: 'London',\n				state: 'London',\n				zip: 'W1W W1W',\n				country: 'GB',\n			},\n			phone: {\n				country_code: '44',\n				number: '7123456789',\n			},\n		},\n		currency: 'USD',\n		amount: 1000,\n		payment_type: 'Regular',\n		reference: 'ORDER 1234',\n		description: 'Mint Tea',\n		customer: {\n			email: 'new_user@email.com',\n			name: 'John Smith',\n		},\n		metadata: {\n			myCustomProp: {\n				value: 1,\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n\n$method = new TokenSource('tok_ubfj2q76miwundwlk72vxt2i7q');\n$payment = new Payment($method, 'USD');\n\n$customer = new Customer();\n$customer->email = 'john.smith@email.com';\n$customer->name = 'John Smith';\n\n$address = new Address();\n$address->address_line1 = '14-17 Wells Mews';\n$address->address_line2 = 'Fitzrovia';\n$address->city = 'London';\n$address->state = 'London';\n$address->zip = 'W1T 3HF';\n$address->country = 'UK';\n\n$phone = new Phone();\n$phone->country_code = '0044';\n$phone->number = '02073233888';\n\n$payment->customer = $customer;\n$payment->shipping = new Shipping($address, $phone);\n$payment->billing_descriptor = new BillingDescriptor('Dynamic desc charge', 'City charge');\n$payment->amount = 5600;\n$payment->capture = false;\n$payment->reference = 'ORD-090857';\n$payment->threeDs = new ThreeDs(true);\n$payment->risk = new Risk(true);\n$payment->setIdempotencyKey(createMyUniqueKeyForThis());\n\ntry {\n    $details = $checkout->payments()->request($payment);\n\n    $redirection = $details->getRedirection();\n    if ($redirection) {\n        return $redirection;\n    }\n\n    return $details;\n} catch (CheckoutModelException $ex) {\n    return $ex->getErrors();\n} catch (CheckoutHttpException $ex) {\n    return $ex->getErrors();\n}"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.request(\n        source={\n            'token': 'tok_...',\n        },\n        amount=100,\n        currency=sdk.Currency.USD,\n        reference='pay_ref'\n    )\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /payments/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Get payment details
      operationId: getPaymentDetails
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = await api.Payments.GetAsync(sessionId);\n\nif (payment.Approved)\n{            \n    var cardSourceId = payment.Source.AsCard().Id;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString sessionId = \"sid_y3oqhf46pyzuxjbcn2giaqnb44\";\nGetPaymentResponse payment = api.paymentsClient().getAsync(sessionId).get();\n\nif (payment.isApproved()) {\n    String cardSourceId = ((CardSourceResponse)payment.getSource()).getId();\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.get('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$threeDsSessionId = 'sid_y3oqhf46pyzuxjbcn2giaqnb44';\n\ntry {\n\n	$details = $checkout->payments()->details($threeDsSessionId);\n	return $details->getSourceId();\n\n} catch(CheckoutHttpException $ex) {\n	return $ex->getErrors();\n}"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    payment = api.payments.get('pay_...')\n    print(payment.id)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /payments/{id}/actions:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Get payment actions
      operationId: getPaymentActions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nIEnumerable<PaymentAction> paymentActions = await api.Payments.GetActionsAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nList<PaymentAction> paymentActions = api.paymentsClient().getActionsAsync(paymentId).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.getActions('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->actions($paymentID);"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    actions = api.payments.get_actions('pay_...')\n    for action in actions:\n        print(action.id)\n        print(action.type)\n        print(action.response_code)\n        print(action.reference)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /payments/{id}/captures:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Capture a payment
      operationId: captureAPayment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the capture is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\nawait api.Payments.CaptureAsync(paymentId);\n\n// Or partial capture\nvar captureRequest = new CaptureRequest\n{\n  Reference = \"your reference\",\n  Amount = 100\n};\n\nawait api.Payments.CaptureAsync(paymentId, captureRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full capture\napi.paymentsClient().captureAsync(paymentId).get();\n\n// Or partial capture\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().captureAsync(paymentId, captureRequest).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'CAPTURE ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full capture\n$capture = new Capture($paymentID);\n\n// Or partial capture\n$capture = new Capture($paymentID);\n$capture->reference = 'your reference';\n$capture->amount = 100;\n\nreturn $checkout->payments()->capture($capture);"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.capture('pay_...', amount=100, reference='CAPTURE')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /payments/{id}/refunds:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Refund a payment
      operationId: refundAPayment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the refund is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\nawait api.Payments.RefundAsync(paymentId);\n\n// Or partial refund\nvar refundRequest = new RefundRequest\n{\n  Reference = \"your reference\",\n  Amount = 100\n};\n\nawait api.Payments.RefundAsync(paymentId, refundRequest);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\n// Full refund\napi.paymentsClient().refundAsync(paymentId).get();\n\n// Or partial refund\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"your reference\")\n    .amount(100)\n    .build();\n\napi.paymentsClient().refundAsync(paymentId, refundRequest).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.refund('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'REFUND ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\n// Full refund\n$refund = new Refund($paymentID);\n\n// Or partial refund\n$refund = new Refund($paymentID);\n$refund->reference = 'your reference';\n$refund->amount = 100;\n\nreturn $checkout->payments()->refund($refund);"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.refund('pay_...', amount=100, reference='REFUND')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /payments/{id}/voids:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Void a payment
      operationId: voidAPayment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [webhooks](#tag/Webhooks) to be notified if the void is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\nvar paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\nawait api.Payments.VoidAsync(paymentId);"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(\"your secret key\", false, \"your public key\");\nString paymentId = \"pay_y3oqhf46pyzuxjbcn2giaqnb44\";\n\napi.paymentsClient().voidAsync(paymentId).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst payment = await cko.payments.void('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n	amount: 1000,\n	reference: 'VOID ORDER 1234',\n	metadata: {\n		value: 'my value',\n	},\n});"
        - lang: PHP
          source: "<?php\n\n$checkout = new CheckoutApi('your secret key');\n$paymentID = 'pay_y3oqhf46pyzuxjbcn2giaqnb44';\n\nreturn $checkout->payments()->void(new Voids($paymentID));"
        - lang: Python
          source: "import checkout_sdk as sdk\n\napi = sdk.get_api(secret_key='<your secret key>')\n\ntry:\n    action = api.payments.void('pay_...', reference='VOID')\n\n    print(action.id)\n    print(action.get_link('payment').href)\nexcept sdk.errors.CheckoutSdkError as e:\n    print('{0.http_status} {0.error_type} {0.elapsed} {0.request_id}'.format(e))"
  /reporting/payments:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON payments report
      operationId: getJsonPaymentsReport
      description: Returns a JSON report containing all payments within your specified parameters.
        You can reconcile the data from this report against your statements (which can be found in the <a href="https://hub.checkout.com/login" target="_blank">Hub</a>), the list of payments in the Hub (using the `Reference` field) or your own systems.
        *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.
    
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for payments
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for payments
        - in: query
          name: reference
          schema:
            type: string
          required: false
          description: Reference of a specific payment to search for
        - in: query
          name: limit
          schema:
            type: integer
            maximum: 500
            default: 200
          required: false
          description: Sets a limit on the number of results
    
      responses:
        '200':
          description: Payments report retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPayments({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /reporting/payments/{paymentId}:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON single payment report
      operationId: getJsonSinglePaymentReport
      description:
        Returns a JSON payment report containing all of the data related to a specific payment, based on the payment's identifier.
        *Note:* no payments from before 7 February 2019 at 00.00.00 UTC will appear when using the payments endpoint. To view earlier payments, please contact our support team.
    
      parameters:
        - in: path
          name: paymentId
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The unique payment identifier
    
      responses:
        '200':
          description: Payment report returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPayment('pay_nezg6bx2k22utmk4xm5s2ughxi');\n} catch (err) {\n	console.log(err.name);\n}"
  /reporting/payments/download:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get CSV payments report
      responses:
        '200':
          description: CSV downloaded successfully
      operationId: getCsvPaymentsReport
      description:
        In addition to the JSON format returned by the `reporting/payments` endpoint, you can also download a CSV report containing the same data.
        Learn more about <a href="https://docs.checkout.com/reporting-and-insights/reconciliation-api/payments-endpoint#Paymentsendpoint-HowtoreadtheCSVfile" target="_blank">how to read your CSV report</a>.
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for payments
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for payments
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const reconciliation = await cko.reconciliation.getPaymentsCsv({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /reporting/statements:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get JSON statements report
      operationId: getJsonStatementsReport
      description: Returns a JSON report containing all statements within your specified parameters. Please note that the timezone for the request will be UTC.
    
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time from which to search for statements
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: Date and time until which to search for statements
    
      responses:
        '200':
          description: Statements report successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementsReportResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const statements = await cko.reconciliation.getStatements({\n		from: '2019-05-17T16:48:52Z',\n		to: '2019-06-17T16:48:52Z',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /reporting/statements/{StatementId}/payments/download:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      summary: Get CSV single statement report
      operationId: GetCsvSingleStatementReport
      description: Downloads a CSV statement report containing all of the data related to a specific statement, based on the statement's identifier.
      responses:
        '200':
          description: CSV downloaded successfully
      parameters:
        - in: path
          name: StatementId
          example: '190110B107654'
          schema:
            type: string
          required: true
          description: The unique statement identifier
  /reporting/statements/download:
    servers:
      - url: https://api.checkout.com
        description: Live API
    
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Reconciliation
      responses:
        '200':
          description: CSV downloaded successfully
      summary: Get CSV statements report
      operationId: getCsvStatementsReport
      description: In addition to the JSON format returned by the `reporting/statements` endpoint, you can also download a CSV report containing the same data.
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const statement = await cko.reconciliation.getStatementCsv('155613B100981');\n} catch (err) {\n	console.log(err.name);\n}"
  /risk/assessments/pre-authentication:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-authentication risk scan
      operationId: preAuthenticationRiskAssessment
      description: |
        Perform a pre-authentication fraud assessment using your defined risk settings.
        #parameters:
      # - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreAuthenticationAssessmentRequest'
      responses:
        #   '200':
        #     description: Transaction already assessed
        #     content:
        #       application/json:
        #         schema:
        #           $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
        #       Cko-Request-Id:
        #         $ref: "#/components/headers/Cko-Request-Id"
        #       Cko-Version:
        #         $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
  /risk/assessments/pre-capture:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-capture risk scan
      operationId: preCaptureRiskAssessment
      description: |
        Perform a pre-capture fraud assessment using your defined risk settings.<br><br> **Note**: If you’ve already requested a pre-authentication fraud assessment for the transaction, provide the `assessment_id` returned in that response in your request to carry over the data. If you do include the `assessment_id`, the other fields you provide in this request will only fill in any gaps in the data; they will not overwrite any data.
      # parameters:
      #   - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreCaptureAssessmentRequest'
      responses:
        '200':
          description: Transaction already assessed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
  /sources:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Sources
      summary: Add a payment source
      operationId: addAPaymentSource
      description: |
        Add a reusable payment source, like a <a href="https://docs.checkout.com/payment-methods/direct-debit/sepa-direct-debit" target="blank">SEPA Direct Debit</a>, that you can later use to make one or more payments.
        Payment sources are linked to a specific customer and cannot be shared between customers.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceRequest'
      responses:
        '201':
          description: Payment source added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddSourceResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar sourceRequest = new SourceRequest\n(\n  \"sepa\",\n  new Address()\n  {\n    AddressLine1 = \"Checkout.com\",\n    AddressLine2 = \"Shepherdess Walk\",\n    City = \"London\",\n    State = \"London\",\n    Zip = \"N1 7LH\",\n    Country = \"GB\"\n  }\n)\n{\n  Reference = \"X-080957-N34\",\n  Phone = new Phone()\n  {\n    CountryCode = \"+1\",\n    Number = \"415 555 2671\"\n  },\n  SourceData = new SourceData()\n  {\n    { \"first_name\", \"Marcus\" },\n    { \"last_name\", \"Barrilius Maximus\" },\n    { \"account_iban\", \"DE68100100101234567895\" },\n    { \"bic\", \"PBNKDEFFXXX\" },\n    { \"billing_descriptor\", \"Test\" },\n    { \"mandate_type\", \"single\" }\n  }\n};\n\ntry\n{\n  var sourceResponse = await api.Sources.RequestAsync(sourceRequest);\n  var source = sourceResponse.Source;\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Source request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nAddress billingAddress = new Address();\nbillingAddress.setAddressLine1(\"Checkout.com\");\nbillingAddress.setAddressLine2(\"90 Tottenham Court Road\");\nbillingAddress.setCity(\"London\");\nbillingAddress.setState(\"London\");\nbillingAddress.setZip(\"W1T 4TJ\");\nbillingAddress.setCountry(\"GB\");\n\nPhone phone = new Phone();\nphone.setCountryCode(\"+1\");\nphone.setNumber(\"415 555 2671\");\n\nSourceData sourceData = new SourceData();\nsourceData.put(\"first_name\", \"Marcus\");\nsourceData.put(\"last_name\", \"Barrilius Maximus\");\nsourceData.put(\"account_iban\", \"DE68100100101234567895\");\nsourceData.put(\"bic\", \"PBNKDEFFXXX\");\nsourceData.put(\"billing_descriptor\", \"Java SDK test\");\nsourceData.put(\"mandate_type\", \"single\");\n\nSourceRequest sourceRequest = new SourceRequest(\"sepa\", billingAddress);\nsourceRequest.setPhone(phone);\nsourceRequest.setReference(\"Java SDK test\");\nsourceRequest.setSourceData(sourceData);\nSourceResponse sourceResponse = api.sourcesClient().requestAsync(sourceRequest).get();\n\nSourceProcessed source = sourceResponse.getSource();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\ntry {\n	const payment = await cko.sources.add({\n		// infered type: \"sepa\"\n		reference: 'X-080957-N34',\n		source_data: {\n			first_name: 'Sophie',\n			last_name: 'Bonneville',\n			account_iban: 'DE25100100101234567893',\n			bic: 'PBNKDEFFXXX',\n			billing_descriptor: 'Thanks for shopping',\n			mandate_type: 'recurring',\n		},\n		billing_address: {\n			address_line1: '101 Avenue de Gaulle',\n			city: 'Paris',\n			zip: '75013',\n			country: 'FR',\n		},\n		phone: {\n			country_code: '+33',\n			number: '6 78 91 01 11',\n		},\n		customer: {\n			email: 'sophie.bonneville@ckomail.com',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /tokens:
    post:
      security:
        - ApiPublicKey: [ ]
      tags:
        - Tokens
      summary: Request a token
      operationId: requestAToken
      description: |
        Exchange a digital wallet payment token or card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes.
        To create a token, please authenticate using your public key.
    
        **Please note:** You should only use the `card` type for testing purposes.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\", useSandbox: true, \"your public key\");\nvar tokenData = new Dictionary<string, object>\n{\n  { \"version\", \"EC_v1\" },\n  { \"data\", \"t7GeajLB9skXB6QSWfEpPA4WPhD...\" },\n  { \"signature\", \"MIAGCSqGSIb3DQEHAqCAMI...\" },\n  { \"header\", new Dictionary<string, string>\n    {\n      { \"ephemeralPublicKey\", \"MFkwEwYHK...\" },\n      { \"publicKeyHash\", \"tqYV+tmG9aMh+l...\" },\n      { \"transactionId\", \"3cee89679130a4...\" }\n    }\n  }\n};\nvar request = new WalletTokenRequest(WalletType.ApplePay, tokenData);\n\ntry\n{\n  var response = await api.Tokens.RequestAsync(request);\n  var token = response.Token;\n}\ncatch (CheckoutValidationException validationEx)\n{\n  return ValidationError(validationEx.Error);\n}\ncatch (CheckoutApiException apiEx)\n{\n  Log.Error(\"Token request failed with status code {HttpStatusCode}\", apiEx.HttpStatusCode);\n  throw;\n}"
        - lang: Java
          source: "WalletTokenRequest walletTokenRequest = new WalletTokenRequest('applepay', tokenData);\n// infered type: \"applepay\"\ntry {\n    TokenResponse tokenRequest = api.tokensClient().requestAsync(walletTokenRequest).get();\n    String token  = tokenRequest.getToken();\n    return token;\n} catch (CheckoutValidationException e) {\n    return validationError(e.getError());\n} catch (CheckoutApiException e) {\n    LOG.severe(\"Payment request failed with status code \" + e.getHttpStatusCode());\n    throw e;\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX', { pk: 'pk_YYYY' });\n\ntry {\n	const token = await cko.tokens.request({\n		// infered type: \"applepay\"\n		token_data: {\n			version: 'EC_v1',\n			data: 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...',\n			signature: 'MIAGCSqGbGUg...',\n			header: {\n				ephemeralPublicKey: 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...',\n				publicKeyHash: 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6...',\n				transactionId: '3cee89679130a4b...',\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /webhooks:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Retrieve webhooks
      operationId: retrieveWebhooks
      description: |
        Retrieves the webhooks configured for the channel identified by your API key
      parameters: [ ]
      responses:
        '200':
          description: Configured webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '204':
          description: No webhooks configured
        '401':
          description: Unauthorized
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhooksRetrievalResponse = await api.Webhooks.RetrieveWebhooksAsync();"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < WebhookResponse > response = api.webhooksClient().retrieveWebhooks().get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhooks = await cko.webhooks.retrieveWebhooks();"
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Register webhook
      operationId: registerWebhook
      description: |
        Register a new webhook endpoint that Checkout.com will post all or selected events to
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '201':
          description: Webhook registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '409':
          description: URL already registered for another webhook
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhook = new Webhook()\n{\n  Url = \"https://example.com/webhook\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\n\nvar webhookRegistrationResponse = await api.Webhooks.RegisterWebhookAsync(new RegisterWebhookRequest(webhook));"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < String > eventTypes = Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\");\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n  .url(\"https://example.com/webhook\")\n  .eventTypes(eventTypes)\n  .build();\nWebhookResponse webhookResponse = api.webhooksClient().registerWebhook(webhookRequest).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.registerWebhook({\n	url: 'https://example.com/webhook',\n	active: true,\n	headers: {\n		authorization: '1234',\n	},\n	content_type: 'json',\n	event_types: ['payment_approved', 'payment_captured'],\n});"
  /webhooks/{id}:
    get:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Retrieve webhook
      operationId: retrieveWebhook
      description: |
        Retrieves the webhook with the specified identifier string
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '200':
          description: Webhook was retrieved successfully
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/WebhookRequest'
                required:
                  - url
        '401':
          description: Unauthorized
        '404':
          description: Webhook not found
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar webhookRetrievalResponse = await api.Webhooks.RetrieveWebhookAsync(\"wh_tdt72zlbe7cudogxdgit6nwk6i\");"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nWebhookResponse webhook = api.webhooksClient().retrieveWebhook(\"wh_tdt72zlbe7cudogxdgit6nwk6i\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.retrieveWebhook('wh_tdt72zlbe7cudogxdgit6nwk6i');"
    put:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Update webhook
      operationId: updateWebhook
      description: |
        Updates an existing webhook
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Webhook not found
        '409':
          description: URL already registered for another webhook
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nvar updatedWebhook = new Webhook()\n{\n  Url = \"https://example.com/webhooks/updated\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\n\nvar webhookUpdateResponse = await api.Webhooks.UpdateWebhookAsync(\n                                    \"wh_ahun3lg7bf4e3lohbhni65335u\",\n                                    new UpdateWebhookRequest(updatedWebhook)\n                                  );"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nList < String > eventTypes = Arrays.asList(\"payment_captured\", \"payment_approved\", \"payment_declined\");\n\nWebhookRequest webhookRequest = WebhookRequest.builder()\n  .url(\"https://example.com/webhooks/updated\")\n  .eventTypes(eventTypes)\n  .build();\n\nWebhookResponse webhook = api.webhooksClient().updateWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\", webhookRequest).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.updateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n	url: 'https://example.com/webhooks/updated',\n	active: true,\n	headers: {\n		authorization: '1234',\n	},\n	content_type: 'json',\n	event_types: ['payment_approved', 'payment_captured'],\n});"
    patch:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Partially update webhook
      operationId: partiallyUpdateWebhook
      description: Updates all or some of the registered webhook details
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookRequest'
      responses:
        '200':
          description: Updated webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Webhook'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Webhook not found
        '409':
          description: URL already exists in another webhook configuration
    
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\n// Original webhook\nvar webhook = new Webhook()\n{\n  Url = \"https://example.com/webhooks\",\n  EventTypes = new List<string>\n    {\n        \"payment_pending\",\n        \"payment_captured\"\n    },\n  Headers = new Dictionary<string, string>\n    {\n        { \"Authorization\", \"1234\" }\n    }\n};\nvar webhookRegistrationResponse = await Api.Webhooks.RegisterWebhookAsync(new RegisterWebhookRequest(webhook));\n\n// Partially update\nwebhook.Url += \"/partially/updated\";\nwebhook.Headers = null;\nvar webhookPartialUpdateResponse = await Api.Webhooks.PartiallyUpdateWebhookAsync(\n                                                        webhookRegistrationResponse.Id,\n                                                        new PartialUpdateWebhookRequest(webhook)\n                                                      );"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\nWebhookResponse oldWebhook = api.webhooksClient().retrieveWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\").get();\nWebhookRequest webhookRequest = oldWebhook.toRequest();\nwebhookRequest.setUrl(\"https://example.com/webhooks/updated\");\n\nWebhookResponse newWebhook = api.webhooksClient().updateWebhook(id, webhookRequest).get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.partiallyUpdateWebhook('wh_ahun3lg7bf4e3lohbhni65335u', {\n	url: 'https://example.com/webhooks/updated',\n});"
    delete:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Webhooks
      summary: Remove webhook
      operationId: removeWebhook
      description: Removes an existing webhook
      parameters:
        - name: id
          required: true
          schema:
            type: string
            pattern: "^(wh)_(\\w{32})$"
          in: path
          description: |
            The webhook identifier
          example: 'wh_387ac7a83a054e37ae140105429d76b5'
      responses:
        '200':
          description: Webhook removed successfully
        '401':
          description: Unauthorized
        '404':
          description: Webhook not found
      x-code-samples:
        - lang: C#
          source: "var api = CheckoutApi.Create(\"your secret key\");\n\nawait api.Webhooks.RemoveWebhookAsync(\"wh_ahun3lg7bf4e3lohbhni65335u\");"
        - lang: Java
          source: "CheckoutApi api = CheckoutApiImpl.create(sk_XXXX, true, pk_XXXX);\n\napi.webhooksClient().removeWebhook(\"wh_ahun3lg7bf4e3lohbhni65335u\").get();"
        - lang: Node
          source: "import { Checkout } from 'checkout-node-sdk';\n\nconst cko = new Checkout('sk_XXXX');\n\nconst webhook = await cko.webhooks.removeWebhook('wh_ahun3lg7bf4e3lohbhni65335u');"
components:
