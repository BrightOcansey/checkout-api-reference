openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Checkout.com API Reference
  x-logo:
    url: 'https://assets.checkout.com/docs/logos/logo-checkout-api-dark.svg'
    backgroundColor: '#E6E7EC'
    altText: 'Checkout.com API logo'
  contact:
    name: Checkout.com Support
    url: 'https://checkout.com'
    email: support@checkout.com
  license:
    name: Checkout.com
    url: 'https://checkout.com/api/license/'
  termsOfService: 'https://checkout.com/terms/'
  description: >
    ##  Get started

    Checkout.com provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard <a href="https://www.checkout.com/docs/four/resources/codes/http-response-codes">HTTP response codes</a>.

    You can consume the APIs directly using your favorite HTTP/REST library.

    We have a testing environment called sandbox, which you can <a href="https://www.checkout.com/get-test-account">sign up for</a> to test API calls without affecting live data.

    # Authentication

    When you sign up for an account, you can authenticate with either Access keys (OAuth 2.0), or Secret API keys.

    Unless explicitly stated, all endpoints require authentication using either your Access or Secret API Keys. Public keys should only be used in JavaScript or native applications.

    - <b>Client-side authentication</b>. Use your [public key](#section/Authentication/ApiPublicKey) for client-side authentication. It only has access to a limited set of our APIs – mostly those called as part of your payment environment.

    - <b>Server-to-server authentication</b>. Use your [secret key](#section/Authentication/ApiSecretKey) or [OAuth](#section/Authentication/OAuth) for server-to-server communication. Support for API keys depends on the endpoint.

    Never share your OAuth credentials, API keys, or access tokens. Keep them guarded and secure.

    # Changelog

      | Date       | Description of change                                                         |
      | ---------- | ----------------------------------------------------------------------------- |
      | 2022/06/29 | Updated Authentication content.                                               |
      | 2022/03/16 | Added the `scheme_local` to source for CoBrand payments.                      |
      | 2022/02/07 | Added the `preferred_scheme` to Processing to support CoBrand payments.       |
      | 2022/02/02 | Adds `active` property for workflows                                          |
      | 2022/01/26 | Update code samples for Java.                                                 |
      | 2022/01/25 | Update code samples for C#.                                                   |
      | 2022/01/19 | Added test a workflow endpoint.                                               |
      | 2022/01/13 | Update code samples for Node JS.                                              |
      | 2021/11/29 | Increase max length of the NAS `success_url` and `failure_url` fields of the payment request (both from 255 to 1024).|
      | 2021/11/11 | Added `3ds.challenge_indicator` to card payment requests.                     |
      | 2021/11/03 | Adds `identification` object under parent `sender` object in payment request. |
      | 2021/10/18 | Added the `marketplaces.sub-entities` object to support split payments.       |

servers:
  - url: https://api.sandbox.checkout.com
    description: Sandbox API
  - url: https://api.checkout.com
    description: Live API
tags:
  - name: Access
    description: Create an access token to begin using our APIs.
  - name: Payments
    description: Process and manage payments from a variety of sources and to various destinations all within one integration.
  - name: Payment Links
    description: Create a Payment Link to accept and process payment details.
  - name: Hosted Payments Page
    description: Create a Hosted Payments Page to accept and process payment details.
  # - name: Sources
  #   description: Create a payment source for a customer that you can use for one or more payments.
  - name: Tokens
    description: Create a token that represents a card's details that you can later use to request a payment, without you having to process or store any sensitive information.
  - name: Instruments
    description: Create and manage your card and bank account payment instruments.
  - name: Forex
    description: Checkout.com Foreign Exchange services
  - name: Disputes
    description: Keep track of and act on your open disputes (also known as chargebacks) to submit the best possible response.
  - name: Platforms
    description: Manage all your sub-entities (also known as sub-merchants) through one integration, globally.
  - name: Sessions
    description: Use Sessions to authenticate transactions with 3D Secure (3DS) and comply with Strong Customer Authentication (SCA) requirements.
  - name: Workflows
    description: Use Workflows to start receiving webhook notifications for your payments, disputes, and sub-entities.
  - name: Risk
    description: Evaluate the risk of a transaction at the pre-authentication and pre-capture stages of the payment process.
  - name: Apple Pay
    description: Manage your Apple Pay certificates in order to process payments via Apple Pay.
  - name: Transfers
    description: Transfer funds while managing the entities to transfer money to recoup funds from a seller, return money from a refund or to make up the difference when running a promotion.
  - name: Balances
    description: View balances for currency accounts belonging to an entity.

  # - name: Files
  #   description: |
  #     Upload files to be used as input to other APIs

x-tagGroups:
  - name: Set up
    tags:
      - Access
  - name: Handle payments and payouts
    tags:
      - Payments
      - Payment Links
      - Hosted Payments Page
      - Forex
      - Apple Pay
      - Transfers
      - Balances
  - name: Stored payment details
    tags:
      - Tokens
      - Instruments
      - Customers
  - name: Risk management
    tags:
      - Sessions
      - Disputes
      - Risk
  - name: Notifications
    tags:
      - Workflows
  - name: Platforms
    tags:
      - Platforms
paths:
  /:
    servers:
      - url: https://files.checkout.com/files
        description: Production server
      - url: https://files.sandbox.checkout.com/files
        description: Sandbox server
    post:
      tags:
        - Platforms
      security:
        - OAuth:
            - files
      summary: Upload a file
      operationId: uploadAFile
      description: >-
        Our Platforms solution provides an easy way to upload identity documentation required for full due diligence. Please <strong>note</strong> that the sub-domain – https://files.checkout.com – is slightly different to Checkout.com's other endpoints. <br><br>Read the <a href="https://checkout.com/docs/four/platforms/onboarding/api/full/upload-a-file" target="_blank">documentation</a> for more information.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PlatformsFile'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformsFileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
  /accounts/entities:
    post:
      description: |
        Onboard a sub-entity so they can start receiving payments. Once created, Checkout.com will run due diligence checks.
        If the checks are successful, we'll enable payment capabilities for that sub-entity and they will start receiving payments.
      summary: Onboard a sub-entity
      operationId: onboardSubEntity
      requestBody:
        required: true
        description: The sub-entity to be onboarded.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityCreateRequest'
            examples:
              Company:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  company:
                    business_registration_number: '452349600005'
                    legal_name: 'Super Hero Masks Inc.'
                    trading_name: 'Super Hero Masks'
                    principal_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    representatives:
                      - first_name: 'John'
                        last_name: 'Doe'
                        address:
                          address_line1: '90 Tottenham Court Road'
                          city: 'London'
                          zip: 'W1T4TJ'
                          country: 'GB'
                        identification:
                          national_id_number: 'AB123456C'
                        phone:
                          number: '2345678910'
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  reference: superhero1234
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  individual:
                    first_name: 'John'
                    last_name: 'Doe'
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    national_tax_id: 'TAX123456'
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: 'AB123456C'
      security:
        - OAuth:
            - accounts
      responses:
        '201':
          description: Sub-entity onboarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '409':
          description: Sub-entity onboarding request conflicted with an existing sub-entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityLinks'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Platforms
  /accounts/entities/{id}:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
    
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    get:
      description: Use this endpoint to retrieve a sub-entity and its full details.
      summary: Get sub-entity details
      operationId: getSubEntityDetails
      security:
        - OAuth:
            - accounts
      responses:
        '200':
          description: Sub-entity retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityExtendedResponse'
              examples:
                Company:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    status: pending
                    contact_details:
                      phone:
                        number: '2345678910'
                    profile:
                      urls:
                        - https://www.superheroexample.com
                      mccs:
                        - '5669'
                    company:
                      business_registration_number: '452349600005'
                      legal_name: Super Hero Masks Inc.
                      trading_name: Super Hero Masks
                      principal_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      representatives:
                        - first_name: John
                          middle_name:
                          last_name: Doe
                          address:
                            address_line1: 90 Tottenham Court Road
                            city: London
                            zip: W1T4TJ
                            country: GB
                          identification:
                            national_id_number: 'AB123456C'
                            document:
                              type: 'driving_license'
                              front: 'file_wxglze3wwywujg4nna5fb7ldli'
                              back: 'file_adglze3wwywujg4nna5fb7l1sg'
                          phone:
                            number: '2345678910'
                          date_of_birth:
                            day: 05
                            month: 06
                            year: 1995
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/accounts/entities/ent_wxglze3wwywujg4nna5fb7ldli
                Individual:
                  value:
                    id: ent_wxglze3wwywujg4nna5fb7ldli
                    reference: superhero1234
                    capabilities:
                      payments:
                        enabled: false
                      payouts:
                        enabled: false
                    contact_details:
                      phone:
                        number: '2345678910'
                    profile:
                      urls:
                        - https://www.superheroexample.com
                      mccs:
                        - '5669'
                    individual:
                      first_name: John
                      middle_name: Paul
                      last_name: Doe
                      trading_name: Super Hero Masks
                      legal_name: John Paul Doe
                      national_tax_id: '1234567'
                      registered_address:
                        address_line1: 90 Tottenham Court Road
                        city: London
                        zip: W1T4TJ
                        country: GB
                      date_of_birth:
                        day: 05
                        month: 06
                        year: 1995
                      identification:
                        national_id_number: 'AB123456C'
                        document:
                          type: 'driving_license'
                          front: 'file_wxglze3wwywujg4nna5fb7ldli'
                          back: 'file_adglze3wwywujg4nna5fb7l1sg'
                    instruments:
                      - id: src_hmnkhxlshf3uhljow7zt7sf2cq
                        label: Peter's Personal Account
                    _links:
                      self:
                        href: https://api.checkout.com/accounts/entities/ent_wxglze3wwywujg4nna5fb7ldli
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Platforms
    put:
      description: |
        You can update all fields under the Contact details, Profile, and Company objects. You can also add <strong>identification</strong> information to complete due diligence requirements.<br><br>
        <strong>Note:</strong> when you update a sub-entity we may conduct further due diligence checks when necessary. During these checks, your payment capabilities will remain the same.
      summary: Update sub-entity details
      requestBody:
        required: true
        description: The sub-entity to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityUpdateRequest'
            examples:
              Company:
                value:
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  company:
                    business_registration_number: '452349600005'
                    legal_name: 'Super Hero Masks Inc.'
                    trading_name: 'Super Hero Masks'
                    principal_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    representatives:
                      - first_name: 'John'
                        last_name: 'Doe'
                        address:
                          address_line1: '90 Tottenham Court Road'
                          city: 'London'
                          zip: 'W1T4TJ'
                          country: 'GB'
                        identification:
                          national_id_number: 'AB123456C'
                        phone:
                          number: '2345678910'
                        date_of_birth:
                          day: 05
                          month: 06
                          year: 1995
              Individual:
                value:
                  contact_details:
                    phone:
                      number: '2345678910'
                  profile:
                    urls:
                      - https://www.superheroexample.com
                    mccs:
                      - '5669'
                  individual:
                    first_name: 'John'
                    last_name: 'Doe'
                    trading_name: "John's Super Hero Masks"
                    registered_address:
                      address_line1: '90 Tottenham Court Road'
                      city: 'London'
                      zip: 'W1T4TJ'
                      country: 'GB'
                    national_tax_id: 'TAX123456'
                    date_of_birth:
                      day: 05
                      month: 06
                      year: 1995
                    identification:
                      national_id_number: 'AB123456C'
      security:
        - OAuth:
            - accounts
      responses:
        '200':
          description: Sub-entity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityBasicResponseWithLinks'
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '401':
          description: Unauthorized
        '404':
          description: Sub-entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Platforms
  /accounts/entities/{id}/instruments:
    parameters:
      - in: path
        name: id
        description: The ID of the sub-entity.
        required: true
        allowEmptyValue: false
        example: ent_w4jelhppmfiufdnatam37wrfc4
        style: simple
        schema:
          type: string
    post:
      description: Create a bank account payment instrument for your sub-entity that you can later use as the destination for their payouts.
      summary: Add a payment instrument
      operationId: addAPaymentInstrument
      requestBody:
        required: true
        description: A JSON payload containing the payment instrument details.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlatformsInstrumentCreateRequest'
            examples:
              BankAccount:
                value:
                  label: Peter's Personal Account
                  type: bank_account
                  account_number: '12345678'
                  bank_code: '050389'
                  currency: GBP
                  country: GB
                  account_holder:
                    first_name: Peter
                    last_name: Parker
                    billing_address:
                      address_line1: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
                  document:
                    type: bank_statement
                    file_id: file_wxglze3wwywujg4nna5fb7ldli
      security:
        - OAuth:
            - accounts
      responses:
        '202':
          description: Instrument creation request accepted
          headers:
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Platforms
  /accounts/entities/{id}/payout-schedules:
    get:
      tags:
        - Platforms
      parameters:
        - in: path
          name: id
          description: The ID of the sub-entity.
          required: true
          allowEmptyValue: false
          example: ent_w4jelhppmfiufdnatam37wrfc4
          style: simple
          schema:
            type: string
      security:
        - OAuth:
            - accounts
      summary: Retrieve a sub-entity's payout schedule
      operationId: getSubEntitysPayoutSchedule
      description: >-
        You can schedule when your sub-entities receive their funds using our <a href="https://checkout.com/docs/four/platforms" target="_blank">Platforms solution</a>. Use this endpoint to retrieve information about a sub-entity's schedule.
      responses:
        '200':
          description: Schedule retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetScheduleResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized.
        '404':
          description: Sub-entity not found, or scheduled payouts are not available to the sub-entity.
        '422':
          description: Invalid data sent.
        '429':
          description: Too many requests.
    
    put:
      tags:
        - Platforms
      security:
        - OAuth:
            - accounts
      summary: Update a sub-entity's payout schedule
      description: >-
        You can schedule when your sub-entities receive their funds using our <a href="https://checkout.com/docs/four/platforms" target="_blank">Platforms solution</a>. Use this endpoint to update a sub-entity's schedule.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScheduleRequest'
      responses:
        '200':
          description: Schedule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityLinks'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '429':
          description: Too many requests
  /applepay/certificates:
    post:
      tags:
        - Apple Pay
      security:
        - ApiPublicKey: [ ]
      summary: Upload a payment processing certificate
      operationId: uploadApplePayCertificate
      description: |
        Upload a payment processing certificate. This will allow you to start processing payments via Apple Pay.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplePayCertificateRequest'
      responses:
        '201':
          description: Certificate uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePayCertificateResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('sk_sbox_XXXXX', {\n	pk: 'pk_sbox_XXXXX',\n});\n\ntry {\n	const apple = await cko.applePay.upload({\n		content: 'XXXXXXX', // make sure you escape the characters\n	});\n} catch (err) {\n	console.log(err.name);\n}"
  /applepay/signing-requests:
    post:
      tags:
        - Apple Pay
      security:
        - ApiPublicKey: [ ]
      summary: Generate a certificate signing request
      operationId: generateApplePaySigningRequest
      description: |
        Generate a certificate signing request. You'll need to upload this to your Apple Developer account to download a payment processing certificate.
      responses:
        '200':
          description: Generated signing request successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplePaySigningRequestResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('sk_sbox_XXXXX', {\n	pk: 'pk_sbox_XXXXX',\n});\n\ntry {\n	const apple = await cko.applePay.generate();\n} catch (err) {\n	console.log(err.name);\n}"
  /balances/{id}:
    servers:
      - url: https://balances.checkout.com
        description: Production server
      - url: https://balances.sandbox.checkout.com
        description: Sandbox server
    parameters:
      - $ref: '#/components/parameters/EntityId'
      - $ref: '#/components/parameters/Query'
    get:
      summary: Retrieve entity balances
      operationId: getEntityBalances
      description: Use this endpoint to retrieve balances for each currency account belonging to an entity.
      security:
        - OAuth:
            - accounts
      responses:
        '200':
          description: Balances retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalancesResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '400':
          description: Query format not supported
        '401':
          description: Unauthorized
        '404':
          description: Entity not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Balances
  /connect/token:
    servers:
      - url: https://access.checkout.com
        description: Live API
      - url: https://access.sandbox.checkout.com
        description: Sandbox API
    post:
      summary: Request an access token
      operationId: requestAnAccessToken
      tags:
        - Access
      responses:
        '200':
          description: OK - A successful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: 2YotnFZFEjr1zCsicMWpAA
                  token_type:
                    type: string
                    example: example
                  expires_in:
                    type: number
                    example: 3600
    
        '400':
          description: Bad request - An unsuccessful access token response as per [RFC6749](https://tools.ietf.org/html/rfc6749#section-4.4.3)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - invalid_request
                      - invalid_client
                      - invalid_grant
                      - unauthorized_client
                      - unsupported_grant_type
                      - invalid_scope
      description: OAuth endpoint to exchange your access key ID and access key secret for an access token.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  enum:
                    - client_credentials
                  example: client_credentials
                client_id:
                  type: string
                  description: 'Access key ID'
                client_secret:
                  type: string
                  description: 'Access key secret'
                scope:
                  type: string
                  description: The access key scope
                  example: gateway
            examples:
              example-1:
                value:
                  grant_type: client_credentials
                  client_id: ack_clckqmmnyfiupexjew7shh5ahe
                  client_secret: Pmg36sDWQ9WxtPR3
      x-code-samples:
        - lang: C#
          source: "// Please refer to https://github.com/checkout/checkout-sdk-net on how to setup the SDK with OAuth\ntry\n{\n    Four.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n        .ClientCredentials(\"client_id\", \"client_secret\")\n        .Scopes(FourOAuthScope.Files, FourOAuthScope.Flow, FourOAuthScope.Fx, FourOAuthScope.Gateway,\n            FourOAuthScope.Marketplace, FourOAuthScope.SessionsApp, FourOAuthScope.SessionsBrowser,\n            FourOAuthScope.Vault, FourOAuthScope.PayoutsBankDetails) // more scopes available\n        .Environment(Environment.Sandbox)\n        .FilesEnvironment(Environment.Sandbox)\n        .Build();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: cURL
          source: "curl --location --request POST 'https://access.checkout.com/connect/token'\n  --header 'Content-Type: application/x-www-form-urlencoded'\n  --header 'Authorization: Basic dGVzdC1hY2Nlc3Mta2V5LWlkOnRlc3QtYWNjZXNzLWtleS1zZWNyZXQ='\n  --data-urlencode 'grant_type=client_credentials'\n  --data-urlencode 'scope=gateway'"
        - lang: Java
          source: "// Please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.FourOAuthScope;\nimport com.checkout.four.CheckoutApi;\n\n// SDK instantiation for OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES, FourOAuthScope.FLOW, FourOAuthScope.FX, FourOAuthScope.GATEWAY,\n        FourOAuthScope.MARKETPLACE, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER,\n        FourOAuthScope.VAULT, FourOAuthScope.PAYOUTS_BANK_DETAILS) // more scopes available\n    .build();"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nconst cko = new Checkout();\n\ntry {\n	const access_token = await cko.access.request({\n		grant_type: 'client_credentials',\n		client_id: 'ack_XXXX',\n		client_secret: 'XXXXX',\n		scope: 'gateway',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Files, FourOAuthScope::$Flow, FourOAuthScope::$Fx, FourOAuthScope::$Gateway,\n    FourOAuthScope::$Marketplace, FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser,\n    FourOAuthScope::$Vault, FourOAuthScope::$PayoutsBankDetails]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();"
        - lang: Python
          source: "# please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# SDK instantiation for OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .scopes([OAuthScopes.GATEWAY, OAuthScopes.VAULT, OAuthScopes.PAYOUTS_BANK_DETAILS,\n             OAuthScopes.SESSIONS_APP, OAuthScopes.SESSIONS_BROWSER, OAuthScopes.FX, OAuthScopes.MARKETPLACE,\n             OAuthScopes.FILES, OAuthScopes.TRANSFERS, OAuthScopes.BALANCES_VIEW]) \\\n    .build()"
  /customers:
    post:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: []
      summary: Create a customer
      operationId: createCustomer
      description: >
        <a href="https://www.checkout.com/docs/four/payments/store-payment-details/customers" target="_blank">Store a customer's details in a customer object to reuse in future payments</a>. When creating a customer, you can link payment instruments – the customer `id` returned can be passed as a source when making a payment.
        <br/><br>
        **NOTE:** Specify a `default` instrument, otherwise the `instruments` array will not be saved on creation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreCustomerRequest'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreCustomerResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Four.CustomerRequest;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone\n    {\n        CountryCode = \"1\",\n        Number = \"4155552671\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    IdResponse response = await api.CustomersClient().Create(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.IdResponse;\nimport com.checkout.customers.four.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCustomerRequest request = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .instruments(Arrays.asList(\"instrument_id_1\", \"instrument_id_2\"))\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    IdResponse response = api.customersClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.create({\n		email: 'JohnTest@test.com',\n		name: 'John Test',\n		phone: {\n			country_code: '+1',\n			number: '4155552671',\n		},\n		metadata: {\n			coupon_code: 'NY2018',\n			partner_id: 123989,\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Customers\\Four\\CustomerRequest;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$request = new CustomerRequest();\n$request->email = \"email@docs.checkout.com\";\n$request->name = \"name\";\n$request->phone = $phone;\n$request->instruments = [\"instrument_id_1\", \"instrument_id_2\"];\n\ntry {\n    $response = $api->getCustomersClient()->create($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone, CustomerRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\nrequest = CustomerRequest()\nrequest.email = 'email@docs.checkout.com'\nrequest.name = 'Name'\nrequest.phone = phone\nrequest.instruments = ['instrument_id_1', 'instrument_id_2']\n\ntry:\n    response = api.customers.create(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /customers/{identifier}:
    get:
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      tags:
        - Customers
      summary: Get customer details
      operationId: getCustomerDetails
      description: Returns the details of a customer and their payment instruments.
      parameters:
        - in: path
          name: identifier
          required: true
          description: The customer's ID or email
          schema:
            type: string
            properties:
              id:
                type: string
                pattern: "^(cus)_(\\w{26})$"
              email:
                type: string
                format: email
                maxLength: 255
            additionalProperties: false
            oneOf:
              - required: [ id ]
              - required: [ email ]
      responses:
        '200':
          description: Customer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCustomerResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Customers;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    CustomerDetailsResponse response = await api.CustomersClient().Get(\"customer_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.customers.four.CustomerResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    CustomerResponse response = api.customersClient().get(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.get('cus_2tvaccfvs3lulevzg42vgyvtdq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getCustomersClient()->get(\"customer_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.customers.get('customer_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    patch:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      summary: Update customer details
      description: Update the details of a customer and link payment instruments to them.
      parameters:
        - in: path
          name: identifier
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          required: true
          description: The customer's ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCustomerDetailsRequest'
      responses:
        '204':
          description: Customer updated successfully
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Customer not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing CustomerRequest = Checkout.Customers.Four.CustomerRequest;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCustomerRequest request = new CustomerRequest\n{\n    Email = \"email@docs.checkout.com\",\n    Name = \"FirstName LastName\",\n    Phone = new Phone\n    {\n        CountryCode = \"1\",\n        Number = \"4155552671\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    await api.CustomersClient().Update(\"customer_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\n\n\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Phone;\nimport com.checkout.customers.four.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCustomerRequest customerRequest = CustomerRequest.builder()\n    .email(\"email@docs.checkout.com\")\n    .name(\"name\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"4155552671\").build())\n    .instruments(Arrays.asList(\"instrument_id_1\", \"instrument_id_2\"))\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    api.customersClient().update(\"customer_id\", customerRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.update('cus_2tvaccfvs3lulevzg42vgyvtdq', {\n		name: 'James Bond',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$request = new CustomerRequest();\n$request->email = \"email@docs.checkout.com\";\n$request->name = \"name\";\n$request->phone = $phone;\n$request->instruments = [\"instrument_id_1\", \"instrument_id_2\"];\n\ntry {\n    $api->getCustomersClient()->update(\"customer_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone\nfrom checkout_sdk.customers.customers import CustomerRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\nrequest = CustomerRequest()\nrequest.email = 'email@docs.checkout.com'\nrequest.name = 'Name'\nrequest.phone = phone\nrequest.instruments = ['instrument_id_1', 'instrument_id_2']\n\ntry:\n    response = api.customers.update('customer_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
    delete:
      tags:
        - Customers
      security:
        - OAuth:
            - vault
            - vault:customers
        - ApiSecretKey: [ ]
      summary: Delete a customer
      description: Delete a customer and all of their linked payment instruments.
      parameters:
        - in: path
          name: identifier
          required: true
          schema:
            type: string
            pattern: "^(cus)_(\\w{26})$"
          description: The customer's ID
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Customer not found or not associated with client
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Vault)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.CustomersClient().Delete(\"customer_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    api.customersClient().delete(\"customer_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const customerResponse = await cko.customers.delete('cus_2tvaccfvs3lulevzg42vgyvtdq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $api->getCustomersClient()->delete(\"customer_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.customers.delete('customer_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /disputes:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get disputes
      operationId: getDisputes
      description: >-
        Returns a list of all disputes against your business. The results will be
        returned in reverse chronological order, showing the last modified dispute
        (for example, where you've recently added a piece of evidence) first. You
        can use the optional parameters below to skip or limit results.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 250
            default: 50
          required: false
          description: The numbers of results to return
        - in: query
          name: skip
          schema:
            type: integer
            minimum: 0
            default: 0
          required: false
          description: The number of results to skip
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          required: false
          description: The date and time from which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          required: false
          description: The date and time until which to filter disputes, based on the dispute's
            `last_update` field
        - in: query
          name: id
          schema:
            type: string
          required: false
          description: The unique identifier of the dispute
        - in: query
          name: entity_ids
          schema:
            type: string
            example: 'ent_wxglze3wwywujg4nna5fb7ldli,ent_vkb5zcy64zoe3cwfmaqvqyqyku'
          required: false
          description: One or more comma-separated client entities. This works like a logical *OR*
            operator
        - in: query
          name: sub_entity_ids
          schema:
            type: string
            example: 'ent_uzm3uxtssvmuxnyrfdffcyjxeu,ent_hy5wtzwzeuwefmsnjtdhw4scfi'
          required: false
          description: One or more comma-separated sub-entities. This works like a logical *OR*
            operator
        - in: query
          name: statuses
          schema:
            type: string
            example: 'evidence_required,evidence_under_review'
          required: false
          description: One or more comma-separated statuses. This works like a logical *OR*
            operator
        - in: query
          name: payment_id
          schema:
            type: string
          required: false
          description: The unique identifier of the payment
        - in: query
          name: payment_reference
          schema:
            type: string
          required: false
          description: An optional reference (such as an order ID) that you can use later to identify the payment. Previously known as `TrackId`
        - in: query
          name: payment_arn
          schema:
            type: string
          required: false
          description: The acquirer reference number (ARN) that you can use to query the
            issuing bank
        - in: query
          name: payment_mcc
          schema:
            type: string
          required: false
          description: The merchant category code (MCC) of the payment (ISO 18245)
        - in: query
          name: this_channel_only
          schema:
            type: boolean
          required: false
          description:
            If `true`, only returns disputes of the specific channel that the secret key is associated with. Otherwise, returns all disputes for that
            business
      responses:
        '200':
          description: Disputes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisputePaged'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable paging
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagingError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nDisputesQueryFilter request = new DisputesQueryFilter\n{\n    Limit = 250,\n    To = DateTime.Now,\n};\n\ntry\n{\n    DisputesQueryResponse response = await api.DisputesClient().Query(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.DisputeStatus;\nimport com.checkout.disputes.four.DisputesQueryFilter;\nimport com.checkout.disputes.four.DisputesQueryResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\nDisputesQueryFilter query = DisputesQueryFilter.builder()\n    .paymentId(\"payment_id\")\n    .from(LocalDateTime.now().minusYears(2).toInstant(ZoneOffset.UTC))\n    .to(Instant.now())\n    .paymentArn(\"payment_arn\")\n    .paymentReference(\"payment_reference\")\n    .statuses(String.join(\",\", DisputeStatus.EVIDENCE_UNDER_REVIEW.getStatus(), DisputeStatus.ARBITRATION_WON.getStatus()))\n    .limit(10)\n    .skip(5)\n    .build();\n\ntry {\n    DisputesQueryResponse response = api.disputesClient().query(query).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const disputes = await cko.disputes.get({\n		limit: 5,\n		id: 'dsp_bc94ebda8d275i461229',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$query = new DisputesQueryFilter();\n$query->payment_id = \"payment_id\";\n$query->payment_arn = \"payment_arn\";\n$query->payment_reference = \"payment_reference\";\n$query->statuses = \"comma,separated,list,statuses\";\n$query->limit = 10;\n$query->skip = 5;\n$query->to = new DateTime(); // UTC, now\n\n$from = new DateTime();\n$from->setTimezone(new DateTimeZone(\"europe/madrid\"));\n$from->sub(new DateInterval(\"P1Y\"));\n$query->from = $from;\n\ntry {\n    $response = $api->getDisputesClient()->query($query);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nfrom datetime import timezone, datetime\n\nfrom dateutil.relativedelta import relativedelta\n\nimport checkout_sdk\nfrom checkout_sdk.disputes.disputes import DisputesQueryFilter\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.DISPUTES]) \\\n    .build()\n\nquery = DisputesQueryFilter()\nnow = datetime.now(timezone.utc)\nquery.from_ = now - relativedelta(months=6)\nquery.to = now\nquery.payment_arn = 'payment_arn'\nquery.payment_reference = 'payment_reference'\nquery.limit = 10\nquery.skip = 5\n\ntry:\n    response = api.disputes.query(query)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /disputes/{dispute_id}:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get dispute details
      operationId: getDisputeDetails
      description: Returns all the details of a dispute using the dispute identifier.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dispute'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    DisputeDetailsResponse response = await api.DisputesClient().GetDisputeDetails(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeDetailsResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    DisputeDetailsResponse response = api.disputesClient().getDisputeDetails(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const disputeDetails = await cko.disputes.getDetails('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getDisputesClient()->getDisputeDetails(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.DISPUTES]) \\\n    .build()\n\ntry:\n    response = api.disputes.get_dispute_details('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /disputes/{dispute_id}/accept:
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:accept
        - ApiSecretKey: [ ]
      summary: Accept dispute
      operationId: acceptDispute
      description: >-
        If a dispute is legitimate, you can choose to accept it. This will close it
        for you and remove it from your list of open disputes. There are no further
        financial implications.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute accepted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.DisputesClient().Accept(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    api.disputesClient().accept(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const accept = await cko.disputes.accept('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $api->getDisputesClient()->accept(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.DISPUTES]) \\\n    .build()\n\ntry:\n    response = api.disputes.accept('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization\n"
  /disputes/{dispute_id}/evidence:
    put:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        - ApiSecretKey: [ ]
      summary: Provide dispute evidence
      operationId: provideDisputeEvidence
      description: >
        Adds supporting evidence to a dispute. Before using this endpoint, you first
        need to [upload your files](#tag/Disputes/paths/~1files/post) using the file
        uploader. You will receive a file id (prefixed by `file_`) which you can
        then use in your request.
        Note that this only attaches the evidence to the dispute, it does not send
        it to us. Once ready, you will need to submit it.
        **You must provide at least one evidence type in the body of your request.**
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProvideEvidenceRequest'
      responses:
        '204':
          description: Dispute evidence provided successfully
        '400':
          description: Unprocessable
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
        '422':
          description: Unprocessable entity
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nDisputeEvidenceRequest request = new DisputeEvidenceRequest()\n{\n    ProofOfDeliveryOrServiceFile = \"file_xxxxxx\",\n    ProofOfDeliveryOrServiceText = \"proof of delivery or service text\",\n    InvoiceOrReceiptFile = \"file_xxxxxx\",\n    InvoiceOrReceiptText = \"Copy of the invoice\",\n    CustomerCommunicationFile = \"file_xxxxxx\",\n    CustomerCommunicationText = \"Copy of an email exchange with the cardholder\",\n    AdditionalEvidenceFile = \"file_xxxxxx\",\n    AdditionalEvidenceText = \"Scanned document\"\n};\n\ntry\n{\n    await api.DisputesClient().PutEvidence(\"disputes_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeEvidenceRequest;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\nDisputeEvidenceRequest evidenceRequest = DisputeEvidenceRequest.builder()\n    .proofOfDeliveryOrServiceFile(\"file_id\")\n    .proofOfDeliveryOrServiceText(\"proof of delivery or service text\")\n    .invoiceOrReceiptFile(\"file_id\")\n    .invoiceOrReceiptText(\"Copy of the invoice\")\n    .invoiceShowingDistinctTransactionsFile(\"file_id\")\n    .invoiceShowingDistinctTransactionsText(\"Copy of invoice #1244 showing two transactions\")\n    .customerCommunicationFile(\"file_id\")\n    .customerCommunicationText(\"Copy of an email exchange with the cardholder\")\n    .refundOrCancellationPolicyFile(\"file_id\")\n    .refundOrCancellationPolicyText(\"Copy of the refund policy\")\n    .recurringTransactionAgreementFile(\"file_id\")\n    .recurringTransactionAgreementText(\"Copy of the recurring transaction agreement\")\n    .additionalEvidenceFile(\"file_id\")\n    .additionalEvidenceText(\"Scanned document\")\n    .proofOfDeliveryOrServiceDateFile(\"file_id\")\n    .proofOfDeliveryOrServiceDateText(\"Copy of the customer receipt showing the merchandise was delivered on 2018-12-20\")\n    .build();\n\ntry {\n    api.disputesClient().putEvidence(\"dispute_id\", evidenceRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const evidence = await cko.disputes.provideEvidence('dsp_bc94ebda8d275i461229', {\n		proof_of_delivery_or_service_text: 'http://checkout.com/document.pdf',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Disputes\\DisputeEvidenceRequest;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new DisputeEvidenceRequest();\n$request->proof_of_delivery_or_service_file = \"file_id\";\n$request->proof_of_delivery_or_service_text = \"proof of delivery or service text\";\n$request->invoice_or_receipt_file = \"file_id\";\n$request->invoice_or_receipt_text = \"Copy of the invoice\";\n$request->customer_communication_file = \"file_id\";\n$request->customer_communication_text = \"Copy of an email exchange with the cardholder\";\n$request->additional_evidence_file = \"file_id\";\n$request->additional_evidence_text = \"Scanned document\";\n\ntry {\n    $api->getDisputesClient()->putEvidence(\"dispute_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.disputes.disputes import DisputeEvidenceRequest\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([]) \\\n    .build()\n\nevidence_request = DisputeEvidenceRequest()\nevidence_request.proof_of_delivery_or_service_file = 'proof_of_delivery_or_service_file'\nevidence_request.proof_of_delivery_or_service_text = 'proof of delivery or service text'\nevidence_request.invoice_or_receipt_file = 'invoice_or_receipt_file'\nevidence_request.invoice_or_receipt_text = 'invoice_or_receipt_text'\nevidence_request.customer_communication_file = 'customer_communication_file'\nevidence_request.customer_communication_text = 'customer_communication_text'\nevidence_request.additional_evidence_file = 'additional_evidence_file'\nevidence_request.additional_evidence_text = 'additional_evidence_text'\n\ntry:\n    response = api.disputes.put_evidence('dispute_id', evidence_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        # - ApiKey: []
      summary: Get dispute evidence
      description: >
        Retrieves a list of the evidence submitted in response to a specific
        dispute.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '200':
          description: Dispute evidence retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evidence'
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Disputes;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    DisputeEvidenceResponse response = await api.DisputesClient().GetEvidence(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.disputes.four.DisputeEvidenceResponse;\nimport com.checkout.four.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    DisputeEvidenceResponse response = api.disputesClient().getEvidence(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const getEvidence = await cko.disputes.getEvidence('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getDisputesClient()->getEvidence(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.DISPUTES]) \\\n    .build()\n\ntry:\n    response = api.disputes.get_evidence('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        # - ApiKey: []
      summary: Submit dispute evidence
      description: >-
        With this final request, you can submit the evidence that you have
        previously provided. Make sure you have provided all the relevant
        information before using this request. You will not be able to amend your
        evidence once you have submitted it.
      parameters:
        - in: path
          name: dispute_id
          schema:
            type: string
            pattern: '^(dsp)_(\w{26})$'
          required: true
          description: The dispute identifier
      responses:
        '204':
          description: Dispute evidence submitted successfully
        '401':
          description: Unauthorized
        '404':
          description: Dispute not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.DisputesClient().SubmitEvidence(\"disputes_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.DISPUTES) // more scopes available\n    .build();\n\ntry {\n    api.disputesClient().submitEvidence(\"dispute_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const submitEvidence = await cko.disputes.submit('dsp_bc94ebda8d275i461229');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Disputes]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $api->getDisputesClient()->submitEvidence(\"dispute_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([]) \\\n    .build()\n\ntry:\n    response = api.disputes.submit_evidence('dispute_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /files:
    post:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:provide-evidence
        - ApiSecretKey: [ ]
      summary: Upload file
      operationId: uploadFile
      description: >-
        Upload a file to use as evidence in a dispute. Your file must be in either
        JPEG/JPG, PNG or PDF format, and be no larger than 4MB.
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileUploadResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Unprocessable
        '429':
          description: Too many requests
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IdResponse response = await api.DisputesClient().SubmitFile(\"file_path\", \"dispute_evidence\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FilePurpose;\nimport com.checkout.common.FileRequest;\nimport com.checkout.common.IdResponse;\nimport com.checkout.four.CheckoutApi;\nimport org.apache.http.entity.ContentType;\nimport java.io.File;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES) // more scopes available\n    .build();\n\nFile file = new File(\"evidence.pdf\");\nFileRequest fileRequest = FileRequest.builder()\n    .file(file)\n    .contentType(ContentType.create(\"application/pdf\"))\n    .purpose(FilePurpose.DISPUTE_EVIDENCE)\n    .build();\n\ntry {\n    IdResponse response = api.disputesClient().uploadFile(fileRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const file = await cko.files.upload({\n		path: fs.createReadStream('./test/files/evidence.jpg'),\n		purpose: 'dispute_evidence',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Files\\FileRequest;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Files]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$fileRequest = new FileRequest();\n$fileRequest->file = \"path/to/file\"\n$fileRequest->purpose = \"dispute_evidence\";\n\ntry {\n    $response = $api->getDisputesClient()->uploadFile($fileRequest);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.files.files import FileRequest\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.DISPUTES]) \\\n    .build()\n\nrequest = FileRequest()\nrequest.file = 'path/to/file'\nrequest.purpose = 'dispute_evidence'\n\ntry:\n    response = api.disputes.upload_file(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /files/{file_id}:
    get:
      tags:
        - Disputes
      security:
        - OAuth:
            - disputes
            - disputes:view
        - ApiSecretKey: [ ]
      summary: Get file information
      operationId: getFileInformation
      description: Retrieve information about a file that was previously uploaded.
      parameters:
        - in: path
          name: file_id
          schema:
            type: string
          required: true
          description: The file identifier. It is always prefixed by `file_`.
      responses:
        '200':
          description: File information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileResult'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: File not found
        '429':
          description: Too many requests or duplicate request detected
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Files;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Disputes)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    FileDetailsResponse response = await api.DisputesClient().GetFileDetails(\"file_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.FileDetailsResponse;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FILES) // more scopes available\n    .build();\n\ntry {\n    FileDetailsResponse response = api.disputesClient().getFileDetails(\"file_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const getFile = await cko.files.getFile('file_zna32sccqbwevd3ldmejtplbhu');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Files]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getDisputesClient()->getFileDetails(\"file_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FILES]) \\\n    .build()\n\ntry:\n    response = api.disputes.get_file_details('file_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows:
    get:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get all workflows
      description: |
        Get all workflows
      responses:
        '200':
          description: Workflows retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-all-workflows-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetWorkflowsResponse response = await api.WorkflowsClient().GetWorkflows();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.GetWorkflowsResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetWorkflowsResponse response = api.workflowsClient().getWorkflows().get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getAll();\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.get_workflows()\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    post:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Add a workflow
      description: |
        Add a new Flow workflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-workflow-request'
      responses:
        '201':
          description: Workflow added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/add-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\nusing Checkout.Workflows.Four.Actions;\nusing Checkout.Workflows.Four.Actions.Request;\nusing Checkout.Workflows.Four.Conditions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCreateWorkflowRequest request = new CreateWorkflowRequest\n{\n    Name = \"Webhooks workflow\",\n    Conditions = new List<WorkflowConditionRequest>()\n    {\n        new EventWorkflowConditionRequest()\n        {\n            Events = new Dictionary<string, ISet<string>>()\n            {\n                {\n                    \"gateway\", new HashSet<string>()\n                    {\n                        \"payment_approved\",\n                        \"payment_declined\",\n                        \"card_verification_declined\",\n                        \"card_verified\",\n                        \"payment_authorization_incremented\",\n                        \"payment_authorization_increment_declined\",\n                        \"payment_capture_declined\",\n                        \"payment_captured\",\n                        \"payment_refund_declined\",\n                        \"payment_refunded\",\n                        \"payment_void_declined\",\n                        \"payment_voided\"\n                    }\n                },\n                {\n                    \"dispute\", new HashSet<string>()\n                    {\n                        \"dispute_canceled\",\n                        \"dispute_evidence_required\",\n                        \"dispute_expired\",\n                        \"dispute_lost\",\n                        \"dispute_resolved\",\n                        \"dispute_won\"\n                    }\n                }\n            }\n        },\n        new EntityWorkflowConditionRequest()\n        {\n            Entities = new List<string>()\n            {\n                \"ent_xyfdshfudosfdshfdiosfds\",\n                \"ent_fidjosfjdisofdjsifdosfu\"\n            }\n        },\n        new ProcessingChannelWorkflowConditionRequest()\n        {\n            ProcessingChannels = new List<string>()\n            {\n                \"pc_axclravnqf5u5ejkweijnp5zc4\"\n            }\n        }\n    },\n    Actions = new List<WorkflowActionRequest>()\n    {\n        new WebhookWorkflowActionRequest()\n        {\n            Url = \"https://example.com/webhooks\",\n            Headers = new Dictionary<string, string>()\n            {\n                {\"Authorization\", \"70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf\"}\n            },\n            Signature = new WebhookSignature()\n            {\n                Method = \"HMACSHA256\",\n                Key = \"8V8x0dLK%AyD*DNS8JJr\"\n            }\n        }\n    }\n};\n\ntry\n{\n    CreateWorkflowResponse response = await api.WorkflowsClient().CreateWorkflow(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.CreateWorkflowRequest;\nimport com.checkout.workflows.four.CreateWorkflowResponse;\nimport com.checkout.workflows.four.actions.WebhookSignature;\nimport com.checkout.workflows.four.actions.request.WebhookWorkflowActionRequest;\nimport com.checkout.workflows.four.conditions.request.EntityWorkflowConditionRequest;\nimport com.checkout.workflows.four.conditions.request.EventWorkflowConditionRequest;\nimport com.checkout.workflows.four.conditions.request.ProcessingChannelWorkflowConditionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nWebhookWorkflowActionRequest workflowActionRequest = WebhookWorkflowActionRequest.builder()\n    .url(\"https://docs.checkout.com/webhook\")\n    .headers(new HashMap<>())\n    .signature(WebhookSignature.builder().key(\"8V8x0dLK%AyD*DNS8JJr\").method(\"HMACSHA256\").build())\n    .build();\n\nEventWorkflowConditionRequest condition1 = EventWorkflowConditionRequest.builder()\n    .events(new HashMap<>())\n    .build();\n\nEntityWorkflowConditionRequest condition2 = EntityWorkflowConditionRequest.builder()\n    .entities(Collections.singletonList(\"workflow_entity_id\"))\n    .build();\n\nProcessingChannelWorkflowConditionRequest condition3 = ProcessingChannelWorkflowConditionRequest.builder()\n    .processingChannels(Collections.singletonList(\"processing_channel_id\"))\n    .build();\n\nCreateWorkflowRequest request = CreateWorkflowRequest.builder()\n    .name(\"name\")\n    .actions(Collections.singletonList(workflowActionRequest))\n    .conditions(Arrays.asList(condition1, condition2, condition3))\n    .build();\n\ntry {\n    CreateWorkflowResponse response = api.workflowsClient().createWorkflow(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.add({\n		name: 'Webhooks workflow',\n		conditions: [\n			{\n				type: 'event',\n				events: {\n					gateway: ['payment_approved', 'payment_declined'],\n				},\n			},\n			{\n				type: 'entity',\n				entities: ['ent_djigcqx4clmufo2sasgomgpqsq'],\n			},\n			{\n				type: 'processing_channel',\n				processing_channels: ['pc_zs5fqhybzc2e3jmq3efvybybpq'],\n			},\n		],\n		actions: [\n			{\n				type: 'webhook',\n				url: 'https://example.com/webhooks',\n				headers: {\n					Authorization: '70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf',\n				},\n				signature: {\n					method: 'HMACSHA256',\n					key: '8V8x0dLK%AyD*DNS8JJr',\n				},\n			},\n		],\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.workflows.workflows import ProcessingChannelWorkflowConditionRequest, CreateWorkflowRequest, \\\n    WebhookSignature, WebhookWorkflowActionRequest, EntityWorkflowConditionRequest, EventWorkflowConditionRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\nsignature = WebhookSignature()\nsignature.key = 'signature'\nsignature.method = 'HMACSHA256'\n\naction_request = WebhookWorkflowActionRequest()\naction_request.url = 'https://docs.checkout.com/fail'\naction_request.headers = {}\naction_request.signature = signature\n\nentity_condition_request = EntityWorkflowConditionRequest()\nentity_condition_request.entities = ['entity_id']\n\nevent_condition_request = EventWorkflowConditionRequest()\nevent_condition_request.events = {'gateway': ['payment_approved',\n                                              'payment_declined',\n                                              'card_verification_declined',\n                                              'card_verified',\n                                              'payment_authorization_incremented',\n                                              'payment_authorization_increment_declined',\n                                              'payment_capture_declined',\n                                              'payment_captured',\n                                              'payment_refund_declined',\n                                              'payment_refunded',\n                                              'payment_void_declined',\n                                              'payment_voided'],\n                                  'dispute': ['dispute_canceled',\n                                              'dispute_evidence_required',\n                                              'dispute_expired',\n                                              'dispute_lost',\n                                              'dispute_resolved',\n                                              'dispute_won']}\n\nprocessing_channel_condition_request = ProcessingChannelWorkflowConditionRequest()\nprocessing_channel_condition_request.processing_channels = ['processing_channel_id']\n\nrequest = CreateWorkflowRequest()\nrequest.actions = [action_request]\nrequest.conditions = [entity_condition_request, event_condition_request,\n                      processing_channel_condition_request]\nrequest.name = 'Name'\nrequest.active = True\n\ntry:\n    response = api.workflows.create_workflow(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /workflows/{workflowId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get a workflow
      description: |
        Get the details of a workflow
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '200':
          description: Workflow retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetWorkflowResponse response = await api.WorkflowsClient().GetWorkflow(\"workflow_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.GetWorkflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetWorkflowResponse response = api.workflowsClient().getWorkflow(\"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.get('wf_5zm7uccsc6bencaujumvutvfem');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.get_workflow('workflow_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    delete:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Remove a workflow
      description: |
        Removes a workflow so it is no longer being executed.
        Actions of already executed workflows will be still processed.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow removed successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.WorkflowsClient().RemoveWorkflow(\"workflow_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    api.workflowsClient().removeWorkflow(\"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.remove('wf_rou7m32mhmyeblg4xebx5pueoi');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.remove_workflow('workflow_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    patch:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Patch a workflow
      description: |
        Update the name of a workflow.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/patch-workflow-request'
      responses:
        '200':
          description: Workflow updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/patch-workflow-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nUpdateWorkflowRequest request = new UpdateWorkflowRequest {Name = \"workflow_name\"};\n\ntry\n{\n    UpdateWorkflowResponse response = await api.WorkflowsClient().UpdateWorkflow(\"workflow_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.UpdateWorkflowRequest;\nimport com.checkout.workflows.four.UpdateWorkflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nUpdateWorkflowRequest request = UpdateWorkflowRequest.builder()\n    .name(\"new name\")\n    .build();\n\ntry {\n    UpdateWorkflowResponse response = api.workflowsClient().updateWorkflow(\"workflow_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.patch('wf_2i7z3lwdoe5uzmomm7yzrytqdy', {\n		name: 'Webhooks workflow updated',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.workflows.workflows import UpdateWorkflowRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\nrequest = UpdateWorkflowRequest()\nrequest.name = 'New name'\nrequest.active = False\n\ntry:\n    response = api.workflows.update_workflow('workflow_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /workflows/{workflowId}/actions/{workflowActionId}:
    put:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Update a workflow action
      description: |
        Update a workflow action.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
        - in: path
          name: workflowActionId
          schema:
            type: string
            pattern: ^wfa_[a-z0-9]{26}$
          required: true
          description: The workflow action identifier
          example: wfa_d5estuyxzshubhly2wu3hloehi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-update-workflow-action-request'
      responses:
        '200':
          description: Workflow action updated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow or workflow action not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Actions;\nusing Checkout.Workflows.Four.Actions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nWorkflowActionRequest request = new WebhookWorkflowActionRequest()\n{\n    Url = \"https://example.com/webhooks/checkout\",\n    Headers = new Dictionary<string, string>()\n    {\n        {\"Authorization\", \"70ed20ff-ba31-4ea3-b3ef-772f2be1cbdf\"}\n    },\n    Signature = new WebhookSignature()\n    {\n        Method = \"HMACSHA256\",\n        Key = \"public-signing-key\"\n    }\n};\n\ntry\n{\n    await api.WorkflowsClient().UpdateWorkflowAction(\"workflow_id\", \"action_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.actions.WebhookSignature;\nimport com.checkout.workflows.four.actions.request.WebhookWorkflowActionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nWebhookWorkflowActionRequest request = WebhookWorkflowActionRequest.builder()\n    .signature(WebhookSignature.builder().key(\"8V8x0dLK%AyD*DNS8JJr\").method(\"HMACSHA256\").build())\n    .headers(new HashMap<>())\n    .url(\"https://docs.checkout.com/fail\")\n    .build();\n\ntry {\n    api.workflowsClient().updateWorkflowAction(\"workflow_id\", \"action_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.updateAction('wf_2i7z3lwdoe5uzmomm7yzrytqdy', 'wfa_5qxwp7stgcqufj63mkr42xyeqi', {\n		type: 'webhook',\n		url: 'https://example.com/updated',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.workflows.workflows import WebhookWorkflowActionRequest, WebhookSignature\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\nsignature = WebhookSignature()\nsignature.key = '8V8x0dLK%AyD*DNS8JJr'\nsignature.method = 'HMACSHA256'\n\nrequest = WebhookWorkflowActionRequest()\nrequest.url = 'https://docs.checkout.com/fail/fake'\nrequest.signature = signature\n\ntry:\n    response = api.workflows.update_workflow_action('workflow_id', 'action_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /workflows/{workflowId}/conditions/{workflowConditionId}:
    put:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Update a workflow condition
      description: |
        Update a workflow condition.
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
        - in: path
          name: workflowConditionId
          schema:
            type: string
            pattern: ^wfc_[a-z0-9]{26}$
          required: true
          description: The workflow condition identifier
          example: wfc_d5estuyxzshubhly2wu3hloehi
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/add-update-workflow-condition-request'
      responses:
        '200':
          description: Workflow condition updated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow or workflow condition not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Conditions.Request;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nWorkflowConditionRequest request = new EntityWorkflowConditionRequest();\n\ntry\n{\n    await api.WorkflowsClient().UpdateWorkflowCondition(\"workflow_id\", \"condition_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.conditions.request.EventWorkflowConditionRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nEventWorkflowConditionRequest request = EventWorkflowConditionRequest.builder()\n    .events(new HashMap<>())\n    .build();\n\ntry {\n    api.workflowsClient().updateWorkflowCondition(\"workflow_id\", \"condition_id\", request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.updateCondition(\n		'wf_2i7z3lwdoe5uzmomm7yzrytqdy',\n		'wfc_ybu4t6aruwju5l6ymlc67ya5ne',\n		{\n			type: 'event',\n			events: {\n				gateway: ['card_verification_declined', 'card_verified', 'payment_approved'],\n			},\n		}\n	);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.workflows.workflows import EventWorkflowConditionRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\nrequest = EventWorkflowConditionRequest()\nrequest.events = {'gateway': ['card_verified',\n                              'card_verification_declined',\n                              'payment_approved',\n                              'payment_pending',\n                              'payment_declined',\n                              'payment_voided',\n                              'payment_captured',\n                              'payment_refunded'],\n                  'dispute': ['dispute_canceled',\n                              'dispute_evidence_required',\n                              'dispute_expired',\n                              'dispute_lost',\n                              'dispute_resolved',\n                              'dispute_won']}\n\ntry:\n    response = api.workflows.update_workflow_condition('workflow_id', 'condition_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/{workflowId}/test:
    servers:
      - url: https://api.sandbox.checkout.com
        description: Sandbox
    post:
      security:
        - OAuth:
            - flow
            - flow:workflows
      tags:
        - Workflows
      summary: Test a workflow
      description: >
        Validate a workflow in our Sandbox environment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/test-workflow-request'
      parameters:
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z2-7]{26}$
          required: true
          description: The workflow identifier
          example: wf_c7svxlvo2bbuva4f6s3xu4f7wm
      responses:
        '204':
          description: Workflow test initiated
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Workflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    example: 0HLHPN8802NUF:00000003
                  error_type:
                    type: string
                    example: request_invalid
                  error_codes:
                    type: array
                    items:
                      type: string
                      example: event_types_invalid
        '500':
          description: Internal Error
  /workflows/event-types:
    get:
      security:
        - OAuth:
            - flow
            - flow:workflows
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get event types
      description: |
        Get a list of sources and their events for building new workflows
      responses:
        '200':
          description: Event types retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-types-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IList<EventTypesResponse> response = await api.WorkflowsClient().GetEventTypes();\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.EventTypesResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    List<EventTypesResponse> response = api.workflowsClient().getEventTypes().get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getEventTypes();\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.get_event_types()\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/{eventId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:events
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get an event
      description: |
        Get the details of an event
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The event identifier
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '200':
          description: Event retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-event-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Events;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetEventResponse response = await api.WorkflowsClient().GetEvent(\"event_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.GetEventResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    GetEventResponse response = api.workflowsClient().getEvent(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getEvent('evt_hsfxtjwidv6ulah5gdbiqwqnka');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.get_event('event_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/{eventId}/actions/{workflowActionId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:events
            - flow:workflows
        - ApiSecretKey: []
      tags:
        - Workflows
      summary: Get action invocations
      description: |
        Get the details of a workflow action executed for the specified event.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The event identifier
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
        - in: path
          name: workflowActionId
          schema:
            type: string
            pattern: ^wfa_[a-z0-9]{26}$
          required: true
          description: The workflow action identifier
          example: wfa_uzkxpffkvpiu5fe3h5ira7sqpa
      responses:
        '200':
          description: Workflow action retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-invocations-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Event not found
        '500':
          description: Internal Error
  /workflows/events/{eventId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by event
      description: |
        Reflows a past event denoted by the event ID and triggers the actions of any workflows with matching conditions.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The unique identifier for the event to be reflowed.
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().ReflowByEvent(\"event_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowByEvent(\"event_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowByEvent('evt_hsfxtjwidv6ulah5gdbiqwqnka');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.reflow_by_event('event_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/{eventId}/workflow/{workflowId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by event and workflow
      description: |
        Reflows a past event by event ID and workflow ID. Triggers all the actions of a specific event and workflow combination if the event denoted by the event ID matches the workflow conditions.
      parameters:
        - in: path
          name: eventId
          schema:
            type: string
            pattern: ^evt_[a-z0-9]{26}$
          required: true
          description: The unique identifier for the event to be reflowed.
          example: evt_x5zm2po6kimubhlfitgt2mfwgi
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The identifier of the workflow whose actions you want to trigger.
          example: wf_c8zm2po6kimubhlfitgt2mferf
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().ReflowByEventAndWorkflow(\"event_id\", \"workflow_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowByEventAndWorkflow(\"event_id\", \"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowByEventAndWorkflow(\n		'evt_hsfxtjwidv6ulah5gdbiqwqnka',\n		'wf_6p73pesh75vu7fqo6p6exhpe54'\n	);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.reflow_by_event_and_workflow('event_id', 'workflow_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow
      description: |
        Reflow past events attached to multiple event IDs and workflow IDs, or to multiple subject IDs and workflow IDs. If you don't specify any workflow IDs, all matching workflows will be retriggered.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/reflow-events-by-event-and-workflow-ids'
                - $ref: '#/components/schemas/reflow-events-by-subject-and-workflow-ids'
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ids-validation-error'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nReflowRequest request = new ReflowByEventsRequest()\n{\n    Events = new List<string>()\n    {\n        \"evt_lzmo6p0i3612judj754w1ngtil\",\n        \"evt_05z6xuagtti48ajyfbuekg6a0a\"\n    },\n    Workflows = new List<string>()\n    {\n        \"wf_sq8jnqi9i749hhb470bu308uk2\",\n        \"wf_bz91q7i4ks4sr0kasmas2xhp56\"\n\n    }\n};\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().Reflow(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowByEventsRequest;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\nReflowByEventsRequest request = ReflowByEventsRequest.builder()\n    .events(Arrays.asList(\"event_id_1\", \"event_id_2\"))\n    .workflows(Arrays.asList(\"workflow_id_1\", \"workflow_id_2\"))\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflow(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowEventsByEventAndWorkflowIds(\n		['evt_hsfxtjwidv6ulah5gdbiqwqnka'],\n		['wf_6p73pesh75vu7fqo6p6exhpe54']\n	);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.workflows.workflows import ReflowByEventsRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\nrequest = ReflowByEventsRequest()\nrequest.events = ['event_id_1', 'event_id_2']\nrequest.workflows = ['workflow_id_1', 'workflow_id_2']\n\ntry:\n    response = api.workflows.reflow(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /workflows/events/subject/{subjectId}:
    get:
      security:
        - OAuth:
            - flow
            - flow:events
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Get subject events
      description: |
        Get all events that relate to a specific subject
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
          required: true
          description: The event identifier
          example: pay_wlu3wxc26jounofs5iez75qaqa
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subject-events-response'
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '404':
          description: Subject not found
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().ReflowBySubject(\"subject_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.events.SubjectEventsResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    SubjectEventsResponse response = api.workflowsClient().getSubjectEvents(\"subject_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.getSubjectEvents('pay_ymhp72mhubcejmjjwcupzalm5e');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.get_subject_events('subject_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/subject/{subjectId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by subject
      description: |
        Reflows the events associated with a subject ID (for example, a payment ID or a dispute ID) and triggers the actions of any workflows with matching conditions.
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
            pattern: ^[a-z]{3}_[a-z0-9]{26}$
          required: true
          description: The subject identifier (for example, a payment ID or a dispute ID). The events associated with these subjects will be reflowed.
          example: pay_x5zm2po6kimubhlfitgt2mfwgi
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().ReflowBySubject(\"subject_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\n\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowBySubject(\"subject_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowBySubject('pay_ymhp72mhubcejmjjwcupzalm5e');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.reflow_by_subject('subject_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /workflows/events/subject/{subjectId}/workflow/{workflowId}/reflow:
    post:
      security:
        - OAuth:
            - flow
            - flow:reflow
        - ApiSecretKey: [ ]
      tags:
        - Workflows
      summary: Reflow by subject and workflow
      description: |
        Reflows the events associated with a subject ID (for example, a payment ID or a dispute ID) and triggers the actions of the specified workflow if the conditions match.
      parameters:
        - in: path
          name: subjectId
          schema:
            type: string
            pattern: ^[a-z]{3}_[a-z0-9]{26}$
          required: true
          description: The subject identifier (for example, a payment ID or a dispute ID). The events associated with these subjects will be reflowed.
          example: pay_x5zm2po6kimubhlfitgt2mfwgi
        - in: path
          name: workflowId
          schema:
            type: string
            pattern: ^wf_[a-z0-9]{26}$
          required: true
          description: The identifier of the workflow whose actions you want to trigger.
          example: wf_c8zm2po6kimubhlfitgt2mferf
      responses:
        '202':
          description: Event reflow initiated successfully
          headers:
            Cko-Request-Id:
              schema:
                $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              schema:
                $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Events for reflow not found
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Workflows.Four.Reflows;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.FlowWorkflows)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    ReflowResponse response = await api.WorkflowsClient().ReflowBySubjectAndWorkflow(\"subject_id\", \"workflow_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.workflows.four.reflow.ReflowResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FLOW, FourOAuthScope.FLOW_WORKFLOWS, FourOAuthScope.FLOW_EVENTS) // more scopes available\n    .build();\n\ntry {\n    ReflowResponse response = api.workflowsClient().reflowBySubjectAndWorkflow(\"subject_id\", \"workflow_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let workflows = await cko.workflows.reflowBySubjectAndWorkflow(\n		'pay_ymhp72mhubcejmjjwcupzalm5e',\n		'wf_6p73pesh75vu7fqo6p6exhpe54'\n	);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FLOW, OAuthScopes.FLOW_WORKFLOWS, OAuthScopes.FLOW_EVENTS]) \\\n    .build()\n\ntry:\n    response = api.workflows.reflow_by_subject_and_workflow('subject_id', 'workflow_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /forex/quotes:
    post:
      tags:
        - Forex
      security:
        - OAuth:
            - fx
      summary: Request a quote
      operationId: requestAQuote
      description: |
        Request an exchange rate between a source and destination currency pair that will be used to process one or more payouts. You must submit a payout with the FX quote identifier before the quote expires. If the FX quote identifier is omitted from a payout, and the source and destination currencies differ, the current market exchange rate will be used.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuoteRequest'
      responses:
        '201':
          description: Quote created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Forex;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Fx)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nQuoteRequest request = new QuoteRequest()\n{\n    SourceCurrency = Currency.GBP,\n    SourceAmount = 10,\n    DestinationCurrency = Currency.USD,\n    ProcessChannelId = \"pc_abcdefghijklmnopqrstuvwxyz\"\n};\n\ntry\n{\n    QuoteResponse response = await api.ForexClient().RequestQuote(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Currency;\nimport com.checkout.forex.four.QuoteRequest;\nimport com.checkout.forex.four.QuoteResponse;\nimport com.checkout.four.CheckoutApi;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.FX) // more scopes available\n    .build();\n\nQuoteRequest request = QuoteRequest.builder()\n    .sourceCurrency(Currency.GBP)\n    .sourceAmount(30000L)\n    .destinationCurrency(Currency.USD)\n    .processChannelId(\"process_channel_id\")\n    .build();\n\ntry {\n    QuoteResponse response = api.forexClient().requestQuote(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let forex = await cko.forex.request({\n		source_currency: 'GBP',\n		source_amount: 30000,\n		destination_currency: 'USD',\n		processing_channel_id: 'pc_zs5fqhybzc2e3jmq3efvybybpq',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Environment;\nuse Checkout\\Forex\\QuoteRequest;\nuse Checkout\\Four\\FourOAuthScope;\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Fx]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new QuoteRequest();\n$request->source_currency = Currency::$GBP;\n$request->source_amount = 30000;\n$request->destination_currency = Currency::$USD;\n$request->process_channel_id = \"pc_abcdefghijklmnopqrstuvwxyz\";\n\ntry {\n    $response = $api->getForexClient()->requestQuote(request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.enums import Currency\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.forex.forex import QuoteRequest\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.FX]) \\\n    .build()\n\nquote_request = QuoteRequest()\nquote_request.source_currency = Currency.GBP\nquote_request.source_amount = 10\nquote_request.destination_currency = Currency.USD\nquote_request.process_channel_id = 'pc_abcdefghijklmnopqrstuvwxyz'\n\ntry:\n    response = api.forex.request_quote(quote_request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /hosted-payments:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Hosted Payments Page
      summary: Create a Hosted Payments Page session
      operationId: createAHostedPaymentsSession
      description: |
        Create a Hosted Payments Page session and pass through all the payment information, like the amount, currency, country and reference.
    
        To get started with our Hosted Payments Page, contact your Solutions Engineer or integration@checkout.com.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostedPaymentsRequest'
      responses:
        '201':
          description: Created Hosted Payments Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostedPaymentsResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /hosted-payments/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Hosted Payments Page
      summary: Get Hosted Payments Page details
      operationId: getHostedPaymentsPageDetails
      description: |
        Retrieve details about a specific Hosted Payments Page using the ID returned when it was created. In the response, you will see the status of the Hosted Payments Page.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/hosted-payments-page">Hosted Payments Page documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/HostedPaymentId'
      responses:
        '200':
          description: Hosted Payments Page details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetHostedPaymentsResponse'
        '401':
          description: Unauthorized
        '404':
          description: Hosted Payments Page not found
  /instruments:
    post:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Create an instrument
      operationId: createAnInstrument
      description: |
        Create a card or bank account payment instrument to use for future payments and payouts. <br><br>The parameters you need to provide when creating a bank account payment instrument depend on the account's country and currency. See <a href="https://docs.checkout.com/four/bank-payouts/payout-formatting" target="_blank">our docs</a> and the <a href="#tag/Instruments/paths/~1validation~1bank-accounts~1{country}~1{currency}/get">GET endpoint below</a>.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StoreInstrumentRequest'
      responses:
        '201':
          description: Instrument created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StoreInstrumentResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Create;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCreateTokenInstrumentRequest request = new CreateTokenInstrumentRequest\n{\n    Token = \"tok_asoto22g2fsu7prwomy12sgfsa\",\n    AccountHolder = new AccountHolder()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Customer = new CreateCustomerInstrumentRequest()\n    {\n        Email = \"email@docs.checkout.com\",\n        Name = \"FirstName LastName\",\n        Phone = new Phone()\n        {\n            CountryCode = \"1\",\n            Number = \"4155552671\"\n        },\n        Default = true\n    }\n};\n\ntry\n{\n    CreateTokenInstrumentResponse response =\n        await api.InstrumentsClient().Create<CreateTokenInstrumentResponse>(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.AccountHolder;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.create.CreateCustomerInstrumentRequest;\nimport com.checkout.instruments.four.create.CreateInstrumentResponse;\nimport com.checkout.instruments.four.create.CreateInstrumentTokenRequest;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCreateInstrumentTokenRequest request = CreateInstrumentTokenRequest.builder()\n    .token(\"token\")\n    .accountHolder(AccountHolder.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n        .billingAddress(Address.builder()\n            .addressLine1(\"CheckoutSdk.com\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .build())\n    .customer(CreateCustomerInstrumentRequest.builder()\n        .id(\"customer_id\")\n        .build())\n    .build();\n\ntry {\n    CreateInstrumentResponse response = api.instrumentsClient().create(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrument = await cko.instruments.create({\n		// infered type \"token\",\n		token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Four\\AccountHolder;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Instruments\\Four\\Create\\CreateCustomerInstrumentRequest;\nuse Checkout\\Instruments\\Four\\Create\\CreateTokenInstrumentRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$accountHolder = new AccountHolder();\n$accountHolder->first_name = \"John\";\n$accountHolder->last_name = \"Smith\";\n$accountHolder->phone = $phone;\n$accountHolder->billing_address = $address;\n\n$createCustomerInstrumentRequest = new CreateCustomerInstrumentRequest();\n$createCustomerInstrumentRequest->id = \"customer_id\";\n\n$request = new CreateTokenInstrumentRequest();\n$request->token = \"token\";\n$request->account_holder = $accountHolder;\n$request->customer = $createCustomerInstrumentRequest;\n\ntry {\n    $response = $api->getInstrumentsClient()->create($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Address, Phone\nfrom checkout_sdk.common.common_four import AccountHolder\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\nfrom checkout_sdk.instruments.instruments_four import CreateTokenInstrumentRequest, CreateCustomerInstrumentRequest\n\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ncustomer = CreateCustomerInstrumentRequest()\ncustomer.email = 'email@docs.checkout.com'\ncustomer.name = 'Name'\ncustomer.default = True\ncustomer.phone = phone\n\naccount_holder = AccountHolder()\naccount_holder.first_name = 'First'\naccount_holder.last_name = 'Last'\naccount_holder.phone = phone\n\nrequest = CreateTokenInstrumentRequest()\nrequest.token = 'token'\nrequest.account_holder = account_holder\nrequest.customer = customer\n\ntry:\n    response = api.instruments.create(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /instruments/{id}:
    get:
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      tags:
        - Instruments
      summary: Get instrument details
      operationId: getInstrumentDetails
      description: Retrieve the details of a payment instrument.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(src)_(\\w{26})$"
          required: true
          description: The instrument ID
      responses:
        '200':
          description: Instrument retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Instruments.Four.Get;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetInstrumentResponse response = await api.InstrumentsClient().Get(\"instrument_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.get.GetCardInstrumentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    // Or GetBankAccountInstrumentResponse\n    GetCardInstrumentResponse response = (GetCardInstrumentResponse) api.instrumentsClient().get(\"instrument_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrument = await cko.instruments.get('src_udfsqsgpjykutgs26fiejgizau');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getInstrumentsClient()->get(\"instrument_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.instruments.get('instrument_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization\n"
    patch:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Update an instrument
      description: |
        Update the details of a payment instrument.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^(src_)[a-z0-9]{26}$'
          example: src_ubfj2q76miwundwlk72vxt2i7q
          description: The instrument ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstrumentRequest'
      responses:
        '200':
          description: Instrument updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateInstrumentResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal Error
    
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Update;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nUpdateInstrumentRequest request = new UpdateCardInstrumentRequest\n{\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    AccountHolder = new AccountHolder()\n    {\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        BillingAddress = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Customer = new UpdateCustomerRequest()\n    {\n        Id = \"cus_y3oqhf46pyzuxjbcn2giaqnb44\",\n        Default = true\n    }\n};\n\ntry\n{\n    UpdateInstrumentResponse response = await api.InstrumentsClient().Update(\"instrument_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Phone;\nimport com.checkout.common.four.AccountHolder;\nimport com.checkout.common.four.UpdateCustomerRequest;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.update.UpdateInstrumentCardRequest;\nimport com.checkout.instruments.four.update.UpdateInstrumentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nUpdateInstrumentCardRequest updateRequest = UpdateInstrumentCardRequest.builder()\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .name(\"name\")\n    .customer(UpdateCustomerRequest.builder().id(\"customer_id\").defaultCustomer(true).build())\n    .accountHolder(AccountHolder.builder()\n        .firstName(\"FirstName\")\n        .lastName(\"LastName\")\n        .phone(Phone.builder().countryCode(\"+1\").number(\"415 555 2671\").build())\n        .billingAddress(Address.builder()\n            .addressLine1(\"CheckoutSdk.com\")\n            .addressLine2(\"90 Tottenham Court Road\")\n            .city(\"London\")\n            .state(\"London\")\n            .zip(\"W1T 4TJ\")\n            .country(CountryCode.GB)\n            .build())\n        .build())\n    .build();\n\ntry {\n    UpdateInstrumentResponse response = api.instrumentsClient().update(\"instrument_id\", updateRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const instrumentResponse = await cko.instruments.update('src_udfsqsgpjykutgs26fiejgizau', {\n		expiry_year: 2030,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Instruments\\Four\\Update\\UpdateTokenInstrumentRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new UpdateTokenInstrumentRequest();\n$request->token = \"new_token\";\n\ntry {\n    $response = $api->getInstrumentsClient()->update(\"instrument_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Address, Phone\nfrom checkout_sdk.common.common_four import UpdateCustomerRequest, AccountHolder\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\nfrom checkout_sdk.instruments.instruments_four import UpdateCardInstrumentRequest\n\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\naccount_holder = AccountHolder()\naccount_holder.first_name = \"First\"\naccount_holder.last_name = \"Last\"\naccount_holder.phone = phone\naccount_holder.billing_address = address\n\nupdate_customer_request = UpdateCustomerRequest()\nupdate_customer_request.id = \"customer_id\"\nupdate_customer_request.default = True\n\nrequest = UpdateCardInstrumentRequest()\nrequest.name = 'New Name'\nrequest.expiry_year = 2027\nrequest.expiry_month = 10\nrequest.account_holder = account_holder\nrequest.customer = update_customer_request\n\ntry:\n    response = api.instruments.update('instrument_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
    delete:
      tags:
        - Instruments
      security:
        - OAuth:
            - vault
            - vault:instruments
        - ApiSecretKey: [ ]
      summary: Delete an instrument
      description: |
        Delete a payment instrument.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            pattern: '^(src_)[a-z0-9]{26}$'
          example: src_ubfj2q76miwundwlk72vxt2i7q
          description: The ID of the payment instrument to be deleted
      responses:
        '204':
          description: Instrument deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Instrument not found or not associated with client
        '500':
          description: Internal Error
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.VaultInstruments)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.InstrumentsClient().Delete(\"instrument_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    api.instrumentsClient().delete(\"instrumentId\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const deleteOutcome = await cko.instruments.delete(instrument.id);\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $api->getInstrumentsClient()->delete(\"instrument_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.instruments.delete('instrument_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payment-links:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Payment Links
      summary: Create a Payment Link
      operationId: createAPaymentLinkSession
      description: |
        Create a Payment Link and pass through all the payment information, like the amount, currency, country and reference.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLinksRequest'
      responses:
        '201':
          description: Create Payment Link Page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentLinksResponse'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  /payment-links/{id}:
    get:
      security:
        - ApiSecretKey: []
      tags:
        - Payment Links
      summary: Get Payment Link details
      operationId: getPaymentLinkDetails
      description: |
        Retrieve details about a specific Payment Link using its ID returned when the link was created. In the response, you will see the status of the Payment Link.<br><br>
        For more information, see the <a target="_blank" href="https://docs.checkout.com/integrate/payment-links">Payment Links documentation</a>.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            allOf:
              - $ref: '#/components/schemas/PaymentLinkId'
      responses:
        '200':
          description: Payment Link details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPaymentLinkResponse'
        '401':
          description: Unauthorized
        '404':
          description: Payment Link session not found
  /payments:
    post:
      security:
        - OAuth:
            - gateway
            - gateway:payment
        - ApiSecretKey: [ ]
      tags:
        - Payments
      summary: Request a payment or payout
      operationId: requestAPaymentOrPayout
      description: |
        Send a payment or payout.<br><br><b>Note</b>: successful payout requests will always return a 202 response.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PaymentRequest'
                - $ref: '#/components/schemas/BankPayoutRequest'
            examples:
              Payment:
                value:
                  source:
                    type: token
                    token: tok_4gzeau5o2uqubbk6fufs3m7p54
                  amount: 6540
                  currency: USD
                  payment_type: Recurring
                  reference: 'ORD-5023-4E89'
                  description: 'Set of 3 masks'
                  capture: true
                  capture_on: '2019-09-10T10:11:12Z'
                  customer:
                    id: 'cus_udst2tfldj6upmye2reztkmm4i'
                    email: 'brucewayne@gmail.com'
                    name: 'Bruce Wayne'
                  billing_descriptor:
                    name: SUPERHEROES.COM
                    city: GOTHAM
                  shipping:
                    address:
                      address_line1: Checkout.com
                      address_line2: 90 Tottenham Court Road
                      city: London
                      state: London
                      zip: W1T 4TJ
                      country: GB
                    phone:
                      country_code: '+1'
                      number: 415 555 2671
                  3ds:
                    enabled: true
                    attempt_n3d: true
                    eci: '05'
                    cryptogram: AgAAAAAAAIR8CQrXcIhbQAAAAAA=
                    xid: MDAwMDAwMDAwMDAwMDAwMzIyNzY=
                    version: '2.0.1'
                  previous_payment_id: 'pay_fun26akvvjjerahhctaq2uzhu4'
                  risk:
                    enabled: false
                  success_url: 'http://example.com/payments/success'
                  failure_url: 'http://example.com/payments/fail'
                  payment_ip: '90.197.169.245'
                  recipient:
                    dob: '1985-05-15'
                    account_number: '5555554444'
                    zip: W1T
                    last_name: Jones
                  metadata:
                    coupon_code: 'NY2018'
                    partner_id: 123989
              Payout:
                value:
                  source:
                    type: 'currency_account'
                    id: 'ca_y3oqhf46pyzuxjbcn2giaqnb44'
                  destination:
                    type: 'id'
                    id: 'src_gsd2agaqd2sernz5tpcfv555nq'
                  amount: 1000
                  currency: GBP
                  reference: 'PO-215-5721'
                  billing_descriptor:
                    reference: 'Withdrawal'
                  sender:
                    type: 'instrument'
                    reference: '8285282045818'
                  instruction:
                    purpose: 'Withdrawal'
                    scheme: 'local'
                    quote_id: 'qte_mbabizu24mvu3mela5njyhpit4'
                  processing_channel_id: 'pc_hpswyyx23geezflc2ocz3exn4y'
    
      responses:
        '201':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
              example:
                id: 'pay_mbabizu24mvu3mela5njyhpit4'
                action_id: 'act_mbabizu24mvu3mela5njyhpit4'
                amount: 6540
                currency: 'USD'
                approved: true
                status: 'Authorized'
                auth_code: '770687'
                response_code: '10000'
                response_summary: 'Approved'
                3ds:
                  downgraded: true
                  enrolled: 'N'
                risk:
                  flagged: true
                source:
                  type: 'card'
                  id: 'src_nwd3m4in3hkuddfpjsaevunhdy'
                  billing_address:
                    address_line1: 'Checkout.com'
                    address_line2: '90 Tottenham Court Road'
                    city: 'London'
                    state: 'London'
                    zip: 'W1T 4TJ'
                    country: 'GB'
                  phone:
                    country_code: '+1'
                    number: '415 555 2671'
                  last4: '4242'
                  fingerprint: 'F31828E2BDABAE63EB694903825CDD36041CC6ED461440B81415895855502832'
                  bin: '424242'
                customer:
                  id: 'cus_udst2tfldj6upmye2reztkmm4i'
                  email: 'brucewayne@gmail.com'
                  name: 'Bruce Wayne'
                processed_on: '2019-09-10T10:11:12Z'
                reference: 'ORD-5023-4E89'
                processing:
                  retrieval_reference_number: '909913440644'
                  acquirer_transaction_id: '440644309099499894406'
                  recommendation_code: "02"
                eci: '06'
                scheme_id: '489341065491658'
                _links:
                  self:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4'
                  action:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/actions'
                  void:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/captures'
                  capture:
                    href: 'https://api.sandbox.checkout.com/payments/pay_mbabizu24mvu3mela5njyhpit4/voids'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Payment asynchronous or further action required
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentAcceptedResponse'
                  - $ref: '#/components/schemas/PayoutAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '429':
          description: Too many requests or duplicate request detected
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: string
                    example: 0HL80RJLS76I7
                  error_type:
                    type: string
                    example: request_invalid
                  error_codes:
                    type: array
                    items:
                      type: string
                      example: duplicate_request
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Four.Request;\nusing Checkout.Payments.Four.Request.Source;\nusing Checkout.Payments.Four.Response;\nusing BillingDescriptor = Checkout.Payments.Four.BillingDescriptor;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nPaymentRequest request = new PaymentRequest\n{\n    Source = new RequestTokenSource()\n    {\n        Token = \"tok_4gzeau5o2uqubbk6fufs3m7p54\"\n    },\n    Amount = 10,\n    Currency = Currency.USD,\n    PaymentType = PaymentType.Recurring,\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Capture = true,\n    CaptureOn = new DateTime(),\n    Customer = new CustomerRequest()\n    {\n        Id = \"cus_udst2tfldj6upmye2reztkmm4i\",\n        Email = \"email@docs.checkout.com\",\n        Name = \"FirstName LastName\"\n    },\n    BillingDescriptor = new BillingDescriptor()\n    {\n        Name = \"SUPERHEROES.COM\",\n        City = \"GOTHAM\"\n    },\n    Shipping = new ShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        Phone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    ThreeDs = new ThreeDsRequest()\n    {\n        Enabled = true,\n        AttemptN3D = true,\n        Eci = \"05\",\n        Cryptogram = \"AgAAAAAAAIR8CQrXcIhbQAAAAAA=\",\n        Xid = \"MDAwMDAwMDAwMDAwMDAwMzIyNzY=\",\n        Version = \"2.0.1\"\n    },\n    PreviousPaymentId = \"pay_fun26akvvjjerahhctaq2uzhu4\",\n    Risk = new RiskRequest()\n    {\n        Enabled = false\n    },\n    SuccessUrl = \"https://example.com/payments/success\",\n    FailureUrl = \"https://example.com/payments/failure\",\n    PaymentIp = \"192.168.0.1\",\n    Recipient = new PaymentRecipient()\n    {\n        DateOfBirth = \"1985-05-15\",\n        AccountNumber = \"5555554444\",\n        Zip = \"WIT\",\n        FirstName = \"FirstName\",\n        LastName = \"LastName\",\n        Country = CountryCode.GB\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", 123989}\n    }\n};\n\ntry\n{\n    PaymentResponse response = await api.PaymentsClient().RequestPayment(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.ThreeDSRequest;\nimport com.checkout.payments.four.request.PaymentRequest;\nimport com.checkout.payments.four.request.source.RequestCardSource;\nimport com.checkout.payments.four.response.PaymentResponse;\nimport com.checkout.payments.four.sender.PaymentIndividualSender;\nimport com.checkout.payments.four.sender.SenderIdentification;\nimport com.checkout.payments.four.sender.SenderIdentificationType;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nRequestCardSource source = RequestCardSource.builder()\n    .number(\"123456789\")\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .cvv(\"123\")\n    .stored(false)\n    .build();\n\nPaymentIndividualSender sender = PaymentIndividualSender.builder()\n    .firstName(\"FirstName\")\n    .lastName(\"LastName\")\n    .address(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .identification(SenderIdentification.builder()\n        .type(SenderIdentificationType.DRIVING_LICENCE)\n        .number(\"1234\")\n        .issuingCountry(CountryCode.GB)\n        .build())\n    .build();\n\nThreeDSRequest threeDSRequest = ThreeDSRequest.builder()\n    .enabled(true)\n    .challengeIndicator(ChallengeIndicator.NO_CHALLENGE_REQUESTED)\n    .build();\n\nPaymentRequest request = PaymentRequest.builder().source(source).sender(sender)\n    .capture(false)\n    .reference(\"reference\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .threeDS(threeDSRequest)\n    .successUrl(\"https://docs.checkout.com/success\")\n    .failureUrl(\"https://docs.checkout.com/failure\")\n    .build();\n\ntry {\n    PaymentResponse response = api.paymentsClient().requestPayment(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.request({\n		source: {\n			// infered type: \"token\"\n			token: 'tok_bzi43qc6jeee5mmnfo4gnsnera', // Generated by Checkout.Frames\n			billing_address: {\n				address_line1: 'Wall Street',\n				address_line2: 'Dollar Avenue',\n				city: 'London',\n				state: 'London',\n				zip: 'W1W W1W',\n				country: 'GB',\n			},\n			phone: {\n				country_code: '44',\n				number: '7123456789',\n			},\n		},\n		currency: 'USD',\n		amount: 1000,\n		payment_type: 'Regular',\n		reference: 'ORDER 1234',\n		description: 'Mint Tea',\n		customer: {\n			email: 'new_user@email.com',\n			name: 'John Smith',\n		},\n		metadata: {\n			myCustomProp: {\n				value: 1,\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\CustomerRequest;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Payments\\Four\\Request\\PaymentRequest;\nuse Checkout\\Payments\\Four\\Request\\Source\\RequestCardSource;\nuse Checkout\\Payments\\Four\\Sender\\Identification;\nuse Checkout\\Payments\\Four\\Sender\\IdentificationType;\nuse Checkout\\Payments\\Four\\Sender\\PaymentIndividualSender;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$requestCardSource = new RequestCardSource();\n$requestCardSource->name = \"Name\";\n$requestCardSource->number = \"Number\";\n$requestCardSource->expiry_year = 2026;\n$requestCardSource->expiry_month = 10;\n$requestCardSource->cvv = \"123\";\n$requestCardSource->billing_address = $address;\n$requestCardSource->phone = $phone;\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"Customer\";\n\n$identification = new Identification();\n$identification->issuing_country = Country::$GT;\n$identification->number = \"1234\";\n$identification->type = IdentificationType::$drivingLicence;\n\n$paymentIndividualSender = new PaymentIndividualSender();\n$paymentIndividualSender->fist_name = \"FirstName\";\n$paymentIndividualSender->last_name = \"LastName\";\n$paymentIndividualSender->address = $address;\n$paymentIndividualSender->identification = $identification;\n\n$request = new PaymentRequest();\n$request->source = $requestCardSource;\n$request->capture = true;\n$request->reference = \"reference\";\n$request->amount = 10;\n$request->currency = Currency::$USD;\n$request->customer = $customerRequest;\n$request->sender = $paymentIndividualSender;\n\ntry {\n    $response = $api->getPaymentsClient()->requestPayment($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.payments.payments_four import PaymentRequestCardSource, Identification, IdentificationType, \\\n    PaymentIndividualSender, PaymentRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\nrequest_card_source = PaymentRequestCardSource()\nrequest_card_source.number = 'number'\nrequest_card_source.expiry_month = 10\nrequest_card_source.expiry_year = 2027\nrequest_card_source.cvv = 123\nrequest_card_source.name = 'Name'\nrequest_card_source.billing_address = address\nrequest_card_source.phone = phone\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nidentification = Identification()\nidentification.issuing_country = Country.GT\nidentification.number = '1234'\nidentification.type = IdentificationType.DRIVING_LICENSE\n\npayment_individual_sender = PaymentIndividualSender()\npayment_individual_sender.first_name = 'First'\npayment_individual_sender.last_name = 'Last'\npayment_individual_sender.address = address\npayment_individual_sender.identification = identification\n\nrequest = PaymentRequest()\nrequest.source = request_card_source\nrequest.reference = 'reference'\nrequest.amount = 10\nrequest.currency = Currency.USD\nrequest.capture = False\nrequest.customer = customer_request\nrequest.sender = payment_individual_sender\n\ntry:\n    response = api.payments.request_payment(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /payments/{id}:
    get:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-details
        - ApiSecretKey: [ ]
      summary: Get payment details
      operationId: getPaymentDetails
      description: |
        Returns the details of the payment with the specified identifier string.
    
        If the payment method requires a redirection to a third party (e.g., 3D Secure),
        the redirect URL back to your site will include a `cko-session-id` query parameter
        containing a payment session ID that can be used to obtain the details of the payment, for example:
    
        http://example.com/success?cko-session-id=sid_ubfj2q76miwundwlk72vxt2i7q.
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay|sid)_(\\w{26})$"
          required: true
          description: The payment or payment session identifier
      responses:
        '200':
          description: Payment retrieved successfully
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/PaymentDetails'
                  - $ref: '#/components/schemas/PayoutDetails'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four.Response;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetPaymentResponse response = await api.PaymentsClient().GetPaymentDetails(\"payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.response.GetPaymentResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    GetPaymentResponse response = api.paymentsClient().getPayment(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.get('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getPaymentsClient()->getPaymentDetails(\"payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.payments.get_payment_details('payment_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/actions:
    get:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-details
        - ApiSecretKey: [ ]
      summary: Get payment actions
      operationId: getPaymentActions
      description: |
        Returns all the actions associated with a payment ordered by processing date in descending order (latest first).
      parameters:
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      responses:
        '200':
          description: Payment actions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentActionsResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Payment not found
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    IList<PaymentAction> response = await api.PaymentsClient().GetPaymentActions(\"payment_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.PaymentAction;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\ntry {\n    List<PaymentAction> response = api.paymentsClient().getPaymentActions(\"payment_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.getActions('pay_je5hbbb4u3oe7k4u3lbwlu3zkq');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getPaymentsClient()->getPaymentActions(\"payment_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\ntry:\n    response = api.payments.get_payment_actions('payment_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /payments/{id}/authorizations:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-authorizations
        - ApiSecretKey: [ ]
      summary: Increment authorization
      operationId: incrementPaymentAuthorization
      description: |
        Request an incremental authorization to increase the authorization amount or extend the authorization's validity period.
    
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorizationRequest'
      responses:
        '201':
          description: Authorization processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorizationResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Payments;\nusing Checkout.Payments.Four.Request;\nusing Checkout.Payments.Four.Request.Source;\nusing Checkout.Payments.Four.Response;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nAuthorizationRequest authorizationRequest = new AuthorizationRequest\n{\n    Amount = 100, Reference = \"payment_reference\"\n};\n\ntry\n{\n    // Optional: idempotencyKey as a third parameter for idempotent requests\n    AuthorizationResponse response = await api.PaymentsClient().IncrementPaymentAuthorization(\"payment_id\", authorizationRequest);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.request.AuthorizationRequest;\nimport com.checkout.payments.four.response.AuthorizationResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nAuthorizationRequest authorizationRequest = AuthorizationRequest.builder()\n    .amount(100L)\n    .reference(\"reference\")\n    .build();\n\ntry {\n    // Optional: idempotencyKey as a third parameter for idempotent requests\n    AuthorizationResponse response = api.paymentsClient().incrementPaymentAuthorization(\"payment_id\", authorizationRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const increment = await cko.payments.increment('pay_bvxdyo7xdssuhcx3e74dpcrfmu', {\n		amount: 200,\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Payments\\Four\\AuthorizationRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new AuthorizationRequest();\n$request->amount = 10;\n$request->reference = \"reference\";\n$request->metadata = array(\"param1\" => \"value1\", \"param2\" => \"value2\");\n\ntry {\n    // Optional: idempotencyKey as a third parameter for idempotent requests\n    $response = $api->getPaymentsClient()->incrementPaymentAuthorization(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.payments.payments_four import AuthorizationRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nrequest = AuthorizationRequest()\nrequest.amount = 10\nrequest.reference = 'reference'\n\ntry:\n    # Optional: idempotencyKey as a third parameter for idempotent requests\n    response = api.payments.increment_payment_authorization('payment_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /payments/{id}/captures:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-captures
        - ApiSecretKey: [ ]
      summary: Capture a payment
      operationId: captureAPayment
      description: |
        Captures a payment if supported by the payment method.
    
        For card payments, capture requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the capture is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaptureRequest'
      responses:
        '202':
          description: Capture accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaptureAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Capture not allowed
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nCaptureRequest request = new CaptureRequest\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    CaptureResponse response = await api.PaymentsClient().CapturePayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.CaptureRequest;\nimport com.checkout.payments.four.CaptureResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nCaptureRequest captureRequest = CaptureRequest.builder()\n    .amount(10L)\n    .reference(\"partial capture\")\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, capturePayment(\"payment_id\") for a full capture\n    CaptureResponse response = api.paymentsClient().capturePayment(\"payment_id\", captureRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.capture('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'CAPTURE ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Payments\\Four\\CaptureRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new CaptureRequest();\n$request->reference = \"partial capture\";\n$request->amount = 5;\n\ntry {\n    // or, capturePayment(\"payment_id\") for a full capture\n    $response = $api->getPaymentsClient()->capturePayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.payments.payments_four import CaptureRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nrequest = CaptureRequest()\nrequest.reference = 'reference'\nrequest.amount = 10\n\ntry:\n    # or, capture_payment('payment_id') for a full capture\n    response = api.payments.capture_payment('payment_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization\n\n"
  /payments/{id}/refunds:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-refunds
        - ApiSecretKey: [ ]
      summary: Refund a payment
      operationId: refundAPayment
      description: |
        Refunds a payment if supported by the payment method.
    
        For card payments, refund requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the refund is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequest'
      responses:
        '202':
          description: Refund accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefundAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Refund not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nRefundRequest request = new RefundRequest()\n{\n    Amount = 10,\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    RefundResponse response = await api.PaymentsClient().RefundPayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.RefundRequest;\nimport com.checkout.payments.four.RefundResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nRefundRequest refundRequest = RefundRequest.builder()\n    .reference(\"partial refund\")\n    .amount(10L)\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, refundPayment(\"payment_id\") for a full refund\n    RefundResponse response = api.paymentsClient().refundPayment(\"payment_id\", refundRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.refund('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'REFUND ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Payments\\RefundRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new RefundRequest();\n$request->reference = \"reference\";\n$request->amount = $amount;\n\ntry {\n    // or, refundPayment(\"payment_id\") for a full refund\n    $response = $api->getPaymentsClient()->refundPayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.payments.payments import RefundRequest\n\n# API Keys\n\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nrequest = RefundRequest()\nrequest.reference = 'reference'\nrequest.amount = 10\n\ntry:\n    # or, refundPayment('payment_id') for a full refund\n    response = api.payments.refundPayment('payment_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /payments/{id}/voids:
    post:
      tags:
        - Payments
      security:
        - OAuth:
            - gateway
            - gateway:payment-voids
        - ApiSecretKey: [ ]
      summary: Void a payment
      operationId: voidAPayment
      description: |
        Voids a payment if supported by the payment method.
    
        For card payments, void requests are processed asynchronously. You can use [workflows](#tag/Workflows) to be notified if the void is successful.
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKey'
        - in: path
          name: id
          schema:
            type: string
            pattern: "^(pay)_(\\w{26})$"
          required: true
          description: The payment identifier
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VoidRequest'
      responses:
        '202':
          description: Void accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VoidAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: Void not allowed
        '404':
          description: Payment not found
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Payments.Four;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.GatewayPayment)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nVoidRequest request = new VoidRequest()\n{\n    Reference = \"reference\",\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"coupon_code\", \"NY2018\"},\n        {\"partner_id\", \"123989\"}\n    }\n};\n\ntry\n{\n    VoidResponse response = await api.PaymentsClient().VoidPayment(\"payment_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.payments.four.VoidRequest;\nimport com.checkout.payments.four.VoidResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.GATEWAY) // more scopes available\n    .build();\n\nVoidRequest voidRequest = VoidRequest.builder()\n    .reference(\"reference\")\n    .metadata(new HashMap<>())\n    .build();\n\ntry {\n    // or, voidPayment(\"payment_id\")\n    VoidResponse response = api.paymentsClient().voidPayment(\"payment_id\", voidRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const payment = await cko.payments.void('pay_je5hbbb4u3oe7k4u3lbwlu3zkq', {\n		amount: 1000,\n		reference: 'VOID ORDER 1234',\n		metadata: {\n			value: 'my value',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Payments\\VoidRequest;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n// OAuth\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$Gateway]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new VoidRequest();\n$request->reference = \"reference\";\n\ntry {\n    // or, voidPayment(\"payment_id\")\n    $response = $api->getPaymentsClient()->voidPayment(\"payment_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.payments.payments import VoidRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nrequest = VoidRequest()\nrequest.reference = 'reference'\n\ntry:\n    # or, void_payment('payment_id')\n    response = api.payments.void_payment('payment_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /risk/assessments/pre-authentication:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-authentication risk scan
      operationId: preAuthenticationRiskAssessment
      description: |
        Perform a pre-authentication fraud assessment using your defined risk settings.
        #parameters:
      # - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreAuthenticationAssessmentRequest'
      responses:
        #   '200':
        #     description: Transaction already assessed
        #     content:
        #       application/json:
        #         schema:
        #           $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
        #       Cko-Request-Id:
        #         $ref: "#/components/headers/Cko-Request-Id"
        #       Cko-Version:
        #         $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreAuthenticationAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreAuthentication;\nusing Checkout.Risk.source;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreAuthenticationAssessmentRequest request = new PreAuthenticationAssessmentRequest()\n{\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest()\n    {\n        Name = \"FirstName LastName\",\n        Email = \"email@docs.checkout.com\",\n    },\n    Payment = new RiskPayment()\n    {\n        Psp = \"Checkout.com\",\n        Id = \"78453878\"\n    },\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Reference = \"reference\",\n    Description = \"Set of 3 masks\",\n    Amount = 10,\n    Currency = Currency.GBP,\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location()\n        {\n            Latitude = \"51.5107\",\n            Longitude = \"0.01313\"\n        },\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"},\n        {\"discountApplied\", \"10\"},\n        {\"customer_id\", \"2190EF321\"}\n    }\n};\n\ntry\n{\n    PreAuthenticationAssessmentResponse response =\n        await api.RiskClient().RequestPreAuthenticationRiskScan(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.common.Phone;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.Location;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentRequest;\nimport com.checkout.risk.preauthentication.PreAuthenticationAssessmentResponse;\nimport com.checkout.risk.source.CardSourcePrism;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardSourcePrism cardSourcePrism = CardSourcePrism.builder()\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .number(\"123456789\")\n    .phone(Phone.builder().countryCode(\"1\").number(\"415 555 2671\").build())\n    .build();\n\nPreAuthenticationAssessmentRequest request = PreAuthenticationAssessmentRequest.builder()\n    .date(Instant.now())\n    .source(cardSourcePrism)\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\"))\n    .payment(RiskPayment.builder().psp(\"checkout\").id(\"123456789\").build())\n    .shipping(RiskShippingDetails.builder().address(\n        Address.builder()\n                .addressLine1(\"Checkout\")\n                .addressLine2(\"90 Tottenham Court Road\")\n                .city(\"London\")\n                .state(\"London\")\n                .zip(\"W1T 4TJ\")\n                .country(CountryCode.GB)\n                .build()\n    ).build())\n    .reference(\"reference\")\n    .description(\"description\")\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder()\n        .ip(\"90.197.169.245\")\n        .location(Location.builder().longitude(\"0.1313\").latitude(\"51.5107\").build())\n        .type(\"Phone\")\n        .os(\"iOS\")\n        .model(\"iPhone X\")\n        .date(Instant.now())\n        .userAgent(\"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\")\n        .fingerprint(\"34304a9e3fg09302\")\n        .build())\n    .metadata(Stream.of(\n        new AbstractMap.SimpleImmutableEntry<>(\"VoucherCode\", \"loyalty_10\"),\n        new AbstractMap.SimpleImmutableEntry<>(\"discountApplied\", \"10\"),\n        new AbstractMap.SimpleImmutableEntry<>(\"customer_id\", \"2190EF321\"))\n        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue)))\n    .build();\n\ntry {\n    PreAuthenticationAssessmentResponse response = api.riskClient().requestPreAuthenticationRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const risk = await cko.risk.requestPreAuthentication({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Environment;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$cardSourcePrism = new CardSourcePrism();\n$cardSourcePrism->billing_address = $address;\n$cardSourcePrism->expiry_month = 10;\n$cardSourcePrism->expiry_year = 2027;\n$cardSourcePrism->number = \"number\"\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"Name\";\n\n$riskPayment = new RiskPayment();\n$riskPayment->psp = \"psp\";\n$riskPayment->id = \"78453878\";\n\n$riskShippingDetails = new RiskShippingDetails();\n$riskShippingDetails->address = $address;\n\n$location = new Location();\n$location->latitude = \"51.5107\";\n$location->longitude = \"0.1313\";\n\n$device = new Device();\n$device->location = $location;\n$device->type = \"Phone\";\n$device->os = \"ISO\";\n$device->model = \"iPhone X\";\n$device->date = new DateTime();\n$device->user_agent = \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\";\n$device->fingerprint = \"34304a9e3fg09302\";\n\n$request = new PreAuthenticationAssessmentRequest();\n$request->date = new DateTime();\n$request->source = $cardSourcePrism;\n$request->customer = $customerRequest;\n$request->payment = $riskPayment;\n$request->shipping = $riskShippingDetails;\n$request->reference = \"ORD-1011-87AH\";\n$request->description = \"Set of 3 masks\";\n$request->amount = 10;\n$request->currency = Currency::$GBP;\n$request->device = $device;\n$request->metadata = array(\"VoucherCode\" => \"loyalty_10\", \"discountApplied\" => \"10\", \"customer_id\" => \"2190EF321\");\n\ntry {\n    $response = $api->getRiskClient()->requestPreAuthenticationRiskScan($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nfrom datetime import datetime, timezone\n\nimport checkout_sdk\nfrom checkout_sdk.common.common import CustomerRequest, Phone, Address\nfrom checkout_sdk.common.enums import Currency, Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.risk.risk import PreAuthenticationAssessmentRequest, Device, Location, RiskShippingDetails, \\\n    RiskPayment, RiskRequestTokenSource\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ntoken_source = RiskRequestTokenSource()\ntoken_source.token = 'token'\ntoken_source.phone = phone\ntoken_source.billing_address = address\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nrisk_payment = RiskPayment()\nrisk_payment.psp = 'CheckoutSdk.com'\nrisk_payment.id = '78453878'\n\nshipping_details = RiskShippingDetails()\nshipping_details.address = address\n\nlocation = Location()\nlocation.longitude = '0.1313'\nlocation.latitude = '51.5107'\n\ndevice = Device()\ndevice.location = location\ndevice.type = 'Phone'\ndevice.os = 'ISO'\ndevice.model = 'iPhone X'\ndevice.date = datetime.now(timezone.utc)\ndevice.user_agent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, ' \\\n                    'like Gecko) Version/11.0 Mobile/15A372 Safari/604.1 '\ndevice.fingerprint = '34304a9e3fg09302'\n\nrequest = PreAuthenticationAssessmentRequest()\nrequest.date = datetime.now(timezone.utc)\nrequest.source = token_source\nrequest.customer = customer_request\nrequest.payment = risk_payment\nrequest.shipping = shipping_details\nrequest.reference = 'reference'\nrequest.description = 'description'\nrequest.amount = 10\nrequest.currency = Currency.GBP\nrequest.device = device\nrequest.metadata = {\n    'VoucherCode': 'loyalty_10',\n    'discountApplied': '10',\n    'customer_id': '2190EF321'}\n\ntry:\n    response = api.risk.request_pre_authentication_risk_scan(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /risk/assessments/pre-capture:
    post:
      security:
        - ApiSecretKey: [ ]
      tags:
        - Risk
      summary: Request a pre-capture risk scan
      operationId: preCaptureRiskAssessment
      description: |
        Perform a pre-capture fraud assessment using your defined risk settings.<br><br> **Note**: If you’ve already requested a pre-authentication fraud assessment for the transaction, provide the `assessment_id` returned in that response in your request to carry over the data. If you do include the `assessment_id`, the other fields you provide in this request will only fill in any gaps in the data; they will not overwrite any data.
      # parameters:
      #   - $ref: '#/components/parameters/ckoIdempotencyKey'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreCaptureAssessmentRequest'
      responses:
        '200':
          description: Transaction already assessed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '201':
          description: Transaction assessed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreCaptureAssessmentResponse'
            Cko-Request-Id:
              schema:
                $ref: "#/components/headers/Cko-Request-Id"
            Cko-Version:
              schema:
                $ref: "#/components/headers/Cko-Version"
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Risk;\nusing Checkout.Risk.PreCapture;\nusing Checkout.Risk.source;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nPreCaptureAssessmentRequest request = new PreCaptureAssessmentRequest()\n{\n    AssessmentId = \"string\",\n    Date = DateTime.Now,\n    Source = new CardSourcePrism(),\n    Customer = new CustomerRequest()\n    {\n        Name = \"FirstName LastName\",\n        Email = \"email@docs.checkout.com\",\n    },\n    Amount = 10,\n    Currency = Common.Currency.GBP,\n    Payment = new RiskPayment()\n    {\n        Psp = \"Checkout.com\",\n        Id = \"78453878\"\n    },\n    Shipping = new RiskShippingDetails()\n    {\n        Address = new Address()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        }\n    },\n    Device = new Device()\n    {\n        Ip = \"90.197.169.245\",\n        Location = new Location()\n        {\n            Latitude = \"51.5107\",\n            Longitude = \"0.01313\"\n        },\n        Os = \"ISO\",\n        Type = \"Phone\",\n        Model = \"IPHone X\",\n        Date = DateTime.Now,\n        UserAgent =\n            \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\",\n        Fingerprint = \"34304a9e3fg09302\"\n    },\n    Metadata = new Dictionary<string, object>()\n    {\n        {\"VoucherCode\", \"loyalty_10\"},\n        {\"discountApplied\", \"10\"},\n        {\"customer_id\", \"2190EF321\"}\n    },\n    AuthenticationResult = new AuthenticationResult()\n    {\n        Attempted = true,\n        Challenged = true,\n        Succeeded = true,\n        LiabilityShifted = true,\n        Method = \"3ds\",\n        Version = \"2.0\"\n    },\n    AuthorizationResult = new AuthorizationResult()\n    {\n        AvsCode = \"V\",\n        CvvResult = \"N\"\n    }\n};\n\ntry\n{\n    PreCaptureAssessmentResponse response = await api.RiskClient().RequestPreCaptureRiskScan(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Currency;\nimport com.checkout.common.CustomerRequest;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.risk.Device;\nimport com.checkout.risk.RiskPayment;\nimport com.checkout.risk.RiskShippingDetails;\nimport com.checkout.risk.precapture.AuthenticationResult;\nimport com.checkout.risk.precapture.AuthorizationResult;\nimport com.checkout.risk.precapture.PreCaptureAssessmentRequest;\nimport com.checkout.risk.precapture.PreCaptureAssessmentResponse;\nimport com.checkout.risk.source.CustomerSourcePrism;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nPreCaptureAssessmentRequest request = PreCaptureAssessmentRequest.builder()\n    .date(Instant.MAX)\n    .source(CustomerSourcePrism.builder().build())\n    .customer(new CustomerRequest(null, \"email@docs.checkout.com\", \"Name\"))\n    .payment(RiskPayment.builder().build())\n    .shipping(RiskShippingDetails.builder().build())\n    .amount(10L)\n    .currency(Currency.GBP)\n    .device(Device.builder().build())\n    .metadata(new HashMap<>())\n    .authenticationResult(AuthenticationResult.builder()\n        .attempted(true)\n        .challenged(true)\n        .liabilityShifted(true)\n        .method(\"3ds\")\n        .succeeded(true)\n        .version(\"2.0\")\n        .build())\n    .authorizationResult(AuthorizationResult.builder()\n        .avsCode(\"V\")\n        .cvvResult(\"N\")\n        .build())\n    .build();\n\ntry {\n    PreCaptureAssessmentResponse response = api.riskClient().requestPreCaptureRiskScan(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const risk = await cko.risk.requestPreCapture({\n		source: {\n			type: 'token',\n			token: 'tok_XXX',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Environment;\n\n// API Keys\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$builder = CheckoutDefaultSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$customerRequest = new CustomerRequest();\n$customerRequest->email = \"email@docs.checkout.com\";\n$customerRequest->name = \"name\";\n\n$riskPayment = new RiskPayment();\n$riskPayment->psp = \"psp\";\n$riskPayment->id = \"78453878\";\n\n$riskShippingDetails = new RiskShippingDetails();\n$riskShippingDetails->address = $address;\n\n$authenticationResult = new AuthenticationResult();\n$authenticationResult->attempted = true;\n$authenticationResult->challenged = true;\n$authenticationResult->liability_shifted = true;\n$authenticationResult->method = \"3ds\";\n$authenticationResult->succeeded = true;\n$authenticationResult->version = \"2.0\";\n\n$authorizationResult = new AuthorizationResult();\n$authorizationResult->avs_code = \"V\";\n$authorizationResult->cvv_result = \"N\";\n\n$device = new Device();\n$device->location = $location;\n$device->type = \"Phone\";\n$device->os = \"ISO\";\n$device->model = \"iPhone X\";\n$device->date = new DateTime();\n$device->user_agent = \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\";\n$device->fingerprint = \"34304a9e3fg09302\";\n\n$request = new PreCaptureAssessmentRequest();\n$request->date = new DateTime();\n$request->source = $requestSource;\n$request->customer = $customerRequest;\n$request->payment = $riskPayment;\n$request->shipping = $riskShippingDetails;\n$request->amount = 6540;\n$request->currency = Currency::$GBP;\n$request->device = $device;\n$request->metadata = array(\"VoucherCode\" => \"loyalty_10\", \"discountApplied\" => \"10\", \"customer_id\" => \"2190EF321\");\n$request->authentication_result = $authenticationResult;\n$request->authorization_result = $authorizationResult;\n\ntry {\n    $response = $api->getRiskClient()->requestPreCaptureRiskScan($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nfrom datetime import datetime, timezone\n\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone, Address, CustomerRequest\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.risk.risk import RiskRequestTokenSource, RiskPayment, RiskShippingDetails, Location, Device, \\\n    AuthenticationResult, AuthorizationResult, PreCaptureAssessmentRequest\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\ntoken_source = RiskRequestTokenSource()\ntoken_source.token = 'token'\ntoken_source.phone = phone\ntoken_source.billing_address = address\n\ncustomer_request = CustomerRequest()\ncustomer_request.email = 'email@docs.checkout.com'\ncustomer_request.name = 'Name'\n\nrisk_payment = RiskPayment()\nrisk_payment.psp = 'CheckoutSdk.com'\nrisk_payment.id = '78453878'\n\nshipping_details = RiskShippingDetails()\nshipping_details.address = address\n\nlocation = Location()\nlocation.longitude = '0.1313'\nlocation.latitude = '51.5107'\n\ndevice = Device()\ndevice.location = location\ndevice.type = 'Phone'\ndevice.os = 'ISO'\ndevice.model = 'iPhone X'\ndevice.date = datetime.now(timezone.utc)\ndevice.user_agent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, ' \\\n                    'like Gecko) Version/11.0 Mobile/15A372 Safari/604.1 '\ndevice.fingerprint = '34304a9e3fg09302'\n\nauthentication_result = AuthenticationResult()\nauthentication_result.attempted = True\nauthentication_result.challenged = True\nauthentication_result.liability_shifted = True\nauthentication_result.method = '3ds'\nauthentication_result.succeeded = True\nauthentication_result.version = '2.0'\n\nauthorization_result = AuthorizationResult()\nauthorization_result.avs_code = 'Y'\nauthorization_result.cvv_result = 'N'\n\nrequest = PreCaptureAssessmentRequest()\nrequest.date = datetime.now(timezone.utc)\nrequest.source = token_source\nrequest.customer = customer_request\nrequest.payment = risk_payment\nrequest.shipping = shipping_details\nrequest.amount = 10\nrequest.currency = Currency.GBP\nrequest.device = device\nrequest.authentication_result = authentication_result\nrequest.authorization_result = authorization_result\nrequest.metadata = {\n    'VoucherCode': 'loyalty_10',\n    'discountApplied': '10',\n    'customer_id': '2190EF321'}\n\ntry:\n    response = api.risk.request_pre_capture_risk_scan(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /sessions:
    post:
      tags:
        - Sessions
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
      summary: Request a session
      operationId: createSession
      description: |
        Create a payment session to authenticate a cardholder before requesting a payment.
        Payment sessions can be linked to one or more payments (in the case of recurring and other merchant-initiated payments).
    
        The `next_actions` object in the response tells you which actions can be performed next.
    
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionRequest'
      responses:
        '201':
          description: Session processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionOkResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '202':
          description: Session accepted and further action required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSessionAcceptedResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the `channel_data` property in the request is browser related.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '503':
          description: Service not available. A temporary server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\nusing Checkout.Sessions.Completion;\nusing Checkout.Sessions.Source;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nSessionRequest request = new SessionRequest\n{\n    Source = new SessionCardSource()\n    {\n        BillingAddress = new SessionAddress()\n        {\n            AddressLine1 = \"Checkout.com\",\n            AddressLine2 = \"90 Tottenham Court Road\",\n            City = \"London\",\n            State = \"London\",\n            Zip = \"W1T 4TJ\",\n            Country = CountryCode.GB\n        },\n        HomePhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        },\n        MobilePhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        },\n        WorkPhone = new Phone()\n        {\n            Number = \"4155552671\",\n            CountryCode = \"1\"\n        }\n    },\n    Amount = 10,\n    Currency = Currency.USD,\n    ProcessingChannelId = \"pc_5jp2az55l3cuths25t5p3xhwru\",\n    Marketplace = new MarketplaceData {SubEntityId = \"ent_ocw5i74vowfg2edpy66izhts2u\"},\n    AuthenticationCategory = Category.Payment,\n    ChallengeIndicator = ChallengeIndicatorType.ChallengeRequested,\n    BillingDescriptor = new SessionsBillingDescriptor {Name = \"SUPERHEROES.COM\"},\n    Reference = \"reference\",\n    TransactionType = TransactionType.GoodsService,\n    ShippingAddress = new SessionAddress(),\n    Completion = new NonHostedCompletionInfo {CallbackUrl = \"https://merchant.com/callback\"},\n    ChannelData = new BrowserSession()\n    {\n        AcceptHeader = \"Accept:  *.*, q=0.1\",\n        JavaEnabled = true,\n        Language = \"FR-fr\",\n        ColorDepth = \"16\",\n        ScreenHeight = \"1080\",\n        ScreenWidth = \"1920\",\n        Timezone = \"60\",\n        UserAgent =\n            \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\",\n        ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y,\n        IpAddress = \"1.12.123.255\"\n    }\n};\n\ntry\n{\n    SessionResponse response = await api.SessionsClient().RequestSession(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.ChallengeIndicator;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.AuthenticationType;\nimport com.checkout.sessions.Category;\nimport com.checkout.sessions.SessionAddress;\nimport com.checkout.sessions.SessionRequest;\nimport com.checkout.sessions.SessionResponse;\nimport com.checkout.sessions.TransactionType;\nimport com.checkout.sessions.completion.HostedCompletionInfo;\nimport com.checkout.sessions.source.SessionCardSource;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nSessionRequest sessionRequest = SessionRequest.builder()\n    .source(SessionCardSource.builder()\n        .expiryMonth(10)\n        .expiryYear(2027)\n        .number(\"12345678\")\n        .build())\n    .amount(10L)\n    .currency(Currency.USD)\n    .processingChannelId(\"processing_channel_id\")\n    .authenticationType(AuthenticationType.REGULAR)\n    .authenticationCategory(Category.PAYMENT)\n    .challengeIndicator(ChallengeIndicator.NO_PREFERENCE)\n    .reference(\"reference\")\n    .transactionType(TransactionType.GOODS_SERVICE)\n    .shippingAddress(SessionAddress.builderSessionAddress()\n        .addressLine1(\"Checkout.com\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"ENG\")\n        .country(CountryCode.GB)\n        .zip(\"W1T 4TJ\")\n        .build())\n    .completion(HostedCompletionInfo.builder()\n        .successUrl(\"https://docs.checkout.com/sessions/success\")\n        .failureUrl(\"https://docs.checkout.com/sessions/fail\")\n        .build())\n    .build();\n\ntry {\n    SessionResponse response = api.sessionsClient().requestSession(sessionRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.request({\n		source: {\n			type: 'card',\n			number: '4485040371536584',\n			expiry_month: 1,\n			expiry_year: 2030,\n		},\n		amount: 100,\n		currency: 'USD',\n		authentication_type: 'regular',\n		authentication_category: 'payment',\n		challenge_indicator: 'no_preference',\n		reference: 'ORD-5023-4E89',\n		transaction_type: 'goods_service',\n		processing_channel_id: 'pc_zs5fqhybzc2e3jmq3efvybybpq',\n		shipping_address: {\n			address_line1: 'Checkout.com',\n			address_line2: '90 Tottenham Court Road',\n			city: 'London',\n			state: 'GB',\n			zip: 'W1T 4TJ',\n			country: 'GB',\n		},\n		completion: {\n			type: 'non_hosted',\n			callback_url: 'https://example.com/sessions/callback',\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\ChallengeIndicatorType;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Currency;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Sessions\\Category;\nuse Checkout\\Sessions\\Channel\\AppSession;\nuse Checkout\\Sessions\\Channel\\SdkEphemeralPublicKey;\nuse Checkout\\Sessions\\Channel\\SdkInterfaceType;\nuse Checkout\\Sessions\\Completion\\NonHostedCompletionInfo;\nuse Checkout\\Sessions\\SessionAddress;\nuse Checkout\\Sessions\\SessionMarketplaceData;\nuse Checkout\\Sessions\\SessionRequest;\nuse Checkout\\Sessions\\SessionsBillingDescriptor;\nuse Checkout\\Sessions\\Source\\SessionCardSource;\nuse Checkout\\Sessions\\TransactionType;\nuse Checkout\\Sessions\\UIElements;\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$billingAddress = new SessionAddress();\n$billingAddress->address_line1 = \"CheckoutSdk.com\";\n$billingAddress->address_line2 = \"90 Tottenham Court Road\";\n$billingAddress->city = \"London\";\n$billingAddress->state = \"ENG\";\n$billingAddress->country = Country::$GB;\n\n$sessionCardSource = new SessionCardSource();\n$sessionCardSource->billing_address = $billingAddress;\n$sessionCardSource->number = \"number\";\n$sessionCardSource->expiry_month = 10;\n$sessionCardSource->expiry_year = 2026;\n$sessionCardSource->name = \"Name\";\n$sessionCardSource->email = \"email@docs.checkout.com\";\n$sessionCardSource->home_phone = $phone;\n$sessionCardSource->work_phone = $phone;\n$sessionCardSource->mobile_phone = $phone;\n\n$shippingAddress = new SessionAddress();\n$shippingAddress->address_line1 = \"CheckoutSdk.com\";\n$shippingAddress->address_line2 = \"90 Tottenham Court Road\";\n$shippingAddress->city = \"London\";\n$shippingAddress->state = \"London\";\n$shippingAddress->zip = \"W1T 4TJ\";\n$shippingAddress->country = Country::$GB;\n\n$marketPlaceData = new SessionMarketplaceData();\n$marketPlaceData->sub_entity_id = \"ent_123456789\";\n\n$billingDescriptor = new SessionsBillingDescriptor();\n$billingDescriptor->name = \"Name\";\n\n$nonHostedCompletionInfo = new NonHostedCompletionInfo();\n$nonHostedCompletionInfo->callback_url = \"https://docs.checkout.com/callback\";\n\n$sdkEphemeralPublicKey = new SdkEphemeralPublicKey();\n$sdkEphemeralPublicKey->kty = \"EC\";\n$sdkEphemeralPublicKey->crv = \"P-256\";\n$sdkEphemeralPublicKey->x = \"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU\";\n$sdkEphemeralPublicKey->y = \"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0\";\n\n$appSession = new AppSession();\n$appSession->sdk_app_id = \"dbd64fcb-c19a-4728-8849-e3d50bfdde39\";\n$appSession->sdk_max_timeout = 5;\n$appSession->sdk_encrypted_data = \"{}\";\n$appSession->sdk_ephem_pub_key = $sdkEphemeralPublicKey;\n$appSession->sdk_reference_number = \"3DS_LOA_SDK_PPFU_020100_00007\";\n$appSession->sdk_transaction_id = \"b2385523-a66c-4907-ac3c-91848e8c0067\";\n$appSession->sdk_interface_type = SdkInterfaceType::$both;\n$appSession->sdk_ui_elements = array(UIElements::$single_select, UIElements::$html_other);\n\n$request = new SessionRequest();\n$request->source = $sessionCardSource;\n$request->amount = 100;\n$request->currency = Currency::$USD;\n$request->processing_channel_id = \"pc_123456789\";\n$request->marketplace = $marketPlaceData;\n$request->authentication_category = Category::$payment;\n$request->challenge_indicator = ChallengeIndicatorType::$no_preference;\n$request->billing_descriptor = $billingDescriptor;\n$request->reference = \"reference\";\n$request->transaction_type = TransactionType::$goods_service;\n$request->shipping_address = $shippingAddress;\n$request->completion = $nonHostedCompletionInfo;\n$request->channel_data = $appSession;\n\ntry {\n    $response = $api->getSessionsClient()->requestSession($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone\nfrom checkout_sdk.common.enums import Currency, ChallengeIndicator, Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.sessions.sessions import ThreeDsMethodCompletion, SessionRequest, Category, TransactionType, \\\n    SessionAddress, SessionMarketplaceData, SessionsBillingDescriptor, NonHostedCompletionInfo, BrowserSession, \\\n    SessionCardSource\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.GATEWAY]) \\\n    .build()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\nbilling_address = SessionAddress()\nbilling_address.address_line1 = 'CheckoutSdk.com'\nbilling_address.address_line2 = '90 Tottenham Court Road'\nbilling_address.city = 'London'\nbilling_address.state = 'ENG'\nbilling_address.country = Country.GB\n\nsession_card_source = SessionCardSource()\nsession_card_source.billing_address = billing_address\nsession_card_source.number = 'number'\nsession_card_source.expiry_month = 10\nsession_card_source.expiry_year = 2027\nsession_card_source.name = 'Name'\nsession_card_source.email = 'email@docs.checkout.com'\nsession_card_source.home_phone = phone\nsession_card_source.work_phone = phone\nsession_card_source.mobile_phone = phone\n\nshipping_address = SessionAddress()\nshipping_address.address_line1 = 'CheckoutSdk.com'\nshipping_address.address_line2 = 'ABC building'\nshipping_address.address_line3 = '14 Wells Mews'\nshipping_address.city = 'London'\nshipping_address.state = 'ENG'\nshipping_address.zip = 'W1T 4TJ'\nshipping_address.country = Country.GB\n\nmarketplace_data = SessionMarketplaceData()\nmarketplace_data.sub_entity_id = 'ent_ocw5i74vowfg2edpy66izhts2u'\n\nbilling_descriptor = SessionsBillingDescriptor()\nbilling_descriptor.name = 'Name'\n\nnon_hosted_completion_info = NonHostedCompletionInfo()\nnon_hosted_completion_info.callback_url = 'https://docs.checkout.com/callback'\n\nbrowser_session = BrowserSession()\nbrowser_session.accept_header = 'Accept:  *.*, q=0.1'\nbrowser_session.java_enabled = True\nbrowser_session.language = 'FR-fr'\nbrowser_session.color_depth = '16'\nbrowser_session.screen_width = '1920'\nbrowser_session.screen_height = '1080'\nbrowser_session.timezone = '60'\nbrowser_session.user_agent = 'Mozilla/5.0 (Windows NT 10.0 Win64 x64) AppleWebKit/537.36 (KHTML, like Gecko) ' \\\n                             'Chrome/69.0.3497.100 Safari/537.36 '\nbrowser_session.three_ds_method_completion = ThreeDsMethodCompletion.Y\nbrowser_session.ip_address = '1.12.123.255'\n\nrequest = SessionRequest()\nrequest.source = session_card_source\nrequest.amount = 10\nrequest.currency = Currency.USD\nrequest.processing_channel_id = 'pc_5jp2az55l3cuths25t5p3xhwru'\nrequest.marketplace = marketplace_data\nrequest.authentication_category = Category.PAYMENT\nrequest.challenge_indicator = ChallengeIndicator.NO_PREFERENCE\nrequest.billing_descriptor = billing_descriptor\nrequest.reference = 'ORD-5023-4E89'\nrequest.transaction_type = TransactionType.GOODS_SERVICE\nrequest.shipping_address = shipping_address\nrequest.completion = non_hosted_completion_info\nrequest.channel_data = browser_session\n\ntry:\n    response = api.sessions.request_session(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /sessions/{id}:
    get:
      tags:
        - Sessions
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Get session details
      operationId: getSession
      description: |
        Returns the details of the session with the specified identifier string.
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
        - name: channel
          in: header
          description: Optionally provide the type of channnel so you only get the relevant actions
          schema:
            type: string
            enum:
              - browser
              - app
            description: If a value is not provided, and if the `status` is `pending`, then `next_actions` will return `collect_channel_data` and if available, `issuer_fingerprint`.
            example: browser
      responses:
        '200':
          description: Session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden. This can happen when the OAuth token scope is `sessions:app`, but the session was initiated with the scope `sessions:browser`.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '502':
          description: Bad gateway
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    GetSessionResponse response = await api.SessionsClient().GetSessionDetails(\"session_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.GetSessionResponse;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\ntry {\n    GetSessionResponse response = api.sessionsClient().getSessionDetails(\"session_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let getSession = await cko.sessions.get('sid_jlfm4ithpgpefdxgzzdnc3xrc4');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $response = $api->getSessionsClient()->getSessionDetails(\"session_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.SESSIONS, OAuthScopes.SESSIONS_APP, OAuthScopes.SESSIONS_BROWSER]) \\\n    .build()\n\ntry:\n    response = api.sessions.get_session_details('session_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /sessions/{id}/collect-data:
    put:
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Update a session
      operationId: updateSession
      description: Update a session by providing information about the environment.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelData'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nBrowserSession request = new BrowserSession()\n{\n    AcceptHeader = \"Accept:  *.*, q=0.1\",\n    JavaEnabled = true,\n    Language = \"FR-fr\",\n    ColorDepth = \"16\",\n    ScreenWidth = \"1920\",\n    ScreenHeight = \"1080\",\n    Timezone = \"60\",\n    UserAgent =\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\",\n    ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y,\n    IpAddress = \"1.12.123.255\"\n};\n\ntry\n{\n    GetSessionResponse response = await api.SessionsClient().UpdateSession(\"session_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.GetSessionResponse;\nimport com.checkout.sessions.channel.BrowserSession;\nimport com.checkout.sessions.channel.ChannelData;\nimport com.checkout.sessions.channel.ThreeDsMethodCompletion;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nChannelData channelData = BrowserSession.builder() // other channel data types available\n    .acceptHeader(\"Accept:  *.*, q=0.1\")\n    .javaEnabled(true)\n    .language(\"FR-fr\")\n    .colorDepth(\"16\")\n    .screenWidth(\"1920\")\n    .screenHeight(\"1080\")\n    .timezone(\"60\")\n    .userAgent(\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\")\n    .threeDsMethodCompletion(ThreeDsMethodCompletion.Y)\n    .ipAddress(\"1.12.123.255\")\n    .build();\n\ntry {\n    GetSessionResponse response = api.sessionsClient().updateSession(\"session_id\", channelData).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}\n"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.update('sid_rwhwl4kb3eeenglibbvej2qtdy', {\n		channel: 'browser',\n		accept_header: 'Accept:  *.*, q=0.1',\n		java_enabled: true,\n		language: 'FR-fr',\n		color_depth: '16',\n		screen_height: '1080',\n		screen_width: '1920',\n		timezone: '60',\n		user_agent:\n			'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36',\n		ip_address: '1.12.123.255',\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Sessions\\Channel\\BrowserSession;\nuse Checkout\\Sessions\\Channel\\ThreeDsMethodCompletion;\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$browserSession = new BrowserSession();\n$browserSession->accept_header = \"Accept:  *.*, q=0.1\";\n$browserSession->java_enabled = true;\n$browserSession->language = \"FR-fr\";\n$browserSession->color_depth = \"16\";\n$browserSession->screen_width = \"1920\";\n$browserSession->screen_height = \"1080\";\n$browserSession->timezone = \"60\";\n$browserSession->user_agent = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36\";\n$browserSession->three_ds_method_completion = ThreeDsMethodCompletion::$y;\n$browserSession->ip_address = \"1.12.123.255\";\n\ntry {\n    $response = $api->getSessionsClient()->updateSession(\"session_id\", $browserSession);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}\n"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.sessions.sessions import ThreeDsMethodCompletion, BrowserSession\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.SESSIONS, OAuthScopes.SESSIONS_APP, OAuthScopes.SESSIONS_BROWSER]) \\\n    .build()\n\nrequest = BrowserSession()\nrequest.accept_header = 'Accept:  *.*, q=0.1'\nrequest.java_enabled = True\nrequest.language = 'FR-fr'\nrequest.color_depth = '16'\nrequest.screen_width = '1920'\nrequest.screen_height = '1080'\nrequest.timezone = '60'\nrequest.user_agent = 'Mozilla/5.0 (Windows NT 10.0 Win64 x64) AppleWebKit/537.36 (KHTML, like Gecko) ' \\\n                     'Chrome/69.0.3497.100 Safari/537.36 '\nrequest.three_ds_method_completion = ThreeDsMethodCompletion.Y\nrequest.ip_address = '1.12.123.255'\n\ntry:\n    response = api.sessions.update_session('session_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization\n"
  /sessions/{id}/complete:
    post:
      security:
        - OAuth:
            - sessions:app
            - sessions:browser
        - SessionSecret: [ ]
      summary: Complete a session
      operationId: completeSession  
      description: |
        Completes a session by posting the the following request to the callback URL (only relevant for non hosted sessions):
        ```
        {
           "session_id": "sid_llraltf4jlwu5dxdtprcv7ba5i",
           "amount" : 6540,
           "currency": "USD",
           "status": "approved",
           "authentication_type": "regular",
           "authentication_category": "payment",
           "reference": "ORD-5023-4E89",
           "approved": true,
           "protocol_version": "2.1.0",
           "response_code": "Y",
           "response_reason": "01",
           "cryptogram": "MTIzNDU2Nzg5MDA5ODc2NTQzMjE=",
           "eci": "05",
           "xid": "XSUErNftqkiTdlkpSk8p32GWOFA",
           "cardholder_info": "Card declined. Please contact your issuing bank.",
           "challenged": true
        }
        ```
        <br/>
        The fields of the above are the same as they would be in a GET session response
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Session completed successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\ntry\n{\n    await api.SessionsClient().CompleteSession(\"session_id\");\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\ntry {\n    api.sessionsClient().completeSession(\"session_id\").get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let session = await cko.sessions.complete('sid_j47vcmk3uaaerlv3zv7xhzg6du');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\ntry {\n    $api->getSessionsClient()->completeSession(\"session_id\");\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.SESSIONS, OAuthScopes.SESSIONS_APP, OAuthScopes.SESSIONS_BROWSER]) \\\n    .build()\n\ntry:\n    response = api.sessions.complete_session('session_id')\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /sessions/{id}/issuer-fingerprint:
    put:
      security:
        - OAuth:
            - sessions:browser
        - SessionSecret: [ ]
      summary: Update session 3DS Method completion indicator
      operationId: updateSessionThreeDsMethodCompletion
      description: Update the session's 3DS Method completion indicator based on the result of accessing the 3DS Method URL.
      tags:
        - Sessions
      parameters:
        - name: id
          in: path
          description: Session ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThreeDsMethodCompletion'
      responses:
        '200':
          description: Session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSessionResponseAfterChannelDataSupplied'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Session not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Unprocessable channel information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Sessions;\nusing Checkout.Sessions.Channel;\n\n//API keys\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\n//OAuth\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.Sessions)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nThreeDsMethodCompletionRequest request = new ThreeDsMethodCompletionRequest()\n{\n    ThreeDsMethodCompletion = ThreeDsMethodCompletion.Y\n};\n\ntry\n{\n    GetSessionResponseAfterChannelDataSupplied response = await api.SessionsClient().Update3dsMethodCompletionIndicator(\"session_secret\", \"session_id\", request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.sessions.ThreeDsMethodCompletionRequest;\nimport com.checkout.sessions.channel.ThreeDsMethodCompletion;\n\n// API Keys\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\n// OAuth\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.SESSIONS, FourOAuthScope.SESSIONS_APP, FourOAuthScope.SESSIONS_BROWSER) // more scopes available\n    .build();\n\nThreeDsMethodCompletionRequest threeDsMethodCompletionRequest = ThreeDsMethodCompletionRequest.builder()\n    .threeDsMethodCompletion(ThreeDsMethodCompletion.Y)\n    .build();\n\ntry {\n    api.sessionsClient().update3dsMethodCompletionIndicator(\"session_id\", threeDsMethodCompletionRequest).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['sessions:browser'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	let updated = await cko.sessions.update3DSMethodCompletionIndicator('sid_aurdb2b3yv6eniu7mbrl7nfopm', 'U');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\nuse Checkout\\Sessions\\Channel\\ThreeDsMethodCompletion;\nuse Checkout\\Sessions\\ThreeDsMethodCompletionRequest;\n\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$SessionsApp, FourOAuthScope::$SessionsBrowser]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new ThreeDsMethodCompletionRequest();\n$request->three_ds_method_completion = ThreeDsMethodCompletion::$y;\n\ntry {\n    $api->getSessionsClient()->updateThreeDsMethodCompletionIndicator(\"session_id\", $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\nfrom checkout_sdk.sessions.sessions import ThreeDsMethodCompletionRequest, ThreeDsMethodCompletion\n\n# API Keys\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.SESSIONS, OAuthScopes.SESSIONS_APP, OAuthScopes.SESSIONS_BROWSER]) \\\n    .build()\n\nrequest = ThreeDsMethodCompletionRequest()\nrequest.three_ds_method_completion = ThreeDsMethodCompletion.Y\n\ntry:\n    response = api.sessions.update_3ds_method_completion('session_id', request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
  /tokens:
    post:
      tags:
        - Tokens
      security:
        - ApiPublicKey: [ ]
      summary: Request a token
      operationId: requestAToken
      description: |
        Exchange card details for a reference token that can be used later to request a card payment. Tokens are single use and expire after 15 minutes.
        To create a token, please authenticate using your public key.
    
        **Please note:** You should only use the `card` type for testing purposes.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRequest'
      responses:
        '201':
          description: Reference token created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Tokens;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().StaticKeys()\n    .PublicKey(\"public_key\")\n    .SecretKey(\"secret_key\")\n    .Environment(Environment.Sandbox)\n    .HttpClientFactory(new DefaultHttpClientFactory())\n    .Build();\n\nCardTokenRequest request = new CardTokenRequest\n{\n    Number = \"4543474002249996\",\n    ExpiryMonth = 10,\n    ExpiryYear = 2027,\n    Name = \"FirstName LastName\",\n    Cvv = \"123\",\n    BillingAddress = new Address()\n    {\n        AddressLine1 = \"Checkout.com\",\n        AddressLine2 = \"90 Tottenham Court Road\",\n        City = \"London\",\n        State = \"London\",\n        Zip = \"W1T 4TJ\",\n        Country = CountryCode.GB\n    },\n    Phone = new Phone()\n    {\n        Number = \"4155552671\",\n        CountryCode = \"1\"\n    }\n};\n\ntry\n{\n    CardTokenResponse response = await api.TokensClient().Request(request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-java\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.Address;\nimport com.checkout.common.CountryCode;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.tokens.CardTokenRequest;\nimport com.checkout.tokens.CardTokenResponse;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .staticKeys()\n    .publicKey(\"public_key\")\n    .secretKey(\"secret_key\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .build();\n\nCardTokenRequest request = CardTokenRequest.builder()\n    .number(\"1234567\")\n    .expiryMonth(10)\n    .expiryYear(2027)\n    .billingAddress(Address.builder()\n        .addressLine1(\"Checkout\")\n        .addressLine2(\"90 Tottenham Court Road\")\n        .city(\"London\")\n        .state(\"London\")\n        .zip(\"W1T 4TJ\")\n        .country(CountryCode.GB)\n        .build())\n    .build();\n\ntry {\n    CardTokenResponse response = api.tokensClient().request(request).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const token = await cko.tokens.request({\n		// infered type: \"applepay\"\n		token_data: {\n			version: 'EC_v1',\n			data: 't7GeajLB9skXB6QSWfEpPA4WPhDqB7ekdd+F7588arLzve...',\n			signature: 'MIAGCSqGbGUg...',\n			header: {\n				ephemeralPublicKey: 'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgA...',\n				publicKeyHash: 'tqYV+tmG9aMh+l/K6cicUnPqkb1gUiLjSTM9gEz6...',\n				transactionId: '3cee89679130a4b...',\n			},\n		},\n	});\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Common\\Address;\nuse Checkout\\Common\\Country;\nuse Checkout\\Common\\Phone;\nuse Checkout\\Environment;\nuse Checkout\\Tokens\\CardTokenRequest;\n\n$builder = CheckoutFourSdk::staticKeys();\n$builder->setPublicKey(\"public_key\");\n$builder->setSecretKey(\"secret_key\");\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$phone = new Phone();\n$phone->country_code = \"+1\";\n$phone->number = \"415 555 2671\";\n\n$address = new Address();\n$address->address_line1 = \"CheckoutSdk.com\";\n$address->address_line2 = \"90 Tottenham Court Road\";\n$address->city = \"London\";\n$address->state = \"London\";\n$address->zip = \"W1T 4TJ\";\n$address->country = Country::$GB;\n\n$request = new CardTokenRequest();\n$request->name = \"Name\";\n$request->number = \"123456789\";\n$request->expiry_year = 2027;\n$request->expiry_month = 10;\n$request->cvv = \"123\";\n$request->billing_address = $address;\n$request->phone = $phone;\n\ntry {\n    $response = $api->getTokensClient()->requestCardToken($request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.common import Phone, Address\nfrom checkout_sdk.common.enums import Country\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\n\n# API Keys\nfrom checkout_sdk.tokens.tokens import CardTokenRequest\n\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\nphone = Phone()\nphone.country_code = '44'\nphone.number = '4155552671'\n\naddress = Address()\naddress.address_line1 = 'CheckoutSdk.com'\naddress.address_line2 = '90 Tottenham Court Road'\naddress.city = 'London'\naddress.state = 'London'\naddress.zip = 'W1T 4TJ'\naddress.country = Country.GB\n\nrequest = CardTokenRequest()\nrequest.number = 'number'\nrequest.expiry_month = 10\nrequest.expiry_year = 2027\nrequest.cvv = 123\nrequest.name = 'Name'\nrequest.billing_address = address\nrequest.phone = phone\n\ntry:\n    response = api.tokens.request(request)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n    # Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n    # Invalid authorization"
  /transfers:
    servers:
      - url: https://transfers.checkout.com
        description: Production server
      - url: https://transfers.sandbox.checkout.com
        description: Sandbox server
    post:
      security:
        - OAuth:
            - transfers:create
      description: |
        Initiate a transfer of funds from source entity to destination entity.
      summary: Initiate a transfer of funds
      operationId: createTransfer
      parameters:
        - $ref: '#/components/parameters/ckoIdempotencyKeyRequired'
      requestBody:
        required: true
        description: The details of the transfer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTransferRequest'
      responses:
        '201':
          description: Transfer successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateTransferResponse'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
      tags:
        - Transfers
  /transfers/{id}:
    servers:
      - url: https://transfers.checkout.com
        description: Production server
      - url: https://transfers.sandbox.checkout.com
        description: Sandbox server
    get:
      tags:
        - Transfers
      security:
        - OAuth:
            - transfers:view
      summary: Retrieve a transfer
      operationId: getTransferDetails
      description: Retrieve transfer details using the transfer identifier.
      parameters:
        - in: path
          name: id
          description: The transfer identifier
          required: true
          schema:
            type: string
          example: tra_y3oqhf46pyzuxjbcn2giaqnb4
      responses:
        '200':
          description: Transfer found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transfer'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Transfer not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - type: object
                    properties:
                      error_codes:
                        example:
                          - error_code1
                          - error_code2
  /validation/bank-accounts/{country}/{currency}:
    get:
      tags:
        - Instruments
      security:
        - OAuth:
            - payouts:bank-details
      summary: Get bank account field formatting
      operationId: getBankAccountFields
      description: |
        Returns the bank account field formatting required to create bank account instruments or perform payouts for the specified country and currency.
      parameters:
        - in: path
          name: country
          schema:
            type: string
            minLength: 2
            maxLength: 2
          required: true
          description: |
            The two-letter <a href="https://docs.checkout.com/four/resources/codes/country-codes" target="_blank">ISO country code</a>
        - in: path
          name: currency
          schema:
            type: string
            minLength: 3
            maxLength: 3
          required: true
          description: |
            The three-letter <a href="https://docs.checkout.com/four/resources/codes/currency-codes" target="_blank">ISO currency code</a>
        - in: query
          name: account-holder-type
          schema:
            type: string
            enum:
              - individual
              - corporate
              - government
          description: |
            The type of account holder that will be used to filter the fields returned
        - in: query
          name: payment-network
          schema:
            type: string
            enum:
              - local
              - sepa
              - fps
              - ach
              - fedwire
              - swift
          description: |
            The banking network that will be used to filter the fields returned
      responses:
        '200':
          description: Bank account fields retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountFields'
          headers:
            Cko-Request-Id:
              $ref: '#/components/headers/Cko-Request-Id'
            Cko-Version:
              $ref: '#/components/headers/Cko-Version'
        '401':
          description: Unauthorized
        '404':
          description: Fields not found
        '422':
          description: Invalid data was sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      x-code-samples:
        - lang: C#
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-net\nusing Checkout.Common;\nusing Checkout.Common.Four;\nusing Checkout.Instruments.Four.Get;\n\nFour.ICheckoutApi api = CheckoutSdk.FourSdk().OAuth()\n    .ClientCredentials(\"client_id\", \"client_secret\")\n    .Scopes(FourOAuthScope.PayoutsBankDetails)\n    .Environment(Environment.Sandbox)\n    .FilesEnvironment(Environment.Sandbox)\n    .Build();\n\nBankAccountFieldQuery request = new BankAccountFieldQuery\n{\n    AccountHolderType = AccountHolderType.Individual, \n    PaymentNetwork = PaymentNetwork.Local\n};\n\ntry\n{\n    BankAccountFieldResponse response = await api.InstrumentsClient().GetBankAccountFieldFormatting(CountryCode.GB, Currency.GBP, request);\n}\ncatch (CheckoutApiException e)\n{\n    // API error\n    string requestId = e.RequestId;\n    var statusCode = e.HttpStatusCode;\n    IDictionary<string, object> errorDetails = e.ErrorDetails;\n}\ncatch (CheckoutArgumentException e)\n{\n    // Bad arguments\n}\ncatch (CheckoutAuthorizationException e)\n{\n    // Invalid authorization\n}"
        - lang: Java
          source: "// For more information please refer to https://github.com/checkout/checkout-sdk-javaç\nimport com.checkout.CheckoutApiException;\nimport com.checkout.CheckoutArgumentException;\nimport com.checkout.CheckoutAuthorizationException;\nimport com.checkout.CheckoutSdk;\nimport com.checkout.Environment;\nimport com.checkout.common.CountryCode;\nimport com.checkout.common.Currency;\nimport com.checkout.common.four.AccountHolderType;\nimport com.checkout.four.CheckoutApi;\nimport com.checkout.instruments.four.get.BankAccountFieldQuery;\nimport com.checkout.instruments.four.get.BankAccountFieldResponse;\nimport com.checkout.instruments.four.get.PaymentNetwork;\n\nCheckoutApi api = CheckoutSdk.fourSdk()\n    .oAuth()\n    .clientCredentials(\"client_id\", \"client_secret\")\n    .environment(Environment.SANDBOX) // or Environment.PRODUCTION\n    .scopes(FourOAuthScope.PAYOUTS_BANK_DETAILS) // more scopes available\n    .build();\n\nBankAccountFieldQuery query = BankAccountFieldQuery.builder()\n    .accountHolderType(AccountHolderType.INDIVIDUAL)\n    .paymentNetwork(PaymentNetwork.LOCAL)\n    .build();\n\ntry {\n    BankAccountFieldResponse response = api.instrumentsClient().getBankAccountFieldFormatting(CountryCode.GB, Currency.GBP, query).get();\n} catch (CheckoutApiException e) {\n    // API error\n    String requestId = e.getRequestId();\n    int statusCode = e.getHttpStatusCode();\n    Map<String, Object> errorDetails = e.getErrorDetails();\n} catch (CheckoutArgumentException e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException e) {\n    // Invalid authorization\n}"
        - lang: Node
          source: "import { Checkout } from 'checkout-sdk-node';\n\nlet cko = new Checkout('your_client_secret_here', {\n	client: 'ack_XXXXXXXXXXXX',\n	scope: ['gateway'], // array of scopes\n	environment: 'sandbox', // or \"production\"\n});\n\n// Or if you use api keys:\n// const cko = new Checkout('sk_sbox_XXX', { pk: 'pk_sbox_XXX'}});\n\ntry {\n	const bank = await cko.instruments.getBankAccountFieldFormatting('GB', 'GBP');\n} catch (err) {\n	console.log(err.name);\n}"
        - lang: PHP
          source: "// Please refer to https://github.com/checkout/checkout-sdk-php\n<?php\n\nuse Checkout\\CheckoutApiException;\nuse Checkout\\CheckoutArgumentException;\nuse Checkout\\CheckoutAuthorizationException;\nuse Checkout\\CheckoutFourSdk;\nuse Checkout\\Environment;\nuse Checkout\\Four\\FourOAuthScope;\n\n$builder = CheckoutFourSdk::oAuth();\n$builder->clientCredentials(\"client_id\", \"client_secret\");\n$builder->scopes([FourOAuthScope::$PayoutsBankDetails]); // more scopes available\n$builder->setEnvironment(Environment::sandbox()); // or Environment::production()\n$builder->setFilesEnvironment(Environment::sandbox()); // or Environment::production()\n$api = $builder->build();\n\n$request = new BankAccountFieldQuery();\n$request->payment_network = PaymentNetwork::$local;\n$request->account_holder_type = AccountHolderType::$individual;\n\ntry {\n    $response = $api->getInstrumentsClient()->getBankAccountFieldFormatting(Country::$GB, Currency::$GBP, $request);\n} catch (CheckoutApiException $e) {\n    // API error\n    $request_id = $e->request_id;\n    $http_status_code = $e->http_status_code;\n    $error_details = $e->error_details;\n} catch (CheckoutArgumentException $e) {\n    // Bad arguments\n} catch (CheckoutAuthorizationException $e) {\n    // Bad Invalid authorization\n}"
        - lang: Python
          source: "# For more information please refer to https://github.com/checkout/checkout-sdk-python\nimport checkout_sdk\nfrom checkout_sdk.common.enums import Country, Currency\nfrom checkout_sdk.common.enums_four import AccountHolderType\nfrom checkout_sdk.environment import Environment\nfrom checkout_sdk.exception import CheckoutApiException, CheckoutArgumentException, CheckoutAuthorizationException\nfrom checkout_sdk.four.oauth_scopes import OAuthScopes\n\n# API Keys\nfrom checkout_sdk.instruments.instruments_four import BankAccountFieldQuery, PaymentNetwork\n\napi = checkout_sdk.FourSdk() \\\n    .secret_key('secret_key') \\\n    .public_key('public_key') \\\n    .environment(Environment.sandbox()) \\\n    .build()\n# or Environment.production()\n\n# OAuth\napi = checkout_sdk.OAuthSdk() \\\n    .client_credentials('client_id', 'client_secret') \\\n    .environment(Environment.sandbox()) \\\n    .scopes([OAuthScopes.PAYOUTS_BANK_DETAILS]) \\\n    .build()\n\nquery = BankAccountFieldQuery()\nquery.account_holder_type = AccountHolderType.INDIVIDUAL\nquery.payment_network = PaymentNetwork.LOCAL\n\ntry:\n    response = api.instruments.get_bank_account_field_formatting(Country.GB, Currency.GBP, query)\nexcept CheckoutApiException as err:\n    # API error\n    request_id = err.request_id\n    status_code = err.http_status_code\n    error_details = err.error_details\n    http_response = err.http_response\nexcept CheckoutArgumentException as err:\n# Bad arguments\n\nexcept CheckoutAuthorizationException as err:\n# Invalid authorization"
components:
